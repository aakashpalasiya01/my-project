/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rx";
exports.ids = ["vendor-chunks/rx"];
exports.modules = {

/***/ "(ssr)/./node_modules/rx/dist/rx.aggregates.js":
/*!***********************************************!*\
  !*** ./node_modules/rx/dist/rx.aggregates.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // References\n    var Observable = Rx.Observable, observableProto = Observable.prototype, BinaryDisposable = Rx.BinaryDisposable, AnonymousObservable = Rx.AnonymousObservable, AbstractObserver = Rx.internals.AbstractObserver, disposableEmpty = Rx.Disposable.empty, helpers = Rx.helpers, defaultComparer = helpers.defaultComparer, identity = helpers.identity, defaultSubComparer = helpers.defaultSubComparer, isFunction = helpers.isFunction, isPromise = helpers.isPromise, isArrayLike = helpers.isArrayLike, isIterable = helpers.isIterable, inherits = Rx.internals.inherits, observableFromPromise = Observable.fromPromise, observableFrom = Observable.from, bindCallback = Rx.internals.bindCallback, EmptyError = Rx.EmptyError, ObservableBase = Rx.ObservableBase, ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    var ExtremaByObservable = function(__super__) {\n        inherits(ExtremaByObservable, __super__);\n        function ExtremaByObservable(source, k, c) {\n            this.source = source;\n            this._k = k;\n            this._c = c;\n            __super__.call(this);\n        }\n        ExtremaByObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ExtremaByObserver(o, this._k, this._c));\n        };\n        return ExtremaByObservable;\n    }(ObservableBase);\n    var ExtremaByObserver = function(__super__) {\n        inherits(ExtremaByObserver, __super__);\n        function ExtremaByObserver(o, k, c) {\n            this._o = o;\n            this._k = k;\n            this._c = c;\n            this._v = null;\n            this._hv = false;\n            this._l = [];\n            __super__.call(this);\n        }\n        ExtremaByObserver.prototype.next = function(x) {\n            var key = tryCatch(this._k)(x);\n            if (key === errorObj) {\n                return this._o.onError(key.e);\n            }\n            var comparison = 0;\n            if (!this._hv) {\n                this._hv = true;\n                this._v = key;\n            } else {\n                comparison = tryCatch(this._c)(key, this._v);\n                if (comparison === errorObj) {\n                    return this._o.onError(comparison.e);\n                }\n            }\n            if (comparison > 0) {\n                this._v = key;\n                this._l = [];\n            }\n            if (comparison >= 0) {\n                this._l.push(x);\n            }\n        };\n        ExtremaByObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ExtremaByObserver.prototype.completed = function() {\n            this._o.onNext(this._l);\n            this._o.onCompleted();\n        };\n        return ExtremaByObserver;\n    }(AbstractObserver);\n    function firstOnly(x) {\n        if (x.length === 0) {\n            throw new EmptyError();\n        }\n        return x[0];\n    }\n    var ReduceObservable = function(__super__) {\n        inherits(ReduceObservable, __super__);\n        function ReduceObservable(source, accumulator, hasSeed, seed) {\n            this.source = source;\n            this.accumulator = accumulator;\n            this.hasSeed = hasSeed;\n            this.seed = seed;\n            __super__.call(this);\n        }\n        ReduceObservable.prototype.subscribeCore = function(observer) {\n            return this.source.subscribe(new ReduceObserver(observer, this));\n        };\n        return ReduceObservable;\n    }(ObservableBase);\n    var ReduceObserver = function(__super__) {\n        inherits(ReduceObserver, __super__);\n        function ReduceObserver(o, parent) {\n            this._o = o;\n            this._p = parent;\n            this._fn = parent.accumulator;\n            this._hs = parent.hasSeed;\n            this._s = parent.seed;\n            this._ha = false;\n            this._a = null;\n            this._hv = false;\n            this._i = 0;\n            __super__.call(this);\n        }\n        ReduceObserver.prototype.next = function(x) {\n            !this._hv && (this._hv = true);\n            if (this._ha) {\n                this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);\n            } else {\n                this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;\n                this._ha = true;\n            }\n            if (this._a === errorObj) {\n                return this._o.onError(this._a.e);\n            }\n            this._i++;\n        };\n        ReduceObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ReduceObserver.prototype.completed = function() {\n            this._hv && this._o.onNext(this._a);\n            !this._hv && this._hs && this._o.onNext(this._s);\n            !this._hv && !this._hs && this._o.onError(new EmptyError());\n            this._o.onCompleted();\n        };\n        return ReduceObserver;\n    }(AbstractObserver);\n    /**\n  * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.\n  * For aggregation behavior with incremental intermediate results, see Observable.scan.\n  * @param {Function} accumulator An accumulator function to be invoked on each element.\n  * @param {Any} [seed] The initial accumulator value.\n  * @returns {Observable} An observable sequence containing a single element with the final accumulator value.\n  */ observableProto.reduce = function() {\n        var hasSeed = false, seed, accumulator = arguments[0];\n        if (arguments.length === 2) {\n            hasSeed = true;\n            seed = arguments[1];\n        }\n        return new ReduceObservable(this, accumulator, hasSeed, seed);\n    };\n    var SomeObservable = function(__super__) {\n        inherits(SomeObservable, __super__);\n        function SomeObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        SomeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SomeObserver(o, this._fn, this.source));\n        };\n        return SomeObservable;\n    }(ObservableBase);\n    var SomeObserver = function(__super__) {\n        inherits(SomeObserver, __super__);\n        function SomeObserver(o, fn, s) {\n            this._o = o;\n            this._fn = fn;\n            this._s = s;\n            this._i = 0;\n            __super__.call(this);\n        }\n        SomeObserver.prototype.next = function(x) {\n            var result = tryCatch(this._fn)(x, this._i++, this._s);\n            if (result === errorObj) {\n                return this._o.onError(result.e);\n            }\n            if (Boolean(result)) {\n                this._o.onNext(true);\n                this._o.onCompleted();\n            }\n        };\n        SomeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SomeObserver.prototype.completed = function() {\n            this._o.onNext(false);\n            this._o.onCompleted();\n        };\n        return SomeObserver;\n    }(AbstractObserver);\n    /**\n   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.\n   * @param {Function} [predicate] A function to test each element for a condition.\n   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.\n   */ observableProto.some = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return new SomeObservable(this, fn);\n    };\n    var IsEmptyObservable = function(__super__) {\n        inherits(IsEmptyObservable, __super__);\n        function IsEmptyObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        IsEmptyObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new IsEmptyObserver(o));\n        };\n        return IsEmptyObservable;\n    }(ObservableBase);\n    var IsEmptyObserver = function(__super__) {\n        inherits(IsEmptyObserver, __super__);\n        function IsEmptyObserver(o) {\n            this._o = o;\n            __super__.call(this);\n        }\n        IsEmptyObserver.prototype.next = function() {\n            this._o.onNext(false);\n            this._o.onCompleted();\n        };\n        IsEmptyObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        IsEmptyObserver.prototype.completed = function() {\n            this._o.onNext(true);\n            this._o.onCompleted();\n        };\n        return IsEmptyObserver;\n    }(AbstractObserver);\n    /**\n   * Determines whether an observable sequence is empty.\n   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.\n   */ observableProto.isEmpty = function() {\n        return new IsEmptyObservable(this);\n    };\n    var EveryObservable = function(__super__) {\n        inherits(EveryObservable, __super__);\n        function EveryObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        EveryObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new EveryObserver(o, this._fn, this.source));\n        };\n        return EveryObservable;\n    }(ObservableBase);\n    var EveryObserver = function(__super__) {\n        inherits(EveryObserver, __super__);\n        function EveryObserver(o, fn, s) {\n            this._o = o;\n            this._fn = fn;\n            this._s = s;\n            this._i = 0;\n            __super__.call(this);\n        }\n        EveryObserver.prototype.next = function(x) {\n            var result = tryCatch(this._fn)(x, this._i++, this._s);\n            if (result === errorObj) {\n                return this._o.onError(result.e);\n            }\n            if (!Boolean(result)) {\n                this._o.onNext(false);\n                this._o.onCompleted();\n            }\n        };\n        EveryObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        EveryObserver.prototype.completed = function() {\n            this._o.onNext(true);\n            this._o.onCompleted();\n        };\n        return EveryObserver;\n    }(AbstractObserver);\n    /**\n   * Determines whether all elements of an observable sequence satisfy a condition.\n   * @param {Function} [predicate] A function to test each element for a condition.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.\n   */ observableProto.every = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return new EveryObservable(this, fn);\n    };\n    var IncludesObservable = function(__super__) {\n        inherits(IncludesObservable, __super__);\n        function IncludesObservable(source, elem, idx) {\n            var n = +idx || 0;\n            Math.abs(n) === Infinity && (n = 0);\n            this.source = source;\n            this._elem = elem;\n            this._n = n;\n            __super__.call(this);\n        }\n        IncludesObservable.prototype.subscribeCore = function(o) {\n            if (this._n < 0) {\n                o.onNext(false);\n                o.onCompleted();\n                return disposableEmpty;\n            }\n            return this.source.subscribe(new IncludesObserver(o, this._elem, this._n));\n        };\n        return IncludesObservable;\n    }(ObservableBase);\n    var IncludesObserver = function(__super__) {\n        inherits(IncludesObserver, __super__);\n        function IncludesObserver(o, elem, n) {\n            this._o = o;\n            this._elem = elem;\n            this._n = n;\n            this._i = 0;\n            __super__.call(this);\n        }\n        function comparer(a, b) {\n            return a === 0 && b === 0 || a === b || isNaN(a) && isNaN(b);\n        }\n        IncludesObserver.prototype.next = function(x) {\n            if (this._i++ >= this._n && comparer(x, this._elem)) {\n                this._o.onNext(true);\n                this._o.onCompleted();\n            }\n        };\n        IncludesObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        IncludesObserver.prototype.completed = function() {\n            this._o.onNext(false);\n            this._o.onCompleted();\n        };\n        return IncludesObserver;\n    }(AbstractObserver);\n    /**\n   * Determines whether an observable sequence includes a specified element with an optional equality comparer.\n   * @param searchElement The value to locate in the source sequence.\n   * @param {Number} [fromIndex] An equality comparer to compare elements.\n   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.\n   */ observableProto.includes = function(searchElement, fromIndex) {\n        return new IncludesObservable(this, searchElement, fromIndex);\n    };\n    var CountObservable = function(__super__) {\n        inherits(CountObservable, __super__);\n        function CountObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        CountObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new CountObserver(o, this._fn, this.source));\n        };\n        return CountObservable;\n    }(ObservableBase);\n    var CountObserver = function(__super__) {\n        inherits(CountObserver, __super__);\n        function CountObserver(o, fn, s) {\n            this._o = o;\n            this._fn = fn;\n            this._s = s;\n            this._i = 0;\n            this._c = 0;\n            __super__.call(this);\n        }\n        CountObserver.prototype.next = function(x) {\n            if (this._fn) {\n                var result = tryCatch(this._fn)(x, this._i++, this._s);\n                if (result === errorObj) {\n                    return this._o.onError(result.e);\n                }\n                Boolean(result) && this._c++;\n            } else {\n                this._c++;\n            }\n        };\n        CountObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        CountObserver.prototype.completed = function() {\n            this._o.onNext(this._c);\n            this._o.onCompleted();\n        };\n        return CountObserver;\n    }(AbstractObserver);\n    /**\n   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.\n   * @example\n   * res = source.count();\n   * res = source.count(function (x) { return x > 3; });\n   * @param {Function} [predicate]A function to test each element for a condition.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.\n   */ observableProto.count = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return new CountObservable(this, fn);\n    };\n    var IndexOfObservable = function(__super__) {\n        inherits(IndexOfObservable, __super__);\n        function IndexOfObservable(source, e, n) {\n            this.source = source;\n            this._e = e;\n            this._n = n;\n            __super__.call(this);\n        }\n        IndexOfObservable.prototype.subscribeCore = function(o) {\n            if (this._n < 0) {\n                o.onNext(-1);\n                o.onCompleted();\n                return disposableEmpty;\n            }\n            return this.source.subscribe(new IndexOfObserver(o, this._e, this._n));\n        };\n        return IndexOfObservable;\n    }(ObservableBase);\n    var IndexOfObserver = function(__super__) {\n        inherits(IndexOfObserver, __super__);\n        function IndexOfObserver(o, e, n) {\n            this._o = o;\n            this._e = e;\n            this._n = n;\n            this._i = 0;\n            __super__.call(this);\n        }\n        IndexOfObserver.prototype.next = function(x) {\n            if (this._i >= this._n && x === this._e) {\n                this._o.onNext(this._i);\n                this._o.onCompleted();\n            }\n            this._i++;\n        };\n        IndexOfObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        IndexOfObserver.prototype.completed = function() {\n            this._o.onNext(-1);\n            this._o.onCompleted();\n        };\n        return IndexOfObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.\n   * @param {Any} searchElement Element to locate in the array.\n   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.\n   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.\n   */ observableProto.indexOf = function(searchElement, fromIndex) {\n        var n = +fromIndex || 0;\n        Math.abs(n) === Infinity && (n = 0);\n        return new IndexOfObservable(this, searchElement, n);\n    };\n    var SumObservable = function(__super__) {\n        inherits(SumObservable, __super__);\n        function SumObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        SumObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SumObserver(o, this._fn, this.source));\n        };\n        return SumObservable;\n    }(ObservableBase);\n    var SumObserver = function(__super__) {\n        inherits(SumObserver, __super__);\n        function SumObserver(o, fn, s) {\n            this._o = o;\n            this._fn = fn;\n            this._s = s;\n            this._i = 0;\n            this._c = 0;\n            __super__.call(this);\n        }\n        SumObserver.prototype.next = function(x) {\n            if (this._fn) {\n                var result = tryCatch(this._fn)(x, this._i++, this._s);\n                if (result === errorObj) {\n                    return this._o.onError(result.e);\n                }\n                this._c += result;\n            } else {\n                this._c += x;\n            }\n        };\n        SumObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SumObserver.prototype.completed = function() {\n            this._o.onNext(this._c);\n            this._o.onCompleted();\n        };\n        return SumObserver;\n    }(AbstractObserver);\n    /**\n   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.\n   * @param {Function} [selector] A transform function to apply to each element.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.\n   */ observableProto.sum = function(keySelector, thisArg) {\n        var fn = bindCallback(keySelector, thisArg, 3);\n        return new SumObservable(this, fn);\n    };\n    /**\n   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.\n   * @example\n   * var res = source.minBy(function (x) { return x.value; });\n   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });\n   * @param {Function} keySelector Key selector function.\n   * @param {Function} [comparer] Comparer used to compare key values.\n   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.\n   */ observableProto.minBy = function(keySelector, comparer) {\n        comparer || (comparer = defaultSubComparer);\n        return new ExtremaByObservable(this, keySelector, function(x, y) {\n            return comparer(x, y) * -1;\n        });\n    };\n    /**\n   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.\n   * @example\n   * var res = source.min();\n   * var res = source.min(function (x, y) { return x.value - y.value; });\n   * @param {Function} [comparer] Comparer used to compare elements.\n   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.\n   */ observableProto.min = function(comparer) {\n        return this.minBy(identity, comparer).map(firstOnly);\n    };\n    /**\n   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.\n   * @example\n   * var res = source.maxBy(function (x) { return x.value; });\n   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });\n   * @param {Function} keySelector Key selector function.\n   * @param {Function} [comparer]  Comparer used to compare key values.\n   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.\n   */ observableProto.maxBy = function(keySelector, comparer) {\n        comparer || (comparer = defaultSubComparer);\n        return new ExtremaByObservable(this, keySelector, comparer);\n    };\n    /**\n   * Returns the maximum value in an observable sequence according to the specified comparer.\n   * @example\n   * var res = source.max();\n   * var res = source.max(function (x, y) { return x.value - y.value; });\n   * @param {Function} [comparer] Comparer used to compare elements.\n   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.\n   */ observableProto.max = function(comparer) {\n        return this.maxBy(identity, comparer).map(firstOnly);\n    };\n    var AverageObservable = function(__super__) {\n        inherits(AverageObservable, __super__);\n        function AverageObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        AverageObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new AverageObserver(o, this._fn, this.source));\n        };\n        return AverageObservable;\n    }(ObservableBase);\n    var AverageObserver = function(__super__) {\n        inherits(AverageObserver, __super__);\n        function AverageObserver(o, fn, s) {\n            this._o = o;\n            this._fn = fn;\n            this._s = s;\n            this._c = 0;\n            this._t = 0;\n            __super__.call(this);\n        }\n        AverageObserver.prototype.next = function(x) {\n            if (this._fn) {\n                var r = tryCatch(this._fn)(x, this._c++, this._s);\n                if (r === errorObj) {\n                    return this._o.onError(r.e);\n                }\n                this._t += r;\n            } else {\n                this._c++;\n                this._t += x;\n            }\n        };\n        AverageObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        AverageObserver.prototype.completed = function() {\n            if (this._c === 0) {\n                return this._o.onError(new EmptyError());\n            }\n            this._o.onNext(this._t / this._c);\n            this._o.onCompleted();\n        };\n        return AverageObserver;\n    }(AbstractObserver);\n    /**\n   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.\n   * @param {Function} [selector] A transform function to apply to each element.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.\n   */ observableProto.average = function(keySelector, thisArg) {\n        var source = this, fn;\n        if (isFunction(keySelector)) {\n            fn = bindCallback(keySelector, thisArg, 3);\n        }\n        return new AverageObservable(source, fn);\n    };\n    /**\n   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.\n   *\n   * @example\n   * var res = res = source.sequenceEqual([1,2,3]);\n   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });\n   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));\n   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });\n   * @param {Observable} second Second observable sequence or array to compare.\n   * @param {Function} [comparer] Comparer used to compare elements of both sequences.\n   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.\n   */ observableProto.sequenceEqual = function(second, comparer) {\n        var first = this;\n        comparer || (comparer = defaultComparer);\n        return new AnonymousObservable(function(o) {\n            var donel = false, doner = false, ql = [], qr = [];\n            var subscription1 = first.subscribe(function(x) {\n                if (qr.length > 0) {\n                    var v = qr.shift();\n                    var equal = tryCatch(comparer)(v, x);\n                    if (equal === errorObj) {\n                        return o.onError(equal.e);\n                    }\n                    if (!equal) {\n                        o.onNext(false);\n                        o.onCompleted();\n                    }\n                } else if (doner) {\n                    o.onNext(false);\n                    o.onCompleted();\n                } else {\n                    ql.push(x);\n                }\n            }, function(e) {\n                o.onError(e);\n            }, function() {\n                donel = true;\n                if (ql.length === 0) {\n                    if (qr.length > 0) {\n                        o.onNext(false);\n                        o.onCompleted();\n                    } else if (doner) {\n                        o.onNext(true);\n                        o.onCompleted();\n                    }\n                }\n            });\n            (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));\n            isPromise(second) && (second = observableFromPromise(second));\n            var subscription2 = second.subscribe(function(x) {\n                if (ql.length > 0) {\n                    var v = ql.shift();\n                    var equal = tryCatch(comparer)(v, x);\n                    if (equal === errorObj) {\n                        return o.onError(equal.e);\n                    }\n                    if (!equal) {\n                        o.onNext(false);\n                        o.onCompleted();\n                    }\n                } else if (donel) {\n                    o.onNext(false);\n                    o.onCompleted();\n                } else {\n                    qr.push(x);\n                }\n            }, function(e) {\n                o.onError(e);\n            }, function() {\n                doner = true;\n                if (qr.length === 0) {\n                    if (ql.length > 0) {\n                        o.onNext(false);\n                        o.onCompleted();\n                    } else if (donel) {\n                        o.onNext(true);\n                        o.onCompleted();\n                    }\n                }\n            });\n            return new BinaryDisposable(subscription1, subscription2);\n        }, first);\n    };\n    var ElementAtObservable = function(__super__) {\n        inherits(ElementAtObservable, __super__);\n        function ElementAtObservable(source, i, d) {\n            this.source = source;\n            this._i = i;\n            this._d = d;\n            __super__.call(this);\n        }\n        ElementAtObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ElementAtObserver(o, this._i, this._d));\n        };\n        return ElementAtObservable;\n    }(ObservableBase);\n    var ElementAtObserver = function(__super__) {\n        inherits(ElementAtObserver, __super__);\n        function ElementAtObserver(o, i, d) {\n            this._o = o;\n            this._i = i;\n            this._d = d;\n            __super__.call(this);\n        }\n        ElementAtObserver.prototype.next = function(x) {\n            if (this._i-- === 0) {\n                this._o.onNext(x);\n                this._o.onCompleted();\n            }\n        };\n        ElementAtObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ElementAtObserver.prototype.completed = function() {\n            if (this._d === undefined) {\n                this._o.onError(new ArgumentOutOfRangeError());\n            } else {\n                this._o.onNext(this._d);\n                this._o.onCompleted();\n            }\n        };\n        return ElementAtObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the element at a specified index in a sequence or default value if not found.\n   * @param {Number} index The zero-based index of the element to retrieve.\n   * @param {Any} [defaultValue] The default value to use if elementAt does not find a value.\n   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.\n   */ observableProto.elementAt = function(index, defaultValue) {\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        return new ElementAtObservable(this, index, defaultValue);\n    };\n    var SingleObserver = function(__super__) {\n        inherits(SingleObserver, __super__);\n        function SingleObserver(o, obj, s) {\n            this._o = o;\n            this._obj = obj;\n            this._s = s;\n            this._i = 0;\n            this._hv = false;\n            this._v = null;\n            __super__.call(this);\n        }\n        SingleObserver.prototype.next = function(x) {\n            var shouldYield = false;\n            if (this._obj.predicate) {\n                var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                Boolean(res) && (shouldYield = true);\n            } else if (!this._obj.predicate) {\n                shouldYield = true;\n            }\n            if (shouldYield) {\n                if (this._hv) {\n                    return this._o.onError(new Error(\"Sequence contains more than one matching element\"));\n                }\n                this._hv = true;\n                this._v = x;\n            }\n        };\n        SingleObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SingleObserver.prototype.completed = function() {\n            if (this._hv) {\n                this._o.onNext(this._v);\n                this._o.onCompleted();\n            } else if (this._obj.defaultValue === undefined) {\n                this._o.onError(new EmptyError());\n            } else {\n                this._o.onNext(this._obj.defaultValue);\n                this._o.onCompleted();\n            }\n        };\n        return SingleObserver;\n    }(AbstractObserver);\n    /**\n     * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.\n     * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.\n     */ observableProto.single = function(predicate, thisArg) {\n        var obj = {}, source = this;\n        if (typeof arguments[0] === \"object\") {\n            obj = arguments[0];\n        } else {\n            obj = {\n                predicate: arguments[0],\n                thisArg: arguments[1],\n                defaultValue: arguments[2]\n            };\n        }\n        if (isFunction(obj.predicate)) {\n            var fn = obj.predicate;\n            obj.predicate = bindCallback(fn, obj.thisArg, 3);\n        }\n        return new AnonymousObservable(function(o) {\n            return source.subscribe(new SingleObserver(o, obj, source));\n        }, source);\n    };\n    var FirstObservable = function(__super__) {\n        inherits(FirstObservable, __super__);\n        function FirstObservable(source, obj) {\n            this.source = source;\n            this._obj = obj;\n            __super__.call(this);\n        }\n        FirstObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new FirstObserver(o, this._obj, this.source));\n        };\n        return FirstObservable;\n    }(ObservableBase);\n    var FirstObserver = function(__super__) {\n        inherits(FirstObserver, __super__);\n        function FirstObserver(o, obj, s) {\n            this._o = o;\n            this._obj = obj;\n            this._s = s;\n            this._i = 0;\n            __super__.call(this);\n        }\n        FirstObserver.prototype.next = function(x) {\n            if (this._obj.predicate) {\n                var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                if (Boolean(res)) {\n                    this._o.onNext(x);\n                    this._o.onCompleted();\n                }\n            } else if (!this._obj.predicate) {\n                this._o.onNext(x);\n                this._o.onCompleted();\n            }\n        };\n        FirstObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        FirstObserver.prototype.completed = function() {\n            if (this._obj.defaultValue === undefined) {\n                this._o.onError(new EmptyError());\n            } else {\n                this._o.onNext(this._obj.defaultValue);\n                this._o.onCompleted();\n            }\n        };\n        return FirstObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.\n   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.\n   */ observableProto.first = function() {\n        var obj = {}, source = this;\n        if (typeof arguments[0] === \"object\") {\n            obj = arguments[0];\n        } else {\n            obj = {\n                predicate: arguments[0],\n                thisArg: arguments[1],\n                defaultValue: arguments[2]\n            };\n        }\n        if (isFunction(obj.predicate)) {\n            var fn = obj.predicate;\n            obj.predicate = bindCallback(fn, obj.thisArg, 3);\n        }\n        return new FirstObservable(this, obj);\n    };\n    var LastObservable = function(__super__) {\n        inherits(LastObservable, __super__);\n        function LastObservable(source, obj) {\n            this.source = source;\n            this._obj = obj;\n            __super__.call(this);\n        }\n        LastObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new LastObserver(o, this._obj, this.source));\n        };\n        return LastObservable;\n    }(ObservableBase);\n    var LastObserver = function(__super__) {\n        inherits(LastObserver, __super__);\n        function LastObserver(o, obj, s) {\n            this._o = o;\n            this._obj = obj;\n            this._s = s;\n            this._i = 0;\n            this._hv = false;\n            this._v = null;\n            __super__.call(this);\n        }\n        LastObserver.prototype.next = function(x) {\n            var shouldYield = false;\n            if (this._obj.predicate) {\n                var res = tryCatch(this._obj.predicate)(x, this._i++, this._s);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                Boolean(res) && (shouldYield = true);\n            } else if (!this._obj.predicate) {\n                shouldYield = true;\n            }\n            if (shouldYield) {\n                this._hv = true;\n                this._v = x;\n            }\n        };\n        LastObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        LastObserver.prototype.completed = function() {\n            if (this._hv) {\n                this._o.onNext(this._v);\n                this._o.onCompleted();\n            } else if (this._obj.defaultValue === undefined) {\n                this._o.onError(new EmptyError());\n            } else {\n                this._o.onNext(this._obj.defaultValue);\n                this._o.onCompleted();\n            }\n        };\n        return LastObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.\n   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.\n   */ observableProto.last = function() {\n        var obj = {}, source = this;\n        if (typeof arguments[0] === \"object\") {\n            obj = arguments[0];\n        } else {\n            obj = {\n                predicate: arguments[0],\n                thisArg: arguments[1],\n                defaultValue: arguments[2]\n            };\n        }\n        if (isFunction(obj.predicate)) {\n            var fn = obj.predicate;\n            obj.predicate = bindCallback(fn, obj.thisArg, 3);\n        }\n        return new LastObservable(this, obj);\n    };\n    var FindValueObserver = function(__super__) {\n        inherits(FindValueObserver, __super__);\n        function FindValueObserver(observer, source, callback, yieldIndex) {\n            this._o = observer;\n            this._s = source;\n            this._cb = callback;\n            this._y = yieldIndex;\n            this._i = 0;\n            __super__.call(this);\n        }\n        FindValueObserver.prototype.next = function(x) {\n            var shouldRun = tryCatch(this._cb)(x, this._i, this._s);\n            if (shouldRun === errorObj) {\n                return this._o.onError(shouldRun.e);\n            }\n            if (shouldRun) {\n                this._o.onNext(this._y ? this._i : x);\n                this._o.onCompleted();\n            } else {\n                this._i++;\n            }\n        };\n        FindValueObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        FindValueObserver.prototype.completed = function() {\n            this._y && this._o.onNext(-1);\n            this._o.onCompleted();\n        };\n        return FindValueObserver;\n    }(AbstractObserver);\n    function findValue(source, predicate, thisArg, yieldIndex) {\n        var callback = bindCallback(predicate, thisArg, 3);\n        return new AnonymousObservable(function(o) {\n            return source.subscribe(new FindValueObserver(o, source, callback, yieldIndex));\n        }, source);\n    }\n    /**\n   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.\n   * @param {Function} predicate The predicate that defines the conditions of the element to search for.\n   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.\n   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.\n   */ observableProto.find = function(predicate, thisArg) {\n        return findValue(this, predicate, thisArg, false);\n    };\n    /**\n   * Searches for an element that matches the conditions defined by the specified predicate, and returns\n   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.\n   * @param {Function} predicate The predicate that defines the conditions of the element to search for.\n   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.\n   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.\n  */ observableProto.findIndex = function(predicate, thisArg) {\n        return findValue(this, predicate, thisArg, true);\n    };\n    var ToSetObservable = function(__super__) {\n        inherits(ToSetObservable, __super__);\n        function ToSetObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        ToSetObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ToSetObserver(o));\n        };\n        return ToSetObservable;\n    }(ObservableBase);\n    var ToSetObserver = function(__super__) {\n        inherits(ToSetObserver, __super__);\n        function ToSetObserver(o) {\n            this._o = o;\n            this._s = new root.Set();\n            __super__.call(this);\n        }\n        ToSetObserver.prototype.next = function(x) {\n            this._s.add(x);\n        };\n        ToSetObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ToSetObserver.prototype.completed = function() {\n            this._o.onNext(this._s);\n            this._o.onCompleted();\n        };\n        return ToSetObserver;\n    }(AbstractObserver);\n    /**\n   * Converts the observable sequence to a Set if it exists.\n   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.\n   */ observableProto.toSet = function() {\n        if (typeof root.Set === \"undefined\") {\n            throw new TypeError();\n        }\n        return new ToSetObservable(this);\n    };\n    var ToMapObservable = function(__super__) {\n        inherits(ToMapObservable, __super__);\n        function ToMapObservable(source, k, e) {\n            this.source = source;\n            this._k = k;\n            this._e = e;\n            __super__.call(this);\n        }\n        ToMapObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ToMapObserver(o, this._k, this._e));\n        };\n        return ToMapObservable;\n    }(ObservableBase);\n    var ToMapObserver = function(__super__) {\n        inherits(ToMapObserver, __super__);\n        function ToMapObserver(o, k, e) {\n            this._o = o;\n            this._k = k;\n            this._e = e;\n            this._m = new root.Map();\n            __super__.call(this);\n        }\n        ToMapObserver.prototype.next = function(x) {\n            var key = tryCatch(this._k)(x);\n            if (key === errorObj) {\n                return this._o.onError(key.e);\n            }\n            var elem = x;\n            if (this._e) {\n                elem = tryCatch(this._e)(x);\n                if (elem === errorObj) {\n                    return this._o.onError(elem.e);\n                }\n            }\n            this._m.set(key, elem);\n        };\n        ToMapObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ToMapObserver.prototype.completed = function() {\n            this._o.onNext(this._m);\n            this._o.onCompleted();\n        };\n        return ToMapObserver;\n    }(AbstractObserver);\n    /**\n  * Converts the observable sequence to a Map if it exists.\n  * @param {Function} keySelector A function which produces the key for the Map.\n  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.\n  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.\n  */ observableProto.toMap = function(keySelector, elementSelector) {\n        if (typeof root.Map === \"undefined\") {\n            throw new TypeError();\n        }\n        return new ToMapObservable(this, keySelector, elementSelector);\n    };\n    var SliceObservable = function(__super__) {\n        inherits(SliceObservable, __super__);\n        function SliceObservable(source, b, e) {\n            this.source = source;\n            this._b = b;\n            this._e = e;\n            __super__.call(this);\n        }\n        SliceObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SliceObserver(o, this._b, this._e));\n        };\n        return SliceObservable;\n    }(ObservableBase);\n    var SliceObserver = function(__super__) {\n        inherits(SliceObserver, __super__);\n        function SliceObserver(o, b, e) {\n            this._o = o;\n            this._b = b;\n            this._e = e;\n            this._i = 0;\n            __super__.call(this);\n        }\n        SliceObserver.prototype.next = function(x) {\n            if (this._i >= this._b) {\n                if (this._e === this._i) {\n                    this._o.onCompleted();\n                } else {\n                    this._o.onNext(x);\n                }\n            }\n            this._i++;\n        };\n        SliceObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SliceObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SliceObserver;\n    }(AbstractObserver);\n    /*\n  * The slice() method returns a shallow copy of a portion of an Observable into a new Observable object.\n  * Unlike the array version, this does not support negative numbers for being or end.\n  * @param {Number} [begin] Zero-based index at which to begin extraction. If omitted, this will default to zero.\n  * @param {Number} [end] Zero-based index at which to end extraction. slice extracts up to but not including end.\n  * If omitted, this will emit the rest of the Observable object.\n  * @returns {Observable} A shallow copy of a portion of an Observable into a new Observable object.\n  */ observableProto.slice = function(begin, end) {\n        var start = begin || 0;\n        if (start < 0) {\n            throw new Rx.ArgumentOutOfRangeError();\n        }\n        if (typeof end === \"number\" && end < start) {\n            throw new Rx.ArgumentOutOfRangeError();\n        }\n        return new SliceObservable(this, start, end);\n    };\n    var LastIndexOfObservable = function(__super__) {\n        inherits(LastIndexOfObservable, __super__);\n        function LastIndexOfObservable(source, e, n) {\n            this.source = source;\n            this._e = e;\n            this._n = n;\n            __super__.call(this);\n        }\n        LastIndexOfObservable.prototype.subscribeCore = function(o) {\n            if (this._n < 0) {\n                o.onNext(-1);\n                o.onCompleted();\n                return disposableEmpty;\n            }\n            return this.source.subscribe(new LastIndexOfObserver(o, this._e, this._n));\n        };\n        return LastIndexOfObservable;\n    }(ObservableBase);\n    var LastIndexOfObserver = function(__super__) {\n        inherits(LastIndexOfObserver, __super__);\n        function LastIndexOfObserver(o, e, n) {\n            this._o = o;\n            this._e = e;\n            this._n = n;\n            this._v = 0;\n            this._hv = false;\n            this._i = 0;\n            __super__.call(this);\n        }\n        LastIndexOfObserver.prototype.next = function(x) {\n            if (this._i >= this._n && x === this._e) {\n                this._hv = true;\n                this._v = this._i;\n            }\n            this._i++;\n        };\n        LastIndexOfObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        LastIndexOfObserver.prototype.completed = function() {\n            if (this._hv) {\n                this._o.onNext(this._v);\n            } else {\n                this._o.onNext(-1);\n            }\n            this._o.onCompleted();\n        };\n        return LastIndexOfObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the last index at which a given element can be found in the observable sequence, or -1 if it is not present.\n   * @param {Any} searchElement Element to locate in the array.\n   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.\n   * @returns {Observable} And observable sequence containing the last index at which a given element can be found in the observable sequence, or -1 if it is not present.\n   */ observableProto.lastIndexOf = function(searchElement, fromIndex) {\n        var n = +fromIndex || 0;\n        Math.abs(n) === Infinity && (n = 0);\n        return new LastIndexOfObservable(this, searchElement, n);\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.aggregates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.async.js":
/*!******************************************!*\
  !*** ./node_modules/rx/dist/rx.async.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx.binding */ \"(ssr)/./node_modules/rx/dist/rx.binding.js\"),\n            exports\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            root.Rx = factory(root, exports1, Rx);\n            return root.Rx;\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Aliases\n    var Observable = Rx.Observable, observableFromPromise = Observable.fromPromise, observableThrow = Observable.throwError, AnonymousObservable = Rx.AnonymousObservable, ObservableBase = Rx.ObservableBase, AsyncSubject = Rx.AsyncSubject, disposableCreate = Rx.Disposable.create, CompositeDisposable = Rx.CompositeDisposable, immediateScheduler = Rx.Scheduler.immediate, defaultScheduler = Rx.Scheduler[\"default\"], inherits = Rx.internals.inherits, isScheduler = Rx.Scheduler.isScheduler, isPromise = Rx.helpers.isPromise, isFunction = Rx.helpers.isFunction, isIterable = Rx.helpers.isIterable, isArrayLike = Rx.helpers.isArrayLike;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    Observable.wrap = function(fn) {\n        function createObservable() {\n            return Observable.spawn.call(this, fn.apply(this, arguments));\n        }\n        createObservable.__generatorFunction__ = fn;\n        return createObservable;\n    };\n    var spawn = Observable.spawn = function() {\n        var gen = arguments[0], self1 = this, args = [];\n        for(var i = 1, len = arguments.length; i < len; i++){\n            args.push(arguments[i]);\n        }\n        return new AnonymousObservable(function(o) {\n            var g = new CompositeDisposable();\n            if (isFunction(gen)) {\n                gen = gen.apply(self1, args);\n            }\n            if (!gen || !isFunction(gen.next)) {\n                o.onNext(gen);\n                return o.onCompleted();\n            }\n            function processGenerator(res) {\n                var ret = tryCatch(gen.next).call(gen, res);\n                if (ret === errorObj) {\n                    return o.onError(ret.e);\n                }\n                next(ret);\n            }\n            processGenerator();\n            function onError(err) {\n                var ret = tryCatch(gen.next).call(gen, err);\n                if (ret === errorObj) {\n                    return o.onError(ret.e);\n                }\n                next(ret);\n            }\n            function next(ret) {\n                if (ret.done) {\n                    o.onNext(ret.value);\n                    o.onCompleted();\n                    return;\n                }\n                var obs = toObservable.call(self1, ret.value);\n                var value = null;\n                var hasValue = false;\n                if (Observable.isObservable(obs)) {\n                    g.add(obs.subscribe(function(val) {\n                        hasValue = true;\n                        value = val;\n                    }, onError, function() {\n                        hasValue && processGenerator(value);\n                    }));\n                } else {\n                    onError(new TypeError(\"type not supported\"));\n                }\n            }\n            return g;\n        });\n    };\n    function toObservable(obj) {\n        if (!obj) {\n            return obj;\n        }\n        if (Observable.isObservable(obj)) {\n            return obj;\n        }\n        if (isPromise(obj)) {\n            return Observable.fromPromise(obj);\n        }\n        if (isGeneratorFunction(obj) || isGenerator(obj)) {\n            return spawn.call(this, obj);\n        }\n        if (isFunction(obj)) {\n            return thunkToObservable.call(this, obj);\n        }\n        if (isArrayLike(obj) || isIterable(obj)) {\n            return arrayToObservable.call(this, obj);\n        }\n        if (isObject(obj)) {\n            return objectToObservable.call(this, obj);\n        }\n        return obj;\n    }\n    function arrayToObservable(obj) {\n        return Observable.from(obj).concatMap(function(o) {\n            if (Observable.isObservable(o) || isObject(o)) {\n                return toObservable.call(null, o);\n            } else {\n                return Rx.Observable.just(o);\n            }\n        }).toArray();\n    }\n    function objectToObservable(obj) {\n        var results = new obj.constructor(), keys = Object.keys(obj), observables = [];\n        for(var i = 0, len = keys.length; i < len; i++){\n            var key = keys[i];\n            var observable = toObservable.call(this, obj[key]);\n            if (observable && Observable.isObservable(observable)) {\n                defer(observable, key);\n            } else {\n                results[key] = obj[key];\n            }\n        }\n        return Observable.forkJoin.apply(Observable, observables).map(function() {\n            return results;\n        });\n        function defer(observable, key) {\n            results[key] = undefined;\n            observables.push(observable.map(function(next) {\n                results[key] = next;\n            }));\n        }\n    }\n    function thunkToObservable(fn) {\n        var self1 = this;\n        return new AnonymousObservable(function(o) {\n            fn.call(self1, function() {\n                var err = arguments[0], res = arguments[1];\n                if (err) {\n                    return o.onError(err);\n                }\n                if (arguments.length > 2) {\n                    var args = [];\n                    for(var i = 1, len = arguments.length; i < len; i++){\n                        args.push(arguments[i]);\n                    }\n                    res = args;\n                }\n                o.onNext(res);\n                o.onCompleted();\n            });\n        });\n    }\n    function isGenerator(obj) {\n        return isFunction(obj.next) && isFunction(obj[\"throw\"]);\n    }\n    function isGeneratorFunction(obj) {\n        var ctor = obj.constructor;\n        if (!ctor) {\n            return false;\n        }\n        if (ctor.name === \"GeneratorFunction\" || ctor.displayName === \"GeneratorFunction\") {\n            return true;\n        }\n        return isGenerator(ctor.prototype);\n    }\n    function isObject(val) {\n        return Object == val.constructor;\n    }\n    /**\n   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.\n   *\n   * @example\n   * var res = Rx.Observable.start(function () { console.log('hello'); });\n   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);\n   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);\n   *\n   * @param {Function} func Function to run asynchronously.\n   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.\n   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.\n   *\n   * Remarks\n   * * The function is called immediately, not during the subscription of the resulting sequence.\n   * * Multiple subscriptions to the resulting sequence can observe the function's result.\n   */ Observable.start = function(func, context, scheduler) {\n        return observableToAsync(func, context, scheduler)();\n    };\n    /**\n   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.\n   * @param {Function} function Function to convert to an asynchronous function.\n   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.\n   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n   * @returns {Function} Asynchronous function.\n   */ var observableToAsync = Observable.toAsync = function(func, context, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return function() {\n            var args = arguments, subject = new AsyncSubject();\n            scheduler.schedule(null, function() {\n                var result;\n                try {\n                    result = func.apply(context, args);\n                } catch (e) {\n                    subject.onError(e);\n                    return;\n                }\n                subject.onNext(result);\n                subject.onCompleted();\n            });\n            return subject.asObservable();\n        };\n    };\n    function createCbObservable(fn, ctx, selector, args) {\n        var o = new AsyncSubject();\n        args.push(createCbHandler(o, ctx, selector));\n        fn.apply(ctx, args);\n        return o.asObservable();\n    }\n    function createCbHandler(o, ctx, selector) {\n        return function handler() {\n            var len = arguments.length, results = new Array(len);\n            for(var i = 0; i < len; i++){\n                results[i] = arguments[i];\n            }\n            if (isFunction(selector)) {\n                results = tryCatch(selector).apply(ctx, results);\n                if (results === errorObj) {\n                    return o.onError(results.e);\n                }\n                o.onNext(results);\n            } else {\n                if (results.length <= 1) {\n                    o.onNext(results[0]);\n                } else {\n                    o.onNext(results);\n                }\n            }\n            o.onCompleted();\n        };\n    }\n    /**\n * Converts a callback function to an observable sequence.\n *\n * @param {Function} fn Function with a callback as the last parameter to convert to an Observable sequence.\n * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.\n * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.\n */ Observable.fromCallback = function(fn, ctx, selector) {\n        return function() {\n            typeof ctx === \"undefined\" && (ctx = this);\n            var len = arguments.length, args = new Array(len);\n            for(var i = 0; i < len; i++){\n                args[i] = arguments[i];\n            }\n            return createCbObservable(fn, ctx, selector, args);\n        };\n    };\n    function createNodeObservable(fn, ctx, selector, args) {\n        var o = new AsyncSubject();\n        args.push(createNodeHandler(o, ctx, selector));\n        fn.apply(ctx, args);\n        return o.asObservable();\n    }\n    function createNodeHandler(o, ctx, selector) {\n        return function handler() {\n            var err = arguments[0];\n            if (err) {\n                return o.onError(err);\n            }\n            var len = arguments.length, results = [];\n            for(var i = 1; i < len; i++){\n                results[i - 1] = arguments[i];\n            }\n            if (isFunction(selector)) {\n                var results = tryCatch(selector).apply(ctx, results);\n                if (results === errorObj) {\n                    return o.onError(results.e);\n                }\n                o.onNext(results);\n            } else {\n                if (results.length <= 1) {\n                    o.onNext(results[0]);\n                } else {\n                    o.onNext(results);\n                }\n            }\n            o.onCompleted();\n        };\n    }\n    /**\n * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.\n * @param {Function} fn The function to call\n * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.\n * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.\n * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.\n */ Observable.fromNodeCallback = function(fn, ctx, selector) {\n        return function() {\n            typeof ctx === \"undefined\" && (ctx = this);\n            var len = arguments.length, args = new Array(len);\n            for(var i = 0; i < len; i++){\n                args[i] = arguments[i];\n            }\n            return createNodeObservable(fn, ctx, selector, args);\n        };\n    };\n    function isNodeList(el) {\n        if (root.StaticNodeList) {\n            // IE8 Specific\n            // instanceof is slower than Object#toString, but Object#toString will not work as intended in IE8\n            return el instanceof root.StaticNodeList || el instanceof root.NodeList;\n        } else {\n            return Object.prototype.toString.call(el) === \"[object NodeList]\";\n        }\n    }\n    function ListenDisposable(e, n, fn) {\n        this._e = e;\n        this._n = n;\n        this._fn = fn;\n        this._e.addEventListener(this._n, this._fn, false);\n        this.isDisposed = false;\n    }\n    ListenDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this._e.removeEventListener(this._n, this._fn, false);\n            this.isDisposed = true;\n        }\n    };\n    function createEventListener(el, eventName, handler) {\n        var disposables = new CompositeDisposable();\n        // Asume NodeList or HTMLCollection\n        var elemToString = Object.prototype.toString.call(el);\n        if (isNodeList(el) || elemToString === \"[object HTMLCollection]\") {\n            for(var i = 0, len = el.length; i < len; i++){\n                disposables.add(createEventListener(el.item(i), eventName, handler));\n            }\n        } else if (el) {\n            disposables.add(new ListenDisposable(el, eventName, handler));\n        }\n        return disposables;\n    }\n    /**\n   * Configuration option to determine whether to use native events only\n   */ Rx.config.useNativeEvents = false;\n    var EventObservable = function(__super__) {\n        inherits(EventObservable, __super__);\n        function EventObservable(el, name, fn) {\n            this._el = el;\n            this._n = name;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        function createHandler(o, fn) {\n            return function handler() {\n                var results = arguments[0];\n                if (isFunction(fn)) {\n                    results = tryCatch(fn).apply(null, arguments);\n                    if (results === errorObj) {\n                        return o.onError(results.e);\n                    }\n                }\n                o.onNext(results);\n            };\n        }\n        EventObservable.prototype.subscribeCore = function(o) {\n            return createEventListener(this._el, this._n, createHandler(o, this._fn));\n        };\n        return EventObservable;\n    }(ObservableBase);\n    /**\n   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.\n   * @param {Object} element The DOMElement or NodeList to attach a listener.\n   * @param {String} eventName The event name to attach the observable sequence.\n   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.\n   * @returns {Observable} An observable sequence of events from the specified element and the specified event.\n   */ Observable.fromEvent = function(element, eventName, selector) {\n        // Node.js specific\n        if (element.addListener) {\n            return fromEventPattern(function(h) {\n                element.addListener(eventName, h);\n            }, function(h) {\n                element.removeListener(eventName, h);\n            }, selector);\n        }\n        // Use only if non-native events are allowed\n        if (!Rx.config.useNativeEvents) {\n            // Handles jq, Angular.js, Zepto, Marionette, Ember.js\n            if (typeof element.on === \"function\" && typeof element.off === \"function\") {\n                return fromEventPattern(function(h) {\n                    element.on(eventName, h);\n                }, function(h) {\n                    element.off(eventName, h);\n                }, selector);\n            }\n        }\n        return new EventObservable(element, eventName, selector).publish().refCount();\n    };\n    var EventPatternObservable = function(__super__) {\n        inherits(EventPatternObservable, __super__);\n        function EventPatternObservable(add, del, fn) {\n            this._add = add;\n            this._del = del;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        function createHandler(o, fn) {\n            return function handler() {\n                var results = arguments[0];\n                if (isFunction(fn)) {\n                    results = tryCatch(fn).apply(null, arguments);\n                    if (results === errorObj) {\n                        return o.onError(results.e);\n                    }\n                }\n                o.onNext(results);\n            };\n        }\n        EventPatternObservable.prototype.subscribeCore = function(o) {\n            var fn = createHandler(o, this._fn);\n            var returnValue = this._add(fn);\n            return new EventPatternDisposable(this._del, fn, returnValue);\n        };\n        function EventPatternDisposable(del, fn, ret) {\n            this._del = del;\n            this._fn = fn;\n            this._ret = ret;\n            this.isDisposed = false;\n        }\n        EventPatternDisposable.prototype.dispose = function() {\n            if (!this.isDisposed) {\n                isFunction(this._del) && this._del(this._fn, this._ret);\n                this.isDisposed = true;\n            }\n        };\n        return EventPatternObservable;\n    }(ObservableBase);\n    /**\n   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.\n   * @param {Function} addHandler The function to add a handler to the emitter.\n   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.\n   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.\n   * @returns {Observable} An observable sequence which wraps an event from an event emitter\n   */ var fromEventPattern = Observable.fromEventPattern = function(addHandler, removeHandler, selector) {\n        return new EventPatternObservable(addHandler, removeHandler, selector).publish().refCount();\n    };\n    /**\n   * Invokes the asynchronous function, surfacing the result through an observable sequence.\n   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.\n   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.\n   */ Observable.startAsync = function(functionAsync) {\n        var promise = tryCatch(functionAsync)();\n        if (promise === errorObj) {\n            return observableThrow(promise.e);\n        }\n        return observableFromPromise(promise);\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.backpressure.js":
/*!*************************************************!*\
  !*** ./node_modules/rx/dist/rx.backpressure.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // References\n    var Observable = Rx.Observable, observableProto = Observable.prototype, AnonymousObservable = Rx.AnonymousObservable, AbstractObserver = Rx.internals.AbstractObserver, CompositeDisposable = Rx.CompositeDisposable, BinaryDisposable = Rx.BinaryDisposable, NAryDisposable = Rx.NAryDisposable, Notification = Rx.Notification, Subject = Rx.Subject, Observer = Rx.Observer, disposableEmpty = Rx.Disposable.empty, disposableCreate = Rx.Disposable.create, inherits = Rx.internals.inherits, addProperties = Rx.internals.addProperties, defaultScheduler = Rx.Scheduler[\"default\"], currentThreadScheduler = Rx.Scheduler.currentThread, identity = Rx.helpers.identity, isScheduler = Rx.Scheduler.isScheduler, isFunction = Rx.helpers.isFunction, checkDisposed = Rx.Disposable.checkDisposed;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    /**\n  * Used to pause and resume streams.\n  */ Rx.Pauser = function(__super__) {\n        inherits(Pauser, __super__);\n        function Pauser() {\n            __super__.call(this);\n        }\n        /**\n     * Pauses the underlying sequence.\n     */ Pauser.prototype.pause = function() {\n            this.onNext(false);\n        };\n        /**\n    * Resumes the underlying sequence.\n    */ Pauser.prototype.resume = function() {\n            this.onNext(true);\n        };\n        return Pauser;\n    }(Subject);\n    var PausableObservable = function(__super__) {\n        inherits(PausableObservable, __super__);\n        function PausableObservable(source, pauser) {\n            this.source = source;\n            this.controller = new Subject();\n            this.paused = true;\n            if (pauser && pauser.subscribe) {\n                this.pauser = this.controller.merge(pauser);\n            } else {\n                this.pauser = this.controller;\n            }\n            __super__.call(this);\n        }\n        PausableObservable.prototype._subscribe = function(o) {\n            var conn = this.source.publish(), subscription = conn.subscribe(o), connection = disposableEmpty;\n            var pausable = this.pauser.startWith(!this.paused).distinctUntilChanged().subscribe(function(b) {\n                if (b) {\n                    connection = conn.connect();\n                } else {\n                    connection.dispose();\n                    connection = disposableEmpty;\n                }\n            });\n            return new NAryDisposable([\n                subscription,\n                connection,\n                pausable\n            ]);\n        };\n        PausableObservable.prototype.pause = function() {\n            this.paused = true;\n            this.controller.onNext(false);\n        };\n        PausableObservable.prototype.resume = function() {\n            this.paused = false;\n            this.controller.onNext(true);\n        };\n        return PausableObservable;\n    }(Observable);\n    /**\n   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.\n   * @example\n   * var pauser = new Rx.Subject();\n   * var source = Rx.Observable.interval(100).pausable(pauser);\n   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.\n   * @returns {Observable} The observable sequence which is paused based upon the pauser.\n   */ observableProto.pausable = function(pauser) {\n        return new PausableObservable(this, pauser);\n    };\n    function combineLatestSource(source, subject, resultSelector) {\n        return new AnonymousObservable(function(o) {\n            var hasValue = [\n                false,\n                false\n            ], hasValueAll = false, isDone = false, values = new Array(2), err;\n            function next(x, i) {\n                values[i] = x;\n                hasValue[i] = true;\n                if (hasValueAll || (hasValueAll = hasValue.every(identity))) {\n                    if (err) {\n                        return o.onError(err);\n                    }\n                    var res = tryCatch(resultSelector).apply(null, values);\n                    if (res === errorObj) {\n                        return o.onError(res.e);\n                    }\n                    o.onNext(res);\n                }\n                isDone && values[1] && o.onCompleted();\n            }\n            return new BinaryDisposable(source.subscribe(function(x) {\n                next(x, 0);\n            }, function(e) {\n                if (values[1]) {\n                    o.onError(e);\n                } else {\n                    err = e;\n                }\n            }, function() {\n                isDone = true;\n                values[1] && o.onCompleted();\n            }), subject.subscribe(function(x) {\n                next(x, 1);\n            }, function(e) {\n                o.onError(e);\n            }, function() {\n                isDone = true;\n                next(true, 1);\n            }));\n        }, source);\n    }\n    var PausableBufferedObservable = function(__super__) {\n        inherits(PausableBufferedObservable, __super__);\n        function PausableBufferedObservable(source, pauser) {\n            this.source = source;\n            this.controller = new Subject();\n            this.paused = true;\n            if (pauser && pauser.subscribe) {\n                this.pauser = this.controller.merge(pauser);\n            } else {\n                this.pauser = this.controller;\n            }\n            __super__.call(this);\n        }\n        PausableBufferedObservable.prototype._subscribe = function(o) {\n            var q = [], previousShouldFire;\n            function drainQueue() {\n                while(q.length > 0){\n                    o.onNext(q.shift());\n                }\n            }\n            var subscription = combineLatestSource(this.source, this.pauser.startWith(!this.paused).distinctUntilChanged(), function(data, shouldFire) {\n                return {\n                    data: data,\n                    shouldFire: shouldFire\n                };\n            }).subscribe(function(results) {\n                if (previousShouldFire !== undefined && results.shouldFire !== previousShouldFire) {\n                    previousShouldFire = results.shouldFire;\n                    // change in shouldFire\n                    if (results.shouldFire) {\n                        drainQueue();\n                    }\n                } else {\n                    previousShouldFire = results.shouldFire;\n                    // new data\n                    if (results.shouldFire) {\n                        o.onNext(results.data);\n                    } else {\n                        q.push(results.data);\n                    }\n                }\n            }, function(err) {\n                drainQueue();\n                o.onError(err);\n            }, function() {\n                drainQueue();\n                o.onCompleted();\n            });\n            return subscription;\n        };\n        PausableBufferedObservable.prototype.pause = function() {\n            this.paused = true;\n            this.controller.onNext(false);\n        };\n        PausableBufferedObservable.prototype.resume = function() {\n            this.paused = false;\n            this.controller.onNext(true);\n        };\n        return PausableBufferedObservable;\n    }(Observable);\n    /**\n   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,\n   * and yields the values that were buffered while paused.\n   * @example\n   * var pauser = new Rx.Subject();\n   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);\n   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.\n   * @returns {Observable} The observable sequence which is paused based upon the pauser.\n   */ observableProto.pausableBuffered = function(pauser) {\n        return new PausableBufferedObservable(this, pauser);\n    };\n    var ControlledObservable = function(__super__) {\n        inherits(ControlledObservable, __super__);\n        function ControlledObservable(source, enableQueue, scheduler) {\n            __super__.call(this);\n            this.subject = new ControlledSubject(enableQueue, scheduler);\n            this.source = source.multicast(this.subject).refCount();\n        }\n        ControlledObservable.prototype._subscribe = function(o) {\n            return this.source.subscribe(o);\n        };\n        ControlledObservable.prototype.request = function(numberOfItems) {\n            return this.subject.request(numberOfItems == null ? -1 : numberOfItems);\n        };\n        return ControlledObservable;\n    }(Observable);\n    var ControlledSubject = function(__super__) {\n        inherits(ControlledSubject, __super__);\n        function ControlledSubject(enableQueue, scheduler) {\n            enableQueue == null && (enableQueue = true);\n            __super__.call(this);\n            this.subject = new Subject();\n            this.enableQueue = enableQueue;\n            this.queue = enableQueue ? [] : null;\n            this.requestedCount = 0;\n            this.requestedDisposable = null;\n            this.error = null;\n            this.hasFailed = false;\n            this.hasCompleted = false;\n            this.scheduler = scheduler || currentThreadScheduler;\n        }\n        addProperties(ControlledSubject.prototype, Observer, {\n            _subscribe: function(o) {\n                return this.subject.subscribe(o);\n            },\n            onCompleted: function() {\n                this.hasCompleted = true;\n                if (!this.enableQueue || this.queue.length === 0) {\n                    this.subject.onCompleted();\n                    this.disposeCurrentRequest();\n                } else {\n                    this.queue.push(Notification.createOnCompleted());\n                }\n            },\n            onError: function(error) {\n                this.hasFailed = true;\n                this.error = error;\n                if (!this.enableQueue || this.queue.length === 0) {\n                    this.subject.onError(error);\n                    this.disposeCurrentRequest();\n                } else {\n                    this.queue.push(Notification.createOnError(error));\n                }\n            },\n            onNext: function(value) {\n                if (this.requestedCount <= 0) {\n                    this.enableQueue && this.queue.push(Notification.createOnNext(value));\n                } else {\n                    this.requestedCount-- === 0 && this.disposeCurrentRequest();\n                    this.subject.onNext(value);\n                }\n            },\n            _processRequest: function(numberOfItems) {\n                if (this.enableQueue) {\n                    while(this.queue.length > 0 && (numberOfItems > 0 || this.queue[0].kind !== \"N\")){\n                        var first = this.queue.shift();\n                        first.accept(this.subject);\n                        if (first.kind === \"N\") {\n                            numberOfItems--;\n                        } else {\n                            this.disposeCurrentRequest();\n                            this.queue = [];\n                        }\n                    }\n                }\n                return numberOfItems;\n            },\n            request: function(number) {\n                this.disposeCurrentRequest();\n                var self1 = this;\n                this.requestedDisposable = this.scheduler.schedule(number, function(s, i) {\n                    var remaining = self1._processRequest(i);\n                    var stopped = self1.hasCompleted || self1.hasFailed;\n                    if (!stopped && remaining > 0) {\n                        self1.requestedCount = remaining;\n                        return disposableCreate(function() {\n                            self1.requestedCount = 0;\n                        });\n                    // Scheduled item is still in progress. Return a new\n                    // disposable to allow the request to be interrupted\n                    // via dispose.\n                    }\n                });\n                return this.requestedDisposable;\n            },\n            disposeCurrentRequest: function() {\n                if (this.requestedDisposable) {\n                    this.requestedDisposable.dispose();\n                    this.requestedDisposable = null;\n                }\n            }\n        });\n        return ControlledSubject;\n    }(Observable);\n    /**\n   * Attaches a controller to the observable sequence with the ability to queue.\n   * @example\n   * var source = Rx.Observable.interval(100).controlled();\n   * source.request(3); // Reads 3 values\n   * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request\n   * @param {Scheduler} scheduler determines how the requests will be scheduled\n   * @returns {Observable} The observable sequence which only propagates values on request.\n   */ observableProto.controlled = function(enableQueue, scheduler) {\n        if (enableQueue && isScheduler(enableQueue)) {\n            scheduler = enableQueue;\n            enableQueue = true;\n        }\n        if (enableQueue == null) {\n            enableQueue = true;\n        }\n        return new ControlledObservable(this, enableQueue, scheduler);\n    };\n    var StopAndWaitObservable = function(__super__) {\n        inherits(StopAndWaitObservable, __super__);\n        function StopAndWaitObservable(source) {\n            __super__.call(this);\n            this.source = source;\n        }\n        function scheduleMethod(s, self1) {\n            return self1.source.request(1);\n        }\n        StopAndWaitObservable.prototype._subscribe = function(o) {\n            this.subscription = this.source.subscribe(new StopAndWaitObserver(o, this, this.subscription));\n            return new BinaryDisposable(this.subscription, defaultScheduler.schedule(this, scheduleMethod));\n        };\n        var StopAndWaitObserver = function(__sub__) {\n            inherits(StopAndWaitObserver, __sub__);\n            function StopAndWaitObserver(observer, observable, cancel) {\n                __sub__.call(this);\n                this.observer = observer;\n                this.observable = observable;\n                this.cancel = cancel;\n                this.scheduleDisposable = null;\n            }\n            StopAndWaitObserver.prototype.completed = function() {\n                this.observer.onCompleted();\n                this.dispose();\n            };\n            StopAndWaitObserver.prototype.error = function(error) {\n                this.observer.onError(error);\n                this.dispose();\n            };\n            function innerScheduleMethod(s, self1) {\n                return self1.observable.source.request(1);\n            }\n            StopAndWaitObserver.prototype.next = function(value) {\n                this.observer.onNext(value);\n                this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod);\n            };\n            StopAndWaitObserver.dispose = function() {\n                this.observer = null;\n                if (this.cancel) {\n                    this.cancel.dispose();\n                    this.cancel = null;\n                }\n                if (this.scheduleDisposable) {\n                    this.scheduleDisposable.dispose();\n                    this.scheduleDisposable = null;\n                }\n                __sub__.prototype.dispose.call(this);\n            };\n            return StopAndWaitObserver;\n        }(AbstractObserver);\n        return StopAndWaitObservable;\n    }(Observable);\n    /**\n   * Attaches a stop and wait observable to the current observable.\n   * @returns {Observable} A stop and wait observable.\n   */ ControlledObservable.prototype.stopAndWait = function() {\n        return new StopAndWaitObservable(this);\n    };\n    var WindowedObservable = function(__super__) {\n        inherits(WindowedObservable, __super__);\n        function WindowedObservable(source, windowSize) {\n            __super__.call(this);\n            this.source = source;\n            this.windowSize = windowSize;\n        }\n        function scheduleMethod(s, self1) {\n            return self1.source.request(self1.windowSize);\n        }\n        WindowedObservable.prototype._subscribe = function(o) {\n            this.subscription = this.source.subscribe(new WindowedObserver(o, this, this.subscription));\n            return new BinaryDisposable(this.subscription, defaultScheduler.schedule(this, scheduleMethod));\n        };\n        var WindowedObserver = function(__sub__) {\n            inherits(WindowedObserver, __sub__);\n            function WindowedObserver(observer, observable, cancel) {\n                this.observer = observer;\n                this.observable = observable;\n                this.cancel = cancel;\n                this.received = 0;\n                this.scheduleDisposable = null;\n                __sub__.call(this);\n            }\n            WindowedObserver.prototype.completed = function() {\n                this.observer.onCompleted();\n                this.dispose();\n            };\n            WindowedObserver.prototype.error = function(error) {\n                this.observer.onError(error);\n                this.dispose();\n            };\n            function innerScheduleMethod(s, self1) {\n                return self1.observable.source.request(self1.observable.windowSize);\n            }\n            WindowedObserver.prototype.next = function(value) {\n                this.observer.onNext(value);\n                this.received = ++this.received % this.observable.windowSize;\n                this.received === 0 && (this.scheduleDisposable = defaultScheduler.schedule(this, innerScheduleMethod));\n            };\n            WindowedObserver.prototype.dispose = function() {\n                this.observer = null;\n                if (this.cancel) {\n                    this.cancel.dispose();\n                    this.cancel = null;\n                }\n                if (this.scheduleDisposable) {\n                    this.scheduleDisposable.dispose();\n                    this.scheduleDisposable = null;\n                }\n                __sub__.prototype.dispose.call(this);\n            };\n            return WindowedObserver;\n        }(AbstractObserver);\n        return WindowedObservable;\n    }(Observable);\n    /**\n   * Creates a sliding windowed observable based upon the window size.\n   * @param {Number} windowSize The number of items in the window\n   * @returns {Observable} A windowed observable based upon the window size.\n   */ ControlledObservable.prototype.windowed = function(windowSize) {\n        return new WindowedObservable(this, windowSize);\n    };\n    /**\n   * Pipes the existing Observable sequence into a Node.js Stream.\n   * @param {Stream} dest The destination Node.js stream.\n   * @returns {Stream} The destination stream.\n   */ observableProto.pipe = function(dest) {\n        var source = this.pausableBuffered();\n        function onDrain() {\n            source.resume();\n        }\n        dest.addListener(\"drain\", onDrain);\n        source.subscribe(function(x) {\n            !dest.write(x) && source.pause();\n        }, function(err) {\n            dest.emit(\"error\", err);\n        }, function() {\n            // Hack check because STDIO is not closable\n            !dest._isStdio && dest.end();\n            dest.removeListener(\"drain\", onDrain);\n        });\n        source.resume();\n        return dest;\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.backpressure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.binding.js":
/*!********************************************!*\
  !*** ./node_modules/rx/dist/rx.binding.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    var Observable = Rx.Observable, observableProto = Observable.prototype, AnonymousObservable = Rx.AnonymousObservable, ObservableBase = Rx.ObservableBase, Subject = Rx.Subject, AsyncSubject = Rx.AsyncSubject, Observer = Rx.Observer, ScheduledObserver = Rx.internals.ScheduledObserver, disposableCreate = Rx.Disposable.create, disposableEmpty = Rx.Disposable.empty, BinaryDisposable = Rx.BinaryDisposable, currentThreadScheduler = Rx.Scheduler.currentThread, isFunction = Rx.helpers.isFunction, inherits = Rx.internals.inherits, addProperties = Rx.internals.addProperties, checkDisposed = Rx.Disposable.checkDisposed;\n    // Utilities\n    function cloneArray(arr) {\n        var len = arr.length, a = new Array(len);\n        for(var i = 0; i < len; i++){\n            a[i] = arr[i];\n        }\n        return a;\n    }\n    var MulticastObservable = function(__super__) {\n        inherits(MulticastObservable, __super__);\n        function MulticastObservable(source, fn1, fn2) {\n            this.source = source;\n            this._fn1 = fn1;\n            this._fn2 = fn2;\n            __super__.call(this);\n        }\n        MulticastObservable.prototype.subscribeCore = function(o) {\n            var connectable = this.source.multicast(this._fn1());\n            return new BinaryDisposable(this._fn2(connectable).subscribe(o), connectable.connect());\n        };\n        return MulticastObservable;\n    }(ObservableBase);\n    /**\n   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each\n   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's\n   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.\n   *\n   * @example\n   * 1 - res = source.multicast(observable);\n   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });\n   *\n   * @param {Function|Subject} subjectOrSubjectSelector\n   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.\n   * Or:\n   * Subject to push source elements into.\n   *\n   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name=\"subjectOrSubjectSelector\" is a factory function.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.multicast = function(subjectOrSubjectSelector, selector) {\n        return isFunction(subjectOrSubjectSelector) ? new MulticastObservable(this, subjectOrSubjectSelector, selector) : new ConnectableObservable(this, subjectOrSubjectSelector);\n    };\n    /**\n   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.\n   * This operator is a specialization of Multicast using a regular Subject.\n   *\n   * @example\n   * var resres = source.publish();\n   * var res = source.publish(function (x) { return x; });\n   *\n   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.publish = function(selector) {\n        return selector && isFunction(selector) ? this.multicast(function() {\n            return new Subject();\n        }, selector) : this.multicast(new Subject());\n    };\n    /**\n   * Returns an observable sequence that shares a single subscription to the underlying sequence.\n   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.\n   */ observableProto.share = function() {\n        return this.publish().refCount();\n    };\n    /**\n   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.\n   * This operator is a specialization of Multicast using a AsyncSubject.\n   *\n   * @example\n   * var res = source.publishLast();\n   * var res = source.publishLast(function (x) { return x; });\n   *\n   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.publishLast = function(selector) {\n        return selector && isFunction(selector) ? this.multicast(function() {\n            return new AsyncSubject();\n        }, selector) : this.multicast(new AsyncSubject());\n    };\n    /**\n   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.\n   * This operator is a specialization of Multicast using a BehaviorSubject.\n   *\n   * @example\n   * var res = source.publishValue(42);\n   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);\n   *\n   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.\n   * @param {Mixed} initialValue Initial value received by observers upon subscription.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.publishValue = function(initialValueOrSelector, initialValue) {\n        return arguments.length === 2 ? this.multicast(function() {\n            return new BehaviorSubject(initialValue);\n        }, initialValueOrSelector) : this.multicast(new BehaviorSubject(initialValueOrSelector));\n    };\n    /**\n   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.\n   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n   * @param {Mixed} initialValue Initial value received by observers upon subscription.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.\n   */ observableProto.shareValue = function(initialValue) {\n        return this.publishValue(initialValue).refCount();\n    };\n    /**\n   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.\n   * This operator is a specialization of Multicast using a ReplaySubject.\n   *\n   * @example\n   * var res = source.replay(null, 3);\n   * var res = source.replay(null, 3, 500);\n   * var res = source.replay(null, 3, 500, scheduler);\n   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);\n   *\n   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.\n   * @param bufferSize [Optional] Maximum element count of the replay buffer.\n   * @param windowSize [Optional] Maximum time length of the replay buffer.\n   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.replay = function(selector, bufferSize, windowSize, scheduler) {\n        return selector && isFunction(selector) ? this.multicast(function() {\n            return new ReplaySubject(bufferSize, windowSize, scheduler);\n        }, selector) : this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));\n    };\n    /**\n   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.\n   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.\n   *\n   * @example\n   * var res = source.shareReplay(3);\n   * var res = source.shareReplay(3, 500);\n   * var res = source.shareReplay(3, 500, scheduler);\n   *\n\n   * @param bufferSize [Optional] Maximum element count of the replay buffer.\n   * @param window [Optional] Maximum time length of the replay buffer.\n   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.\n   */ observableProto.shareReplay = function(bufferSize, windowSize, scheduler) {\n        return this.replay(null, bufferSize, windowSize, scheduler).refCount();\n    };\n    var InnerSubscription = function(s, o) {\n        this._s = s;\n        this._o = o;\n    };\n    InnerSubscription.prototype.dispose = function() {\n        if (!this._s.isDisposed && this._o !== null) {\n            var idx = this._s.observers.indexOf(this._o);\n            this._s.observers.splice(idx, 1);\n            this._o = null;\n        }\n    };\n    /**\n   *  Represents a value that changes over time.\n   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.\n   */ var BehaviorSubject = Rx.BehaviorSubject = function(__super__) {\n        inherits(BehaviorSubject, __super__);\n        function BehaviorSubject(value) {\n            __super__.call(this);\n            this.value = value;\n            this.observers = [];\n            this.isDisposed = false;\n            this.isStopped = false;\n            this.hasError = false;\n        }\n        addProperties(BehaviorSubject.prototype, Observer.prototype, {\n            _subscribe: function(o) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.observers.push(o);\n                    o.onNext(this.value);\n                    return new InnerSubscription(this, o);\n                }\n                if (this.hasError) {\n                    o.onError(this.error);\n                } else {\n                    o.onCompleted();\n                }\n                return disposableEmpty;\n            },\n            /**\n       * Gets the current value or throws an exception.\n       * Value is frozen after onCompleted is called.\n       * After onError is called always throws the specified exception.\n       * An exception is always thrown after dispose is called.\n       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.\n       */ getValue: function() {\n                checkDisposed(this);\n                if (this.hasError) {\n                    thrower(this.error);\n                }\n                return this.value;\n            },\n            /**\n       * Indicates whether the subject has observers subscribed to it.\n       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.\n       */ hasObservers: function() {\n                checkDisposed(this);\n                return this.observers.length > 0;\n            },\n            /**\n       * Notifies all subscribed observers about the end of the sequence.\n       */ onCompleted: function() {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.isStopped = true;\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    os[i].onCompleted();\n                }\n                this.observers.length = 0;\n            },\n            /**\n       * Notifies all subscribed observers about the exception.\n       * @param {Mixed} error The exception to send to all observers.\n       */ onError: function(error) {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.isStopped = true;\n                this.hasError = true;\n                this.error = error;\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    os[i].onError(error);\n                }\n                this.observers.length = 0;\n            },\n            /**\n       * Notifies all subscribed observers about the arrival of the specified element in the sequence.\n       * @param {Mixed} value The value to send to all observers.\n       */ onNext: function(value) {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.value = value;\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    os[i].onNext(value);\n                }\n            },\n            /**\n       * Unsubscribe all observers and release resources.\n       */ dispose: function() {\n                this.isDisposed = true;\n                this.observers = null;\n                this.value = null;\n                this.error = null;\n            }\n        });\n        return BehaviorSubject;\n    }(Observable);\n    /**\n   * Represents an object that is both an observable sequence as well as an observer.\n   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.\n   */ var ReplaySubject = Rx.ReplaySubject = function(__super__) {\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        function createRemovableDisposable(subject, observer) {\n            return disposableCreate(function() {\n                observer.dispose();\n                !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);\n            });\n        }\n        inherits(ReplaySubject, __super__);\n        /**\n     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.\n     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.\n     *  @param {Number} [windowSize] Maximum time length of the replay buffer.\n     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.\n     */ function ReplaySubject(bufferSize, windowSize, scheduler) {\n            this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;\n            this.windowSize = windowSize == null ? maxSafeInteger : windowSize;\n            this.scheduler = scheduler || currentThreadScheduler;\n            this.q = [];\n            this.observers = [];\n            this.isStopped = false;\n            this.isDisposed = false;\n            this.hasError = false;\n            this.error = null;\n            __super__.call(this);\n        }\n        addProperties(ReplaySubject.prototype, Observer.prototype, {\n            _subscribe: function(o) {\n                checkDisposed(this);\n                var so = new ScheduledObserver(this.scheduler, o), subscription = createRemovableDisposable(this, so);\n                this._trim(this.scheduler.now());\n                this.observers.push(so);\n                for(var i = 0, len = this.q.length; i < len; i++){\n                    so.onNext(this.q[i].value);\n                }\n                if (this.hasError) {\n                    so.onError(this.error);\n                } else if (this.isStopped) {\n                    so.onCompleted();\n                }\n                so.ensureActive();\n                return subscription;\n            },\n            /**\n       * Indicates whether the subject has observers subscribed to it.\n       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.\n       */ hasObservers: function() {\n                checkDisposed(this);\n                return this.observers.length > 0;\n            },\n            _trim: function(now) {\n                while(this.q.length > this.bufferSize){\n                    this.q.shift();\n                }\n                while(this.q.length > 0 && now - this.q[0].interval > this.windowSize){\n                    this.q.shift();\n                }\n            },\n            /**\n       * Notifies all subscribed observers about the arrival of the specified element in the sequence.\n       * @param {Mixed} value The value to send to all observers.\n       */ onNext: function(value) {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                var now = this.scheduler.now();\n                this.q.push({\n                    interval: now,\n                    value: value\n                });\n                this._trim(now);\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    var observer = os[i];\n                    observer.onNext(value);\n                    observer.ensureActive();\n                }\n            },\n            /**\n       * Notifies all subscribed observers about the exception.\n       * @param {Mixed} error The exception to send to all observers.\n       */ onError: function(error) {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.isStopped = true;\n                this.error = error;\n                this.hasError = true;\n                var now = this.scheduler.now();\n                this._trim(now);\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    var observer = os[i];\n                    observer.onError(error);\n                    observer.ensureActive();\n                }\n                this.observers.length = 0;\n            },\n            /**\n       * Notifies all subscribed observers about the end of the sequence.\n       */ onCompleted: function() {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.isStopped = true;\n                var now = this.scheduler.now();\n                this._trim(now);\n                for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                    var observer = os[i];\n                    observer.onCompleted();\n                    observer.ensureActive();\n                }\n                this.observers.length = 0;\n            },\n            /**\n       * Unsubscribe all observers and release resources.\n       */ dispose: function() {\n                this.isDisposed = true;\n                this.observers = null;\n            }\n        });\n        return ReplaySubject;\n    }(Observable);\n    var RefCountObservable = function(__super__) {\n        inherits(RefCountObservable, __super__);\n        function RefCountObservable(source) {\n            this.source = source;\n            this._count = 0;\n            this._connectableSubscription = null;\n            __super__.call(this);\n        }\n        RefCountObservable.prototype.subscribeCore = function(o) {\n            var subscription = this.source.subscribe(o);\n            ++this._count === 1 && (this._connectableSubscription = this.source.connect());\n            return new RefCountDisposable(this, subscription);\n        };\n        function RefCountDisposable(p, s) {\n            this._p = p;\n            this._s = s;\n            this.isDisposed = false;\n        }\n        RefCountDisposable.prototype.dispose = function() {\n            if (!this.isDisposed) {\n                this.isDisposed = true;\n                this._s.dispose();\n                --this._p._count === 0 && this._p._connectableSubscription.dispose();\n            }\n        };\n        return RefCountObservable;\n    }(ObservableBase);\n    var ConnectableObservable = Rx.ConnectableObservable = function(__super__) {\n        inherits(ConnectableObservable, __super__);\n        function ConnectableObservable(source, subject) {\n            this.source = source;\n            this._connection = null;\n            this._source = source.asObservable();\n            this._subject = subject;\n            __super__.call(this);\n        }\n        function ConnectDisposable(parent, subscription) {\n            this._p = parent;\n            this._s = subscription;\n        }\n        ConnectDisposable.prototype.dispose = function() {\n            if (this._s) {\n                this._s.dispose();\n                this._s = null;\n                this._p._connection = null;\n            }\n        };\n        ConnectableObservable.prototype.connect = function() {\n            if (!this._connection) {\n                if (this._subject.isStopped) {\n                    return disposableEmpty;\n                }\n                var subscription = this._source.subscribe(this._subject);\n                this._connection = new ConnectDisposable(this, subscription);\n            }\n            return this._connection;\n        };\n        ConnectableObservable.prototype._subscribe = function(o) {\n            return this._subject.subscribe(o);\n        };\n        ConnectableObservable.prototype.refCount = function() {\n            return new RefCountObservable(this);\n        };\n        return ConnectableObservable;\n    }(Observable);\n    /**\n   * Returns an observable sequence that shares a single subscription to the underlying sequence. This observable sequence\n   * can be resubscribed to, even if all prior subscriptions have ended. (unlike `.publish().refCount()`)\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source.\n   */ observableProto.singleInstance = function() {\n        var source = this, hasObservable = false, observable;\n        function getObservable() {\n            if (!hasObservable) {\n                hasObservable = true;\n                observable = source[\"finally\"](function() {\n                    hasObservable = false;\n                }).publish().refCount();\n            }\n            return observable;\n        }\n        return new AnonymousObservable(function(o) {\n            return getObservable().subscribe(o);\n        });\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.binding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.coincidence.js":
/*!************************************************!*\
  !*** ./node_modules/rx/dist/rx.coincidence.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    var Observable = Rx.Observable, ObservableBase = Rx.ObservableBase, AbstractObserver = Rx.internals.AbstractObserver, CompositeDisposable = Rx.CompositeDisposable, BinaryDisposable = Rx.BinaryDisposable, RefCountDisposable = Rx.RefCountDisposable, SingleAssignmentDisposable = Rx.SingleAssignmentDisposable, SerialDisposable = Rx.SerialDisposable, Subject = Rx.Subject, observableProto = Observable.prototype, observableEmpty = Observable.empty, observableNever = Observable.never, AnonymousObservable = Rx.AnonymousObservable, addRef = Rx.internals.addRef, inherits = Rx.internals.inherits, bindCallback = Rx.internals.bindCallback, noop = Rx.helpers.noop, isPromise = Rx.helpers.isPromise, isFunction = Rx.helpers.isFunction, observableFromPromise = Observable.fromPromise;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    var Map = root.Map || function() {\n        function Map() {\n            this.size = 0;\n            this._values = [];\n            this._keys = [];\n        }\n        Map.prototype[\"delete\"] = function(key) {\n            var i = this._keys.indexOf(key);\n            if (i === -1) {\n                return false;\n            }\n            this._values.splice(i, 1);\n            this._keys.splice(i, 1);\n            this.size--;\n            return true;\n        };\n        Map.prototype.get = function(key) {\n            var i = this._keys.indexOf(key);\n            return i === -1 ? undefined : this._values[i];\n        };\n        Map.prototype.set = function(key, value) {\n            var i = this._keys.indexOf(key);\n            if (i === -1) {\n                this._keys.push(key);\n                this._values.push(value);\n                this.size++;\n            } else {\n                this._values[i] = value;\n            }\n            return this;\n        };\n        Map.prototype.forEach = function(cb, thisArg) {\n            for(var i = 0; i < this.size; i++){\n                cb.call(thisArg, this._values[i], this._keys[i]);\n            }\n        };\n        return Map;\n    }();\n    /**\n   *  Correlates the elements of two sequences based on overlapping durations.\n   *\n   *  @param {Observable} right The right observable sequence to join elements for.\n   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.\n   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.\n   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.\n   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.\n   */ observableProto.join = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {\n        var left = this;\n        return new AnonymousObservable(function(o) {\n            var group = new CompositeDisposable();\n            var leftDone = false, rightDone = false;\n            var leftId = 0, rightId = 0;\n            var leftMap = new Map(), rightMap = new Map();\n            var handleError = function(e) {\n                o.onError(e);\n            };\n            group.add(left.subscribe(function(value) {\n                var id = leftId++, md = new SingleAssignmentDisposable();\n                leftMap.set(id, value);\n                group.add(md);\n                var duration = tryCatch(leftDurationSelector)(value);\n                if (duration === errorObj) {\n                    return o.onError(duration.e);\n                }\n                md.setDisposable(duration.take(1).subscribe(noop, handleError, function() {\n                    leftMap[\"delete\"](id) && leftMap.size === 0 && leftDone && o.onCompleted();\n                    group.remove(md);\n                }));\n                rightMap.forEach(function(v) {\n                    var result = tryCatch(resultSelector)(value, v);\n                    if (result === errorObj) {\n                        return o.onError(result.e);\n                    }\n                    o.onNext(result);\n                });\n            }, handleError, function() {\n                leftDone = true;\n                (rightDone || leftMap.size === 0) && o.onCompleted();\n            }));\n            group.add(right.subscribe(function(value) {\n                var id = rightId++, md = new SingleAssignmentDisposable();\n                rightMap.set(id, value);\n                group.add(md);\n                var duration = tryCatch(rightDurationSelector)(value);\n                if (duration === errorObj) {\n                    return o.onError(duration.e);\n                }\n                md.setDisposable(duration.take(1).subscribe(noop, handleError, function() {\n                    rightMap[\"delete\"](id) && rightMap.size === 0 && rightDone && o.onCompleted();\n                    group.remove(md);\n                }));\n                leftMap.forEach(function(v) {\n                    var result = tryCatch(resultSelector)(v, value);\n                    if (result === errorObj) {\n                        return o.onError(result.e);\n                    }\n                    o.onNext(result);\n                });\n            }, handleError, function() {\n                rightDone = true;\n                (leftDone || rightMap.size === 0) && o.onCompleted();\n            }));\n            return group;\n        }, left);\n    };\n    /**\n   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.\n   *\n   *  @param {Observable} right The right observable sequence to join elements for.\n   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.\n   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.\n   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.\n   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.\n   */ observableProto.groupJoin = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {\n        var left = this;\n        return new AnonymousObservable(function(o) {\n            var group = new CompositeDisposable();\n            var r = new RefCountDisposable(group);\n            var leftMap = new Map(), rightMap = new Map();\n            var leftId = 0, rightId = 0;\n            var handleError = function(e) {\n                return function(v) {\n                    v.onError(e);\n                };\n            };\n            function handleError(e) {}\n            ;\n            group.add(left.subscribe(function(value) {\n                var s = new Subject();\n                var id = leftId++;\n                leftMap.set(id, s);\n                var result = tryCatch(resultSelector)(value, addRef(s, r));\n                if (result === errorObj) {\n                    leftMap.forEach(handleError(result.e));\n                    return o.onError(result.e);\n                }\n                o.onNext(result);\n                rightMap.forEach(function(v) {\n                    s.onNext(v);\n                });\n                var md = new SingleAssignmentDisposable();\n                group.add(md);\n                var duration = tryCatch(leftDurationSelector)(value);\n                if (duration === errorObj) {\n                    leftMap.forEach(handleError(duration.e));\n                    return o.onError(duration.e);\n                }\n                md.setDisposable(duration.take(1).subscribe(noop, function(e) {\n                    leftMap.forEach(handleError(e));\n                    o.onError(e);\n                }, function() {\n                    leftMap[\"delete\"](id) && s.onCompleted();\n                    group.remove(md);\n                }));\n            }, function(e) {\n                leftMap.forEach(handleError(e));\n                o.onError(e);\n            }, function() {\n                o.onCompleted();\n            }));\n            group.add(right.subscribe(function(value) {\n                var id = rightId++;\n                rightMap.set(id, value);\n                var md = new SingleAssignmentDisposable();\n                group.add(md);\n                var duration = tryCatch(rightDurationSelector)(value);\n                if (duration === errorObj) {\n                    leftMap.forEach(handleError(duration.e));\n                    return o.onError(duration.e);\n                }\n                md.setDisposable(duration.take(1).subscribe(noop, function(e) {\n                    leftMap.forEach(handleError(e));\n                    o.onError(e);\n                }, function() {\n                    rightMap[\"delete\"](id);\n                    group.remove(md);\n                }));\n                leftMap.forEach(function(v) {\n                    v.onNext(value);\n                });\n            }, function(e) {\n                leftMap.forEach(handleError(e));\n                o.onError(e);\n            }));\n            return r;\n        }, left);\n    };\n    function toArray(x) {\n        return x.toArray();\n    }\n    /**\n   *  Projects each element of an observable sequence into zero or more buffers.\n   *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).\n   *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.\n   *  @returns {Observable} An observable sequence of windows.\n   */ observableProto.buffer = function() {\n        return this.window.apply(this, arguments).flatMap(toArray);\n    };\n    /**\n   *  Projects each element of an observable sequence into zero or more windows.\n   *\n   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).\n   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.\n   *  @returns {Observable} An observable sequence of windows.\n   */ observableProto.window = function(windowOpeningsOrClosingSelector, windowClosingSelector) {\n        if (arguments.length === 1 && typeof arguments[0] !== \"function\") {\n            return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);\n        }\n        return typeof windowOpeningsOrClosingSelector === \"function\" ? observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) : observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);\n    };\n    function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {\n        return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function(_, win) {\n            return win;\n        });\n    }\n    function observableWindowWithBoundaries(windowBoundaries) {\n        var source = this;\n        return new AnonymousObservable(function(observer) {\n            var win = new Subject(), d = new CompositeDisposable(), r = new RefCountDisposable(d);\n            observer.onNext(addRef(win, r));\n            d.add(source.subscribe(function(x) {\n                win.onNext(x);\n            }, function(err) {\n                win.onError(err);\n                observer.onError(err);\n            }, function() {\n                win.onCompleted();\n                observer.onCompleted();\n            }));\n            isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));\n            d.add(windowBoundaries.subscribe(function(w) {\n                win.onCompleted();\n                win = new Subject();\n                observer.onNext(addRef(win, r));\n            }, function(err) {\n                win.onError(err);\n                observer.onError(err);\n            }, function() {\n                win.onCompleted();\n                observer.onCompleted();\n            }));\n            return r;\n        }, source);\n    }\n    function observableWindowWithClosingSelector(windowClosingSelector) {\n        var source = this;\n        return new AnonymousObservable(function(observer) {\n            var m = new SerialDisposable(), d = new CompositeDisposable(m), r = new RefCountDisposable(d), win = new Subject();\n            observer.onNext(addRef(win, r));\n            d.add(source.subscribe(function(x) {\n                win.onNext(x);\n            }, function(err) {\n                win.onError(err);\n                observer.onError(err);\n            }, function() {\n                win.onCompleted();\n                observer.onCompleted();\n            }));\n            function createWindowClose() {\n                var windowClose;\n                try {\n                    windowClose = windowClosingSelector();\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));\n                var m1 = new SingleAssignmentDisposable();\n                m.setDisposable(m1);\n                m1.setDisposable(windowClose.take(1).subscribe(noop, function(err) {\n                    win.onError(err);\n                    observer.onError(err);\n                }, function() {\n                    win.onCompleted();\n                    win = new Subject();\n                    observer.onNext(addRef(win, r));\n                    createWindowClose();\n                }));\n            }\n            createWindowClose();\n            return r;\n        }, source);\n    }\n    var PairwiseObservable = function(__super__) {\n        inherits(PairwiseObservable, __super__);\n        function PairwiseObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        PairwiseObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new PairwiseObserver(o));\n        };\n        return PairwiseObservable;\n    }(ObservableBase);\n    var PairwiseObserver = function(__super__) {\n        inherits(PairwiseObserver, __super__);\n        function PairwiseObserver(o) {\n            this._o = o;\n            this._p = null;\n            this._hp = false;\n            __super__.call(this);\n        }\n        PairwiseObserver.prototype.next = function(x) {\n            if (this._hp) {\n                this._o.onNext([\n                    this._p,\n                    x\n                ]);\n            } else {\n                this._hp = true;\n            }\n            this._p = x;\n        };\n        PairwiseObserver.prototype.error = function(err) {\n            this._o.onError(err);\n        };\n        PairwiseObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return PairwiseObserver;\n    }(AbstractObserver);\n    /**\n   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.\n   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.\n   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.\n   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.\n   */ observableProto.pairwise = function() {\n        return new PairwiseObservable(this);\n    };\n    /**\n   * Returns two observables which partition the observations of the source by the given function.\n   * The first will trigger observations for those values for which the predicate returns true.\n   * The second will trigger observations for those values where the predicate returns false.\n   * The predicate is executed once for each subscribed observer.\n   * Both also propagate all error observations arising from the source and each completes\n   * when the source completes.\n   * @param {Function} predicate\n   *    The function to determine which output Observable will trigger a particular observation.\n   * @returns {Array}\n   *    An array of observables. The first triggers when the predicate returns true,\n   *    and the second triggers when the predicate returns false.\n  */ observableProto.partition = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return [\n            this.filter(predicate, thisArg),\n            this.filter(function(x, i, o) {\n                return !fn(x, i, o);\n            })\n        ];\n    };\n    /**\n   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.\n   *\n   * @example\n   *  var res = observable.groupBy(function (x) { return x.id; });\n   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });\n   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });\n   * @param {Function} keySelector A function to extract the key for each element.\n   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.\n   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.\n   */ observableProto.groupBy = function(keySelector, elementSelector) {\n        return this.groupByUntil(keySelector, elementSelector, observableNever);\n    };\n    /**\n     *  Groups the elements of an observable sequence according to a specified key selector function.\n     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same\n     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.\n     *\n     * @example\n     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });\n     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });\n     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });\n     * @param {Function} keySelector A function to extract the key for each element.\n     * @param {Function} durationSelector A function to signal the expiration of a group.\n     * @returns {Observable}\n     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.\n     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.\n     *\n     */ observableProto.groupByUntil = function(keySelector, elementSelector, durationSelector) {\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            var map = new Map(), groupDisposable = new CompositeDisposable(), refCountDisposable = new RefCountDisposable(groupDisposable), handleError = function(e) {\n                return function(item) {\n                    item.onError(e);\n                };\n            };\n            groupDisposable.add(source.subscribe(function(x) {\n                var key = tryCatch(keySelector)(x);\n                if (key === errorObj) {\n                    map.forEach(handleError(key.e));\n                    return o.onError(key.e);\n                }\n                var fireNewMapEntry = false, writer = map.get(key);\n                if (writer === undefined) {\n                    writer = new Subject();\n                    map.set(key, writer);\n                    fireNewMapEntry = true;\n                }\n                if (fireNewMapEntry) {\n                    var group = new GroupedObservable(key, writer, refCountDisposable), durationGroup = new GroupedObservable(key, writer);\n                    var duration = tryCatch(durationSelector)(durationGroup);\n                    if (duration === errorObj) {\n                        map.forEach(handleError(duration.e));\n                        return o.onError(duration.e);\n                    }\n                    o.onNext(group);\n                    var md = new SingleAssignmentDisposable();\n                    groupDisposable.add(md);\n                    md.setDisposable(duration.take(1).subscribe(noop, function(e) {\n                        map.forEach(handleError(e));\n                        o.onError(e);\n                    }, function() {\n                        if (map[\"delete\"](key)) {\n                            writer.onCompleted();\n                        }\n                        groupDisposable.remove(md);\n                    }));\n                }\n                var element = x;\n                if (isFunction(elementSelector)) {\n                    element = tryCatch(elementSelector)(x);\n                    if (element === errorObj) {\n                        map.forEach(handleError(element.e));\n                        return o.onError(element.e);\n                    }\n                }\n                writer.onNext(element);\n            }, function(e) {\n                map.forEach(handleError(e));\n                o.onError(e);\n            }, function() {\n                map.forEach(function(item) {\n                    item.onCompleted();\n                });\n                o.onCompleted();\n            }));\n            return refCountDisposable;\n        }, source);\n    };\n    var UnderlyingObservable = function(__super__) {\n        inherits(UnderlyingObservable, __super__);\n        function UnderlyingObservable(m, u) {\n            this._m = m;\n            this._u = u;\n            __super__.call(this);\n        }\n        UnderlyingObservable.prototype.subscribeCore = function(o) {\n            return new BinaryDisposable(this._m.getDisposable(), this._u.subscribe(o));\n        };\n        return UnderlyingObservable;\n    }(ObservableBase);\n    var GroupedObservable = function(__super__) {\n        inherits(GroupedObservable, __super__);\n        function GroupedObservable(key, underlyingObservable, mergedDisposable) {\n            __super__.call(this);\n            this.key = key;\n            this.underlyingObservable = !mergedDisposable ? underlyingObservable : new UnderlyingObservable(mergedDisposable, underlyingObservable);\n        }\n        GroupedObservable.prototype._subscribe = function(o) {\n            return this.underlyingObservable.subscribe(o);\n        };\n        return GroupedObservable;\n    }(Observable);\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.coincidence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.experimental.js":
/*!*************************************************!*\
  !*** ./node_modules/rx/dist/rx.experimental.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Aliases\n    var Observable = Rx.Observable, observableProto = Observable.prototype, ObservableBase = Rx.ObservableBase, AbstractObserver = Rx.internals.AbstractObserver, FlatMapObservable = Rx.FlatMapObservable, observableConcat = Observable.concat, observableDefer = Observable.defer, observableEmpty = Observable.empty, disposableEmpty = Rx.Disposable.empty, CompositeDisposable = Rx.CompositeDisposable, SerialDisposable = Rx.SerialDisposable, SingleAssignmentDisposable = Rx.SingleAssignmentDisposable, Enumerable = Rx.internals.Enumerable, enumerableOf = Enumerable.of, currentThreadScheduler = Rx.Scheduler.currentThread, AsyncSubject = Rx.AsyncSubject, Observer = Rx.Observer, inherits = Rx.internals.inherits, addProperties = Rx.internals.addProperties, helpers = Rx.helpers, noop = helpers.noop, isPromise = helpers.isPromise, isFunction = helpers.isFunction, isIterable = Rx.helpers.isIterable, isArrayLike = Rx.helpers.isArrayLike, isScheduler = Rx.Scheduler.isScheduler, observableFromPromise = Observable.fromPromise;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    // Shim in iterator support\n    var $iterator$ = typeof Symbol === \"function\" && Symbol.iterator || \"_es6shim_iterator_\";\n    // Bug for mozilla version\n    if (root.Set && typeof new root.Set()[\"@@iterator\"] === \"function\") {\n        $iterator$ = \"@@iterator\";\n    }\n    var doneEnumerator = Rx.doneEnumerator = {\n        done: true,\n        value: undefined\n    };\n    var isIterable = Rx.helpers.isIterable = function(o) {\n        return o && o[$iterator$] !== undefined;\n    };\n    var isArrayLike = Rx.helpers.isArrayLike = function(o) {\n        return o && o.length !== undefined;\n    };\n    Rx.helpers.iterator = $iterator$;\n    var WhileEnumerable = function(__super__) {\n        inherits(WhileEnumerable, __super__);\n        function WhileEnumerable(c, s) {\n            this.c = c;\n            this.s = s;\n        }\n        WhileEnumerable.prototype[$iterator$] = function() {\n            var self1 = this;\n            return {\n                next: function() {\n                    return self1.c() ? {\n                        done: false,\n                        value: self1.s\n                    } : {\n                        done: true,\n                        value: void 0\n                    };\n                }\n            };\n        };\n        return WhileEnumerable;\n    }(Enumerable);\n    function enumerableWhile(condition, source) {\n        return new WhileEnumerable(condition, source);\n    }\n    /**\n   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.\n   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.\n   *\n   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.\n   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.\n   */ observableProto.letBind = observableProto[\"let\"] = function(func) {\n        return func(this);\n    };\n    /**\n   *  Determines whether an observable collection contains values. \n   *\n   * @example\n   *  1 - res = Rx.Observable.if(condition, obs1);\n   *  2 - res = Rx.Observable.if(condition, obs1, obs2);\n   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);\n   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.\n   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.\n   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.\n   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.\n   */ Observable[\"if\"] = function(condition, thenSource, elseSourceOrScheduler) {\n        return observableDefer(function() {\n            elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());\n            isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));\n            isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));\n            // Assume a scheduler for empty only\n            typeof elseSourceOrScheduler.now === \"function\" && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));\n            return condition() ? thenSource : elseSourceOrScheduler;\n        });\n    };\n    /**\n   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.\n   * There is an alias for this method called 'forIn' for browsers <IE9\n   * @param {Array} sources An array of values to turn into an observable sequence.\n   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.\n   * @returns {Observable} An observable sequence from the concatenated observable sequences.\n   */ Observable[\"for\"] = Observable.forIn = function(sources, resultSelector, thisArg) {\n        return enumerableOf(sources, resultSelector, thisArg).concat();\n    };\n    /**\n   *  Repeats source as long as condition holds emulating a while loop.\n   * There is an alias for this method called 'whileDo' for browsers <IE9\n   *\n   * @param {Function} condition The condition which determines if the source will be repeated.\n   * @param {Observable} source The observable sequence that will be run if the condition function returns true.\n   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.\n   */ var observableWhileDo = Observable[\"while\"] = Observable.whileDo = function(condition, source) {\n        isPromise(source) && (source = observableFromPromise(source));\n        return enumerableWhile(condition, source).concat();\n    };\n    /**\n   *  Repeats source as long as condition holds emulating a do while loop.\n   *\n   * @param {Function} condition The condition which determines if the source will be repeated.\n   * @param {Observable} source The observable sequence that will be run if the condition function returns true.\n   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.\n   */ observableProto.doWhile = function(condition) {\n        return observableConcat([\n            this,\n            observableWhileDo(condition, this)\n        ]);\n    };\n    /**\n   *  Uses selector to determine which source in sources to use.\n   * @param {Function} selector The function which extracts the value for to test in a case statement.\n   * @param {Array} sources A object which has keys which correspond to the case statement labels.\n   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.\n   *\n   * @returns {Observable} An observable sequence which is determined by a case statement.\n   */ Observable[\"case\"] = function(selector, sources, defaultSourceOrScheduler) {\n        return observableDefer(function() {\n            isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));\n            defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());\n            isScheduler(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));\n            var result = sources[selector()];\n            isPromise(result) && (result = observableFromPromise(result));\n            return result || defaultSourceOrScheduler;\n        });\n    };\n    var ExpandObservable = function(__super__) {\n        inherits(ExpandObservable, __super__);\n        function ExpandObservable(source, fn, scheduler) {\n            this.source = source;\n            this._fn = fn;\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        function scheduleRecursive(args, recurse) {\n            var state = args[0], self1 = args[1];\n            var work;\n            if (state.q.length > 0) {\n                work = state.q.shift();\n            } else {\n                state.isAcquired = false;\n                return;\n            }\n            var m1 = new SingleAssignmentDisposable();\n            state.d.add(m1);\n            m1.setDisposable(work.subscribe(new ExpandObserver(state, self1, m1)));\n            recurse([\n                state,\n                self1\n            ]);\n        }\n        ExpandObservable.prototype._ensureActive = function(state) {\n            var isOwner = false;\n            if (state.q.length > 0) {\n                isOwner = !state.isAcquired;\n                state.isAcquired = true;\n            }\n            isOwner && state.m.setDisposable(this._scheduler.scheduleRecursive([\n                state,\n                this\n            ], scheduleRecursive));\n        };\n        ExpandObservable.prototype.subscribeCore = function(o) {\n            var m = new SerialDisposable(), d = new CompositeDisposable(m), state = {\n                q: [],\n                m: m,\n                d: d,\n                activeCount: 0,\n                isAcquired: false,\n                o: o\n            };\n            state.q.push(this.source);\n            state.activeCount++;\n            this._ensureActive(state);\n            return d;\n        };\n        return ExpandObservable;\n    }(ObservableBase);\n    var ExpandObserver = function(__super__) {\n        inherits(ExpandObserver, __super__);\n        function ExpandObserver(state, parent, m1) {\n            this._s = state;\n            this._p = parent;\n            this._m1 = m1;\n            __super__.call(this);\n        }\n        ExpandObserver.prototype.next = function(x) {\n            this._s.o.onNext(x);\n            var result = tryCatch(this._p._fn)(x);\n            if (result === errorObj) {\n                return this._s.o.onError(result.e);\n            }\n            this._s.q.push(result);\n            this._s.activeCount++;\n            this._p._ensureActive(this._s);\n        };\n        ExpandObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        ExpandObserver.prototype.completed = function() {\n            this._s.d.remove(this._m1);\n            this._s.activeCount--;\n            this._s.activeCount === 0 && this._s.o.onCompleted();\n        };\n        return ExpandObserver;\n    }(AbstractObserver);\n    /**\n   *  Expands an observable sequence by recursively invoking selector.\n   *\n   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.\n   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.\n   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.\n   */ observableProto.expand = function(selector, scheduler) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new ExpandObservable(this, selector, scheduler);\n    };\n    function argumentsToArray() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return args;\n    }\n    var ForkJoinObservable = function(__super__) {\n        inherits(ForkJoinObservable, __super__);\n        function ForkJoinObservable(sources, cb) {\n            this._sources = sources;\n            this._cb = cb;\n            __super__.call(this);\n        }\n        ForkJoinObservable.prototype.subscribeCore = function(o) {\n            if (this._sources.length === 0) {\n                o.onCompleted();\n                return disposableEmpty;\n            }\n            var count = this._sources.length;\n            var state = {\n                finished: false,\n                hasResults: new Array(count),\n                hasCompleted: new Array(count),\n                results: new Array(count)\n            };\n            var subscriptions = new CompositeDisposable();\n            for(var i = 0, len = this._sources.length; i < len; i++){\n                var source = this._sources[i];\n                isPromise(source) && (source = observableFromPromise(source));\n                subscriptions.add(source.subscribe(new ForkJoinObserver(o, state, i, this._cb, subscriptions)));\n            }\n            return subscriptions;\n        };\n        return ForkJoinObservable;\n    }(ObservableBase);\n    var ForkJoinObserver = function(__super__) {\n        inherits(ForkJoinObserver, __super__);\n        function ForkJoinObserver(o, s, i, cb, subs) {\n            this._o = o;\n            this._s = s;\n            this._i = i;\n            this._cb = cb;\n            this._subs = subs;\n            __super__.call(this);\n        }\n        ForkJoinObserver.prototype.next = function(x) {\n            if (!this._s.finished) {\n                this._s.hasResults[this._i] = true;\n                this._s.results[this._i] = x;\n            }\n        };\n        ForkJoinObserver.prototype.error = function(e) {\n            this._s.finished = true;\n            this._o.onError(e);\n            this._subs.dispose();\n        };\n        ForkJoinObserver.prototype.completed = function() {\n            if (!this._s.finished) {\n                if (!this._s.hasResults[this._i]) {\n                    return this._o.onCompleted();\n                }\n                this._s.hasCompleted[this._i] = true;\n                for(var i = 0; i < this._s.results.length; i++){\n                    if (!this._s.hasCompleted[i]) {\n                        return;\n                    }\n                }\n                this._s.finished = true;\n                var res = tryCatch(this._cb).apply(null, this._s.results);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                this._o.onNext(res);\n                this._o.onCompleted();\n            }\n        };\n        return ForkJoinObserver;\n    }(AbstractObserver);\n    /**\n   *  Runs all observable sequences in parallel and collect their last elements.\n   *\n   * @example\n   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);\n   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);\n   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.\n   */ Observable.forkJoin = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;\n        Array.isArray(args[0]) && (args = args[0]);\n        return new ForkJoinObservable(args, resultSelector);\n    };\n    /**\n   *  Runs two observable sequences in parallel and combines their last elemenets.\n   * @param {Observable} second Second observable sequence.\n   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.\n   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.\n   */ observableProto.forkJoin = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        if (Array.isArray(args[0])) {\n            args[0].unshift(this);\n        } else {\n            args.unshift(this);\n        }\n        return Observable.forkJoin.apply(null, args);\n    };\n    /**\n   * Comonadic bind operator.\n   * @param {Function} selector A transform function to apply to each element.\n   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.\n   * @returns {Observable} An observable sequence which results from the comonadic bind operation.\n   */ observableProto.manySelect = observableProto.extend = function(selector, scheduler) {\n        isScheduler(scheduler) || (scheduler = Rx.Scheduler.immediate);\n        var source = this;\n        return observableDefer(function() {\n            var chain;\n            return source.map(function(x) {\n                var curr = new ChainObservable(x);\n                chain && chain.onNext(x);\n                chain = curr;\n                return curr;\n            }).tap(noop, function(e) {\n                chain && chain.onError(e);\n            }, function() {\n                chain && chain.onCompleted();\n            }).observeOn(scheduler).map(selector);\n        }, source);\n    };\n    var ChainObservable = function(__super__) {\n        inherits(ChainObservable, __super__);\n        function ChainObservable(head) {\n            __super__.call(this);\n            this.head = head;\n            this.tail = new AsyncSubject();\n        }\n        addProperties(ChainObservable.prototype, Observer, {\n            _subscribe: function(o) {\n                var g = new CompositeDisposable();\n                g.add(currentThreadScheduler.schedule(this, function(_, self1) {\n                    o.onNext(self1.head);\n                    g.add(self1.tail.mergeAll().subscribe(o));\n                }));\n                return g;\n            },\n            onCompleted: function() {\n                this.onNext(Observable.empty());\n            },\n            onError: function(e) {\n                this.onNext(Observable[\"throw\"](e));\n            },\n            onNext: function(v) {\n                this.tail.onNext(v);\n                this.tail.onCompleted();\n            }\n        });\n        return ChainObservable;\n    }(Observable);\n    var SwitchFirstObservable = function(__super__) {\n        inherits(SwitchFirstObservable, __super__);\n        function SwitchFirstObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        SwitchFirstObservable.prototype.subscribeCore = function(o) {\n            var m = new SingleAssignmentDisposable(), g = new CompositeDisposable(), state = {\n                hasCurrent: false,\n                isStopped: false,\n                o: o,\n                g: g\n            };\n            g.add(m);\n            m.setDisposable(this.source.subscribe(new SwitchFirstObserver(state)));\n            return g;\n        };\n        return SwitchFirstObservable;\n    }(ObservableBase);\n    var SwitchFirstObserver = function(__super__) {\n        inherits(SwitchFirstObserver, __super__);\n        function SwitchFirstObserver(state) {\n            this._s = state;\n            __super__.call(this);\n        }\n        SwitchFirstObserver.prototype.next = function(x) {\n            if (!this._s.hasCurrent) {\n                this._s.hasCurrent = true;\n                isPromise(x) && (x = observableFromPromise(x));\n                var inner = new SingleAssignmentDisposable();\n                this._s.g.add(inner);\n                inner.setDisposable(x.subscribe(new InnerObserver(this._s, inner)));\n            }\n        };\n        SwitchFirstObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        SwitchFirstObserver.prototype.completed = function() {\n            this._s.isStopped = true;\n            !this._s.hasCurrent && this._s.g.length === 1 && this._s.o.onCompleted();\n        };\n        inherits(InnerObserver, __super__);\n        function InnerObserver(state, inner) {\n            this._s = state;\n            this._i = inner;\n            __super__.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            this._s.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this._s.g.remove(this._i);\n            this._s.hasCurrent = false;\n            this._s.isStopped && this._s.g.length === 1 && this._s.o.onCompleted();\n        };\n        return SwitchFirstObserver;\n    }(AbstractObserver);\n    /**\n   * Performs a exclusive waiting for the first to finish before subscribing to another observable.\n   * Observables that come in between subscriptions will be dropped on the floor.\n   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.\n   */ observableProto.switchFirst = function() {\n        return new SwitchFirstObservable(this);\n    };\n    observableProto.flatMapFirst = observableProto.exhaustMap = function(selector, resultSelector, thisArg) {\n        return new FlatMapObservable(this, selector, resultSelector, thisArg).switchFirst();\n    };\n    observableProto.flatMapWithMaxConcurrent = observableProto.flatMapMaxConcurrent = function(limit, selector, resultSelector, thisArg) {\n        return new FlatMapObservable(this, selector, resultSelector, thisArg).merge(limit);\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.experimental.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.joinpatterns.js":
/*!*************************************************!*\
  !*** ./node_modules/rx/dist/rx.joinpatterns.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Aliases\n    var Observable = Rx.Observable, observableProto = Observable.prototype, AnonymousObservable = Rx.AnonymousObservable, observableThrow = Observable.throwError, observerCreate = Rx.Observer.create, SingleAssignmentDisposable = Rx.SingleAssignmentDisposable, CompositeDisposable = Rx.CompositeDisposable, AbstractObserver = Rx.internals.AbstractObserver, noop = Rx.helpers.noop, inherits = Rx.internals.inherits, isFunction = Rx.helpers.isFunction;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    var Map = root.Map || function() {\n        function Map() {\n            this.size = 0;\n            this._values = [];\n            this._keys = [];\n        }\n        Map.prototype[\"delete\"] = function(key) {\n            var i = this._keys.indexOf(key);\n            if (i === -1) {\n                return false;\n            }\n            this._values.splice(i, 1);\n            this._keys.splice(i, 1);\n            this.size--;\n            return true;\n        };\n        Map.prototype.get = function(key) {\n            var i = this._keys.indexOf(key);\n            return i === -1 ? undefined : this._values[i];\n        };\n        Map.prototype.set = function(key, value) {\n            var i = this._keys.indexOf(key);\n            if (i === -1) {\n                this._keys.push(key);\n                this._values.push(value);\n                this.size++;\n            } else {\n                this._values[i] = value;\n            }\n            return this;\n        };\n        Map.prototype.forEach = function(cb, thisArg) {\n            for(var i = 0; i < this.size; i++){\n                cb.call(thisArg, this._values[i], this._keys[i]);\n            }\n        };\n        return Map;\n    }();\n    /**\n   * @constructor\n   * Represents a join pattern over observable sequences.\n   */ function Pattern(patterns) {\n        this.patterns = patterns;\n    }\n    /**\n   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.\n   *  @param other Observable sequence to match in addition to the current pattern.\n   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.\n   */ Pattern.prototype.and = function(other) {\n        return new Pattern(this.patterns.concat(other));\n    };\n    /**\n   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.\n   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.\n   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.\n   */ Pattern.prototype.thenDo = function(selector) {\n        return new Plan(this, selector);\n    };\n    function Plan(expression, selector) {\n        this.expression = expression;\n        this.selector = selector;\n    }\n    function handleOnError(o) {\n        return function(e) {\n            o.onError(e);\n        };\n    }\n    function handleOnNext(self1, observer) {\n        return function onNext() {\n            var result = tryCatch(self1.selector).apply(self1, arguments);\n            if (result === errorObj) {\n                return observer.onError(result.e);\n            }\n            observer.onNext(result);\n        };\n    }\n    Plan.prototype.activate = function(externalSubscriptions, observer, deactivate) {\n        var joinObservers = [], errHandler = handleOnError(observer);\n        for(var i = 0, len = this.expression.patterns.length; i < len; i++){\n            joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], errHandler));\n        }\n        var activePlan = new ActivePlan(joinObservers, handleOnNext(this, observer), function() {\n            for(var j = 0, jlen = joinObservers.length; j < jlen; j++){\n                joinObservers[j].removeActivePlan(activePlan);\n            }\n            deactivate(activePlan);\n        });\n        for(i = 0, len = joinObservers.length; i < len; i++){\n            joinObservers[i].addActivePlan(activePlan);\n        }\n        return activePlan;\n    };\n    function planCreateObserver(externalSubscriptions, observable, onError) {\n        var entry = externalSubscriptions.get(observable);\n        if (!entry) {\n            var observer = new JoinObserver(observable, onError);\n            externalSubscriptions.set(observable, observer);\n            return observer;\n        }\n        return entry;\n    }\n    function ActivePlan(joinObserverArray, onNext, onCompleted) {\n        this.joinObserverArray = joinObserverArray;\n        this.onNext = onNext;\n        this.onCompleted = onCompleted;\n        this.joinObservers = new Map();\n        for(var i = 0, len = this.joinObserverArray.length; i < len; i++){\n            var joinObserver = this.joinObserverArray[i];\n            this.joinObservers.set(joinObserver, joinObserver);\n        }\n    }\n    ActivePlan.prototype.dequeue = function() {\n        this.joinObservers.forEach(function(v) {\n            v.queue.shift();\n        });\n    };\n    ActivePlan.prototype.match = function() {\n        var i, len, hasValues = true;\n        for(i = 0, len = this.joinObserverArray.length; i < len; i++){\n            if (this.joinObserverArray[i].queue.length === 0) {\n                hasValues = false;\n                break;\n            }\n        }\n        if (hasValues) {\n            var firstValues = [], isCompleted = false;\n            for(i = 0, len = this.joinObserverArray.length; i < len; i++){\n                firstValues.push(this.joinObserverArray[i].queue[0]);\n                this.joinObserverArray[i].queue[0].kind === \"C\" && (isCompleted = true);\n            }\n            if (isCompleted) {\n                this.onCompleted();\n            } else {\n                this.dequeue();\n                var values = [];\n                for(i = 0, len = firstValues.length; i < firstValues.length; i++){\n                    values.push(firstValues[i].value);\n                }\n                this.onNext.apply(this, values);\n            }\n        }\n    };\n    var JoinObserver = function(__super__) {\n        inherits(JoinObserver, __super__);\n        function JoinObserver(source, onError) {\n            __super__.call(this);\n            this.source = source;\n            this.onError = onError;\n            this.queue = [];\n            this.activePlans = [];\n            this.subscription = new SingleAssignmentDisposable();\n            this.isDisposed = false;\n        }\n        var JoinObserverPrototype = JoinObserver.prototype;\n        JoinObserverPrototype.next = function(notification) {\n            if (!this.isDisposed) {\n                if (notification.kind === \"E\") {\n                    return this.onError(notification.error);\n                }\n                this.queue.push(notification);\n                var activePlans = this.activePlans.slice(0);\n                for(var i = 0, len = activePlans.length; i < len; i++){\n                    activePlans[i].match();\n                }\n            }\n        };\n        JoinObserverPrototype.error = noop;\n        JoinObserverPrototype.completed = noop;\n        JoinObserverPrototype.addActivePlan = function(activePlan) {\n            this.activePlans.push(activePlan);\n        };\n        JoinObserverPrototype.subscribe = function() {\n            this.subscription.setDisposable(this.source.materialize().subscribe(this));\n        };\n        JoinObserverPrototype.removeActivePlan = function(activePlan) {\n            this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);\n            this.activePlans.length === 0 && this.dispose();\n        };\n        JoinObserverPrototype.dispose = function() {\n            __super__.prototype.dispose.call(this);\n            if (!this.isDisposed) {\n                this.isDisposed = true;\n                this.subscription.dispose();\n            }\n        };\n        return JoinObserver;\n    }(AbstractObserver);\n    /**\n   *  Creates a pattern that matches when both observable sequences have an available value.\n   *\n   *  @param right Observable sequence to match with the current sequence.\n   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.\n   */ observableProto.and = function(right) {\n        return new Pattern([\n            this,\n            right\n        ]);\n    };\n    /**\n   *  Matches when the observable sequence has an available value and projects the value.\n   *\n   *  @param {Function} selector Selector that will be invoked for values in the source sequence.\n   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.\n   */ observableProto.thenDo = function(selector) {\n        return new Pattern([\n            this\n        ]).thenDo(selector);\n    };\n    /**\n   *  Joins together the results from several patterns.\n   *\n   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.\n   *  @returns {Observable} Observable sequence with the results form matching several patterns.\n   */ Observable.when = function() {\n        var len = arguments.length, plans;\n        if (Array.isArray(arguments[0])) {\n            plans = arguments[0];\n        } else {\n            plans = new Array(len);\n            for(var i = 0; i < len; i++){\n                plans[i] = arguments[i];\n            }\n        }\n        return new AnonymousObservable(function(o) {\n            var activePlans = [], externalSubscriptions = new Map();\n            var outObserver = observerCreate(function(x) {\n                o.onNext(x);\n            }, function(err) {\n                externalSubscriptions.forEach(function(v) {\n                    v.onError(err);\n                });\n                o.onError(err);\n            }, function(x) {\n                o.onCompleted();\n            });\n            try {\n                for(var i = 0, len = plans.length; i < len; i++){\n                    activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function(activePlan) {\n                        var idx = activePlans.indexOf(activePlan);\n                        activePlans.splice(idx, 1);\n                        activePlans.length === 0 && o.onCompleted();\n                    }));\n                }\n            } catch (e) {\n                return observableThrow(e).subscribe(o);\n            }\n            var group = new CompositeDisposable();\n            externalSubscriptions.forEach(function(joinObserver) {\n                joinObserver.subscribe();\n                group.add(joinObserver);\n            });\n            return group;\n        });\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcngvZGlzdC9yeC5qb2lucGF0dGVybnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLDZLQUE2Rzs7QUFFM0csVUFBVUEsT0FBTztJQUNqQixJQUFJQyxjQUFjO1FBQ2hCLFlBQVk7UUFDWixVQUFVO0lBQ1o7SUFFQSxTQUFTQyxZQUFZQyxLQUFLO1FBQ3hCLE9BQU8sU0FBVUEsTUFBTUMsTUFBTSxLQUFLQSxTQUFVRCxRQUFRO0lBQ3REO0lBRUEsSUFBSUUsY0FBYyxXQUFZLENBQUMsT0FBT0MsUUFBUSxJQUFJQSxXQUFXLENBQUNBLFFBQVFDLFFBQVEsR0FBSUQsVUFBVTtJQUM1RixJQUFJRSxhQUFhLFdBQVksQ0FBQyxRQUFhQyxDQUFDLElBQUlBLFVBQVUsQ0FBQ0EsT0FBT0YsUUFBUSxHQUFJRSxTQUFTO0lBQ3ZGLElBQUlDLGFBQWFSLFlBQVlHLGVBQWVHLGNBQWMsT0FBT0csV0FBVyxZQUFZQTtJQUN4RixJQUFJQyxXQUFXVixZQUFZRCxXQUFXLENBQUMsT0FBT1ksS0FBSyxJQUFJQTtJQUN2RCxJQUFJQyxhQUFhWixZQUFZRCxXQUFXLENBQUMsWUFBYyxJQUFJYztJQUMzRCxJQUFJQyxnQkFBZ0IsY0FBZVIsV0FBV0YsT0FBTyxLQUFLRCxjQUFlQSxjQUFjO0lBQ3ZGLElBQUlZLGFBQWFmLFlBQVlELFdBQVcsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUk7SUFDN0QsSUFBSWlCLE9BQU9SLGNBQWUsZUFBaUJPLENBQUFBLGNBQWNBLFdBQVdGLE1BQU0sS0FBTUQsY0FBZUYsWUFBWUssY0FBY0UsU0FBUztJQUVsSSw4QkFBOEI7SUFDOUIsSUFBSSxJQUEwQyxFQUFFO1FBQzlDQyxpQ0FBTztZQUFDO1NBQU8sbUNBQUUsU0FBVUUsRUFBRSxFQUFFaEIsUUFBTztZQUNwQyxPQUFPTixRQUFRa0IsTUFBTVosVUFBU2dCO1FBQ2hDLENBQUM7QUFBQSxrR0FBQztJQUNKLE9BQU8sRUFJTjtBQUNILEdBQUVFLElBQUksQ0FBQyxRQUFNLFNBQVVOLElBQUksRUFBRU8sR0FBRyxFQUFFSCxFQUFFLEVBQUVJLFNBQVM7SUFFN0MsVUFBVTtJQUNWLElBQUlDLGFBQWFMLEdBQUdLLFVBQVUsRUFDNUJDLGtCQUFrQkQsV0FBV0UsU0FBUyxFQUN0Q0Msc0JBQXNCUixHQUFHUSxtQkFBbUIsRUFDNUNDLGtCQUFrQkosV0FBV0ssVUFBVSxFQUN2Q0MsaUJBQWlCWCxHQUFHWSxRQUFRLENBQUNDLE1BQU0sRUFDbkNDLDZCQUE2QmQsR0FBR2MsMEJBQTBCLEVBQzFEQyxzQkFBc0JmLEdBQUdlLG1CQUFtQixFQUM1Q0MsbUJBQW1CaEIsR0FBR2lCLFNBQVMsQ0FBQ0QsZ0JBQWdCLEVBQ2hERSxPQUFPbEIsR0FBR21CLE9BQU8sQ0FBQ0QsSUFBSSxFQUN0QkUsV0FBV3BCLEdBQUdpQixTQUFTLENBQUNHLFFBQVEsRUFDaENDLGFBQWFyQixHQUFHbUIsT0FBTyxDQUFDRSxVQUFVO0lBRXBDLElBQUlDLFdBQVc7UUFBQ0MsR0FBRyxDQUFDO0lBQUM7SUFFckIsU0FBU0MsY0FBY0MsY0FBYztRQUNuQyxPQUFPLFNBQVNDO1lBQ2QsSUFBSTtnQkFDRixPQUFPRCxlQUFlRSxLQUFLLENBQUMsSUFBSSxFQUFFQztZQUNwQyxFQUFFLE9BQU9MLEdBQUc7Z0JBQ1ZELFNBQVNDLENBQUMsR0FBR0E7Z0JBQ2IsT0FBT0Q7WUFDVDtRQUNGO0lBQ0Y7SUFFQSxJQUFJTyxXQUFXN0IsR0FBR2lCLFNBQVMsQ0FBQ1ksUUFBUSxHQUFHLFNBQVNBLFNBQVNDLEVBQUU7UUFDekQsSUFBSSxDQUFDVCxXQUFXUyxLQUFLO1lBQUUsTUFBTSxJQUFJQyxVQUFVO1FBQTBCO1FBQ3JFLE9BQU9QLGNBQWNNO0lBQ3ZCO0lBRUEsU0FBU0UsUUFBUVQsQ0FBQztRQUNoQixNQUFNQTtJQUNSO0lBRUEsSUFBSVUsTUFBTXJDLEtBQUtxQyxHQUFHLElBQUs7UUFDckIsU0FBU0E7WUFDUCxJQUFJLENBQUNDLElBQUksR0FBRztZQUNaLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtRQUNqQjtRQUVBSCxJQUFJMUIsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFVOEIsR0FBRztZQUNyQyxJQUFJQyxJQUFJLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxPQUFPLENBQUNGO1lBQzNCLElBQUlDLE1BQU0sQ0FBQyxHQUFHO2dCQUFFLE9BQU87WUFBTztZQUM5QixJQUFJLENBQUNILE9BQU8sQ0FBQ0ssTUFBTSxDQUFDRixHQUFHO1lBQ3ZCLElBQUksQ0FBQ0YsS0FBSyxDQUFDSSxNQUFNLENBQUNGLEdBQUc7WUFDckIsSUFBSSxDQUFDSixJQUFJO1lBQ1QsT0FBTztRQUNUO1FBRUFELElBQUkxQixTQUFTLENBQUNrQyxHQUFHLEdBQUcsU0FBVUosR0FBRztZQUMvQixJQUFJQyxJQUFJLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxPQUFPLENBQUNGO1lBQzNCLE9BQU9DLE1BQU0sQ0FBQyxJQUFJbEMsWUFBWSxJQUFJLENBQUMrQixPQUFPLENBQUNHLEVBQUU7UUFDL0M7UUFFQUwsSUFBSTFCLFNBQVMsQ0FBQ21DLEdBQUcsR0FBRyxTQUFVTCxHQUFHLEVBQUV4RCxLQUFLO1lBQ3RDLElBQUl5RCxJQUFJLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxPQUFPLENBQUNGO1lBQzNCLElBQUlDLE1BQU0sQ0FBQyxHQUFHO2dCQUNaLElBQUksQ0FBQ0YsS0FBSyxDQUFDTyxJQUFJLENBQUNOO2dCQUNoQixJQUFJLENBQUNGLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDOUQ7Z0JBQ2xCLElBQUksQ0FBQ3FELElBQUk7WUFDWCxPQUFPO2dCQUNMLElBQUksQ0FBQ0MsT0FBTyxDQUFDRyxFQUFFLEdBQUd6RDtZQUNwQjtZQUNBLE9BQU8sSUFBSTtRQUNiO1FBRUFvRCxJQUFJMUIsU0FBUyxDQUFDcUMsT0FBTyxHQUFHLFNBQVVDLEVBQUUsRUFBRUMsT0FBTztZQUMzQyxJQUFLLElBQUlSLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNKLElBQUksRUFBRUksSUFBSztnQkFDbENPLEdBQUczQyxJQUFJLENBQUM0QyxTQUFTLElBQUksQ0FBQ1gsT0FBTyxDQUFDRyxFQUFFLEVBQUUsSUFBSSxDQUFDRixLQUFLLENBQUNFLEVBQUU7WUFDakQ7UUFDRjtRQUVBLE9BQU9MO0lBQ1Q7SUFFQTs7O0dBR0MsR0FDRCxTQUFTYyxRQUFRQyxRQUFRO1FBQ3ZCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtJQUNsQjtJQUVBOzs7O0dBSUMsR0FDREQsUUFBUXhDLFNBQVMsQ0FBQzBDLEdBQUcsR0FBRyxTQUFVQyxLQUFLO1FBQ3JDLE9BQU8sSUFBSUgsUUFBUSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0csTUFBTSxDQUFDRDtJQUMxQztJQUVBOzs7O0dBSUMsR0FDREgsUUFBUXhDLFNBQVMsQ0FBQzZDLE1BQU0sR0FBRyxTQUFVQyxRQUFRO1FBQzNDLE9BQU8sSUFBSUMsS0FBSyxJQUFJLEVBQUVEO0lBQ3hCO0lBRUEsU0FBU0MsS0FBS0MsVUFBVSxFQUFFRixRQUFRO1FBQ2hDLElBQUksQ0FBQ0UsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNGLFFBQVEsR0FBR0E7SUFDbEI7SUFFQSxTQUFTRyxjQUFjQyxDQUFDO1FBQUksT0FBTyxTQUFVbEMsQ0FBQztZQUFJa0MsRUFBRUMsT0FBTyxDQUFDbkM7UUFBSTtJQUFHO0lBQ25FLFNBQVNvQyxhQUFhcEUsS0FBSSxFQUFFcUUsUUFBUTtRQUNsQyxPQUFPLFNBQVNDO1lBQ2QsSUFBSUMsU0FBU2pDLFNBQVN0QyxNQUFLOEQsUUFBUSxFQUFFMUIsS0FBSyxDQUFDcEMsT0FBTXFDO1lBQ2pELElBQUlrQyxXQUFXeEMsVUFBVTtnQkFBRSxPQUFPc0MsU0FBU0YsT0FBTyxDQUFDSSxPQUFPdkMsQ0FBQztZQUFHO1lBQzlEcUMsU0FBU0MsTUFBTSxDQUFDQztRQUNsQjtJQUNGO0lBRUFSLEtBQUsvQyxTQUFTLENBQUN3RCxRQUFRLEdBQUcsU0FBVUMscUJBQXFCLEVBQUVKLFFBQVEsRUFBRUssVUFBVTtRQUM3RSxJQUFJQyxnQkFBZ0IsRUFBRSxFQUFFQyxhQUFhWCxjQUFjSTtRQUNuRCxJQUFLLElBQUl0QixJQUFJLEdBQUc4QixNQUFNLElBQUksQ0FBQ2IsVUFBVSxDQUFDUCxRQUFRLENBQUNxQixNQUFNLEVBQUUvQixJQUFJOEIsS0FBSzlCLElBQUs7WUFDbkU0QixjQUFjdkIsSUFBSSxDQUFDMkIsbUJBQW1CTix1QkFBdUIsSUFBSSxDQUFDVCxVQUFVLENBQUNQLFFBQVEsQ0FBQ1YsRUFBRSxFQUFFNkI7UUFDNUY7UUFDQSxJQUFJSSxhQUFhLElBQUlDLFdBQVdOLGVBQWVQLGFBQWEsSUFBSSxFQUFFQyxXQUFXO1lBQzNFLElBQUssSUFBSWEsSUFBSSxHQUFHQyxPQUFPUixjQUFjRyxNQUFNLEVBQUVJLElBQUlDLE1BQU1ELElBQUs7Z0JBQzFEUCxhQUFhLENBQUNPLEVBQUUsQ0FBQ0UsZ0JBQWdCLENBQUNKO1lBQ3BDO1lBQ0FOLFdBQVdNO1FBQ2I7UUFDQSxJQUFLakMsSUFBSSxHQUFHOEIsTUFBTUYsY0FBY0csTUFBTSxFQUFFL0IsSUFBSThCLEtBQUs5QixJQUFLO1lBQ3BENEIsYUFBYSxDQUFDNUIsRUFBRSxDQUFDc0MsYUFBYSxDQUFDTDtRQUNqQztRQUNBLE9BQU9BO0lBQ1Q7SUFFQSxTQUFTRCxtQkFBbUJOLHFCQUFxQixFQUFFYSxVQUFVLEVBQUVuQixPQUFPO1FBQ3BFLElBQUlvQixRQUFRZCxzQkFBc0J2QixHQUFHLENBQUNvQztRQUN0QyxJQUFJLENBQUNDLE9BQU87WUFDVixJQUFJbEIsV0FBVyxJQUFJbUIsYUFBYUYsWUFBWW5CO1lBQzVDTSxzQkFBc0J0QixHQUFHLENBQUNtQyxZQUFZakI7WUFDdEMsT0FBT0E7UUFDVDtRQUNBLE9BQU9rQjtJQUNUO0lBRUEsU0FBU04sV0FBV1EsaUJBQWlCLEVBQUVuQixNQUFNLEVBQUVvQixXQUFXO1FBQ3hELElBQUksQ0FBQ0QsaUJBQWlCLEdBQUdBO1FBQ3pCLElBQUksQ0FBQ25CLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNvQixXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ2YsYUFBYSxHQUFHLElBQUlqQztRQUN6QixJQUFLLElBQUlLLElBQUksR0FBRzhCLE1BQU0sSUFBSSxDQUFDWSxpQkFBaUIsQ0FBQ1gsTUFBTSxFQUFFL0IsSUFBSThCLEtBQUs5QixJQUFLO1lBQ2pFLElBQUk0QyxlQUFlLElBQUksQ0FBQ0YsaUJBQWlCLENBQUMxQyxFQUFFO1lBQzVDLElBQUksQ0FBQzRCLGFBQWEsQ0FBQ3hCLEdBQUcsQ0FBQ3dDLGNBQWNBO1FBQ3ZDO0lBQ0Y7SUFFQVYsV0FBV2pFLFNBQVMsQ0FBQzRFLE9BQU8sR0FBRztRQUM3QixJQUFJLENBQUNqQixhQUFhLENBQUN0QixPQUFPLENBQUMsU0FBVXdDLENBQUM7WUFBSUEsRUFBRUMsS0FBSyxDQUFDQyxLQUFLO1FBQUk7SUFDN0Q7SUFFQWQsV0FBV2pFLFNBQVMsQ0FBQ2dGLEtBQUssR0FBRztRQUMzQixJQUFJakQsR0FBRzhCLEtBQUtvQixZQUFZO1FBQ3hCLElBQUtsRCxJQUFJLEdBQUc4QixNQUFNLElBQUksQ0FBQ1ksaUJBQWlCLENBQUNYLE1BQU0sRUFBRS9CLElBQUk4QixLQUFLOUIsSUFBSztZQUM3RCxJQUFJLElBQUksQ0FBQzBDLGlCQUFpQixDQUFDMUMsRUFBRSxDQUFDK0MsS0FBSyxDQUFDaEIsTUFBTSxLQUFLLEdBQUc7Z0JBQ2hEbUIsWUFBWTtnQkFDWjtZQUNGO1FBQ0Y7UUFDQSxJQUFJQSxXQUFXO1lBQ2IsSUFBSUMsY0FBYyxFQUFFLEVBQ2hCQyxjQUFjO1lBQ2xCLElBQUtwRCxJQUFJLEdBQUc4QixNQUFNLElBQUksQ0FBQ1ksaUJBQWlCLENBQUNYLE1BQU0sRUFBRS9CLElBQUk4QixLQUFLOUIsSUFBSztnQkFDN0RtRCxZQUFZOUMsSUFBSSxDQUFDLElBQUksQ0FBQ3FDLGlCQUFpQixDQUFDMUMsRUFBRSxDQUFDK0MsS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELElBQUksQ0FBQ0wsaUJBQWlCLENBQUMxQyxFQUFFLENBQUMrQyxLQUFLLENBQUMsRUFBRSxDQUFDTSxJQUFJLEtBQUssT0FBUUQsQ0FBQUEsY0FBYyxJQUFHO1lBQ3ZFO1lBQ0EsSUFBSUEsYUFBYTtnQkFDZixJQUFJLENBQUNULFdBQVc7WUFDbEIsT0FBTztnQkFDTCxJQUFJLENBQUNFLE9BQU87Z0JBQ1osSUFBSVMsU0FBUyxFQUFFO2dCQUNmLElBQUt0RCxJQUFJLEdBQUc4QixNQUFNcUIsWUFBWXBCLE1BQU0sRUFBRS9CLElBQUltRCxZQUFZcEIsTUFBTSxFQUFFL0IsSUFBSztvQkFDakVzRCxPQUFPakQsSUFBSSxDQUFDOEMsV0FBVyxDQUFDbkQsRUFBRSxDQUFDekQsS0FBSztnQkFDbEM7Z0JBQ0EsSUFBSSxDQUFDZ0YsTUFBTSxDQUFDbEMsS0FBSyxDQUFDLElBQUksRUFBRWlFO1lBQzFCO1FBQ0Y7SUFDRjtJQUVBLElBQUliLGVBQWdCLFNBQVVjLFNBQVM7UUFDckN6RSxTQUFTMkQsY0FBY2M7UUFFdkIsU0FBU2QsYUFBYWUsTUFBTSxFQUFFcEMsT0FBTztZQUNuQ21DLFVBQVUzRixJQUFJLENBQUMsSUFBSTtZQUNuQixJQUFJLENBQUM0RixNQUFNLEdBQUdBO1lBQ2QsSUFBSSxDQUFDcEMsT0FBTyxHQUFHQTtZQUNmLElBQUksQ0FBQzJCLEtBQUssR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDVSxXQUFXLEdBQUcsRUFBRTtZQUNyQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJbEY7WUFDeEIsSUFBSSxDQUFDbUYsVUFBVSxHQUFHO1FBQ3BCO1FBRUEsSUFBSUMsd0JBQXdCbkIsYUFBYXhFLFNBQVM7UUFFbEQyRixzQkFBc0JDLElBQUksR0FBRyxTQUFVQyxZQUFZO1lBQ2pELElBQUksQ0FBQyxJQUFJLENBQUNILFVBQVUsRUFBRTtnQkFDcEIsSUFBSUcsYUFBYVQsSUFBSSxLQUFLLEtBQUs7b0JBQzdCLE9BQU8sSUFBSSxDQUFDakMsT0FBTyxDQUFDMEMsYUFBYUMsS0FBSztnQkFDeEM7Z0JBQ0EsSUFBSSxDQUFDaEIsS0FBSyxDQUFDMUMsSUFBSSxDQUFDeUQ7Z0JBQ2hCLElBQUlMLGNBQWMsSUFBSSxDQUFDQSxXQUFXLENBQUNPLEtBQUssQ0FBQztnQkFDekMsSUFBSyxJQUFJaEUsSUFBSSxHQUFHOEIsTUFBTTJCLFlBQVkxQixNQUFNLEVBQUUvQixJQUFJOEIsS0FBSzlCLElBQUs7b0JBQ3REeUQsV0FBVyxDQUFDekQsRUFBRSxDQUFDaUQsS0FBSztnQkFDdEI7WUFDRjtRQUNGO1FBRUFXLHNCQUFzQkcsS0FBSyxHQUFHbkY7UUFDOUJnRixzQkFBc0JLLFNBQVMsR0FBR3JGO1FBRWxDZ0Ysc0JBQXNCdEIsYUFBYSxHQUFHLFNBQVVMLFVBQVU7WUFDeEQsSUFBSSxDQUFDd0IsV0FBVyxDQUFDcEQsSUFBSSxDQUFDNEI7UUFDeEI7UUFFQTJCLHNCQUFzQk0sU0FBUyxHQUFHO1lBQ2hDLElBQUksQ0FBQ1IsWUFBWSxDQUFDUyxhQUFhLENBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNZLFdBQVcsR0FBR0YsU0FBUyxDQUFDLElBQUk7UUFDMUU7UUFFQU4sc0JBQXNCdkIsZ0JBQWdCLEdBQUcsU0FBVUosVUFBVTtZQUMzRCxJQUFJLENBQUN3QixXQUFXLENBQUN2RCxNQUFNLENBQUMsSUFBSSxDQUFDdUQsV0FBVyxDQUFDeEQsT0FBTyxDQUFDZ0MsYUFBYTtZQUM5RCxJQUFJLENBQUN3QixXQUFXLENBQUMxQixNQUFNLEtBQUssS0FBSyxJQUFJLENBQUNzQyxPQUFPO1FBQy9DO1FBRUFULHNCQUFzQlMsT0FBTyxHQUFHO1lBQzlCZCxVQUFVdEYsU0FBUyxDQUFDb0csT0FBTyxDQUFDekcsSUFBSSxDQUFDLElBQUk7WUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQytGLFVBQVUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDQSxVQUFVLEdBQUc7Z0JBQ2xCLElBQUksQ0FBQ0QsWUFBWSxDQUFDVyxPQUFPO1lBQzNCO1FBQ0Y7UUFFQSxPQUFPNUI7SUFDVCxFQUFHL0Q7SUFFSDs7Ozs7R0FLQyxHQUNEVixnQkFBZ0IyQyxHQUFHLEdBQUcsU0FBVTJELEtBQUs7UUFDbkMsT0FBTyxJQUFJN0QsUUFBUTtZQUFDLElBQUk7WUFBRTZEO1NBQU07SUFDbEM7SUFFQTs7Ozs7R0FLQyxHQUNEdEcsZ0JBQWdCOEMsTUFBTSxHQUFHLFNBQVVDLFFBQVE7UUFDekMsT0FBTyxJQUFJTixRQUFRO1lBQUMsSUFBSTtTQUFDLEVBQUVLLE1BQU0sQ0FBQ0M7SUFDcEM7SUFFQTs7Ozs7R0FLQyxHQUNEaEQsV0FBV3dHLElBQUksR0FBRztRQUNoQixJQUFJekMsTUFBTXhDLFVBQVV5QyxNQUFNLEVBQUV5QztRQUM1QixJQUFJQyxNQUFNQyxPQUFPLENBQUNwRixTQUFTLENBQUMsRUFBRSxHQUFHO1lBQy9Ca0YsUUFBUWxGLFNBQVMsQ0FBQyxFQUFFO1FBQ3RCLE9BQU87WUFDTGtGLFFBQVEsSUFBSUMsTUFBTTNDO1lBQ2xCLElBQUksSUFBSTlCLElBQUksR0FBR0EsSUFBSThCLEtBQUs5QixJQUFLO2dCQUFFd0UsS0FBSyxDQUFDeEUsRUFBRSxHQUFHVixTQUFTLENBQUNVLEVBQUU7WUFBRTtRQUMxRDtRQUNBLE9BQU8sSUFBSTlCLG9CQUFvQixTQUFVaUQsQ0FBQztZQUN4QyxJQUFJc0MsY0FBYyxFQUFFLEVBQ2hCL0Isd0JBQXdCLElBQUkvQjtZQUNoQyxJQUFJZ0YsY0FBY3RHLGVBQ2hCLFNBQVV1RyxDQUFDO2dCQUFJekQsRUFBRUksTUFBTSxDQUFDcUQ7WUFBSSxHQUM1QixTQUFVQyxHQUFHO2dCQUNYbkQsc0JBQXNCcEIsT0FBTyxDQUFDLFNBQVV3QyxDQUFDO29CQUFJQSxFQUFFMUIsT0FBTyxDQUFDeUQ7Z0JBQU07Z0JBQzdEMUQsRUFBRUMsT0FBTyxDQUFDeUQ7WUFDWixHQUNBLFNBQVVELENBQUM7Z0JBQUl6RCxFQUFFd0IsV0FBVztZQUFJO1lBRWxDLElBQUk7Z0JBQ0YsSUFBSyxJQUFJM0MsSUFBSSxHQUFHOEIsTUFBTTBDLE1BQU16QyxNQUFNLEVBQUUvQixJQUFJOEIsS0FBSzlCLElBQUs7b0JBQ2hEeUQsWUFBWXBELElBQUksQ0FBQ21FLEtBQUssQ0FBQ3hFLEVBQUUsQ0FBQ3lCLFFBQVEsQ0FBQ0MsdUJBQXVCaUQsYUFBYSxTQUFVMUMsVUFBVTt3QkFDekYsSUFBSTZDLE1BQU1yQixZQUFZeEQsT0FBTyxDQUFDZ0M7d0JBQzlCd0IsWUFBWXZELE1BQU0sQ0FBQzRFLEtBQUs7d0JBQ3hCckIsWUFBWTFCLE1BQU0sS0FBSyxLQUFLWixFQUFFd0IsV0FBVztvQkFDM0M7Z0JBQ0Y7WUFDRixFQUFFLE9BQU8xRCxHQUFHO2dCQUNWLE9BQU9kLGdCQUFnQmMsR0FBR2lGLFNBQVMsQ0FBQy9DO1lBQ3RDO1lBQ0EsSUFBSTRELFFBQVEsSUFBSXRHO1lBQ2hCaUQsc0JBQXNCcEIsT0FBTyxDQUFDLFNBQVVzQyxZQUFZO2dCQUNsREEsYUFBYXNCLFNBQVM7Z0JBQ3RCYSxNQUFNQyxHQUFHLENBQUNwQztZQUNaO1lBRUEsT0FBT21DO1FBQ1Q7SUFDRjtJQUVBLE9BQU9ySDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VydmVyLWFjdGlvbi8uL25vZGVfbW9kdWxlcy9yeC9kaXN0L3J4LmpvaW5wYXR0ZXJucy5qcz9jOWZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0LCBBbGwgcmlnaHRzIHJlc2VydmVkLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuICB2YXIgb2JqZWN0VHlwZXMgPSB7XG4gICAgJ2Z1bmN0aW9uJzogdHJ1ZSxcbiAgICAnb2JqZWN0JzogdHJ1ZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrR2xvYmFsKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5PYmplY3QgPT09IE9iamVjdCkgPyB2YWx1ZSA6IG51bGw7XG4gIH1cblxuICB2YXIgZnJlZUV4cG9ydHMgPSAob2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUpID8gZXhwb3J0cyA6IG51bGw7XG4gIHZhciBmcmVlTW9kdWxlID0gKG9iamVjdFR5cGVzW3R5cGVvZiBtb2R1bGVdICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlKSA/IG1vZHVsZSA6IG51bGw7XG4gIHZhciBmcmVlR2xvYmFsID0gY2hlY2tHbG9iYWwoZnJlZUV4cG9ydHMgJiYgZnJlZU1vZHVsZSAmJiB0eXBlb2YgZ2xvYmFsID09PSAnb2JqZWN0JyAmJiBnbG9iYWwpO1xuICB2YXIgZnJlZVNlbGYgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2Ygc2VsZl0gJiYgc2VsZik7XG4gIHZhciBmcmVlV2luZG93ID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93KTtcbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSAoZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzKSA/IGZyZWVFeHBvcnRzIDogbnVsbDtcbiAgdmFyIHRoaXNHbG9iYWwgPSBjaGVja0dsb2JhbChvYmplY3RUeXBlc1t0eXBlb2YgdGhpc10gJiYgdGhpcyk7XG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCAoKGZyZWVXaW5kb3cgIT09ICh0aGlzR2xvYmFsICYmIHRoaXNHbG9iYWwud2luZG93KSkgJiYgZnJlZVdpbmRvdykgfHwgZnJlZVNlbGYgfHwgdGhpc0dsb2JhbCB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8vIEJlY2F1c2Ugb2YgYnVpbGQgb3B0aW1pemVyc1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnLi9yeCddLCBmdW5jdGlvbiAoUngsIGV4cG9ydHMpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHJvb3QsIGV4cG9ydHMsIFJ4KTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJvb3QsIG1vZHVsZS5leHBvcnRzLCByZXF1aXJlKCcuL3J4JykpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuUnggPSBmYWN0b3J5KHJvb3QsIHt9LCByb290LlJ4KTtcbiAgfVxufS5jYWxsKHRoaXMsIGZ1bmN0aW9uIChyb290LCBleHAsIFJ4LCB1bmRlZmluZWQpIHtcblxuICAvLyBBbGlhc2VzXG4gIHZhciBPYnNlcnZhYmxlID0gUnguT2JzZXJ2YWJsZSxcbiAgICBvYnNlcnZhYmxlUHJvdG8gPSBPYnNlcnZhYmxlLnByb3RvdHlwZSxcbiAgICBBbm9ueW1vdXNPYnNlcnZhYmxlID0gUnguQW5vbnltb3VzT2JzZXJ2YWJsZSxcbiAgICBvYnNlcnZhYmxlVGhyb3cgPSBPYnNlcnZhYmxlLnRocm93RXJyb3IsXG4gICAgb2JzZXJ2ZXJDcmVhdGUgPSBSeC5PYnNlcnZlci5jcmVhdGUsXG4gICAgU2luZ2xlQXNzaWdubWVudERpc3Bvc2FibGUgPSBSeC5TaW5nbGVBc3NpZ25tZW50RGlzcG9zYWJsZSxcbiAgICBDb21wb3NpdGVEaXNwb3NhYmxlID0gUnguQ29tcG9zaXRlRGlzcG9zYWJsZSxcbiAgICBBYnN0cmFjdE9ic2VydmVyID0gUnguaW50ZXJuYWxzLkFic3RyYWN0T2JzZXJ2ZXIsXG4gICAgbm9vcCA9IFJ4LmhlbHBlcnMubm9vcCxcbiAgICBpbmhlcml0cyA9IFJ4LmludGVybmFscy5pbmhlcml0cyxcbiAgICBpc0Z1bmN0aW9uID0gUnguaGVscGVycy5pc0Z1bmN0aW9uO1xuXG4gIHZhciBlcnJvck9iaiA9IHtlOiB7fX07XG4gIFxuICBmdW5jdGlvbiB0cnlDYXRjaGVyR2VuKHRyeUNhdGNoVGFyZ2V0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHRyeUNhdGNoZXIoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHJ5Q2F0Y2hUYXJnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JPYmouZSA9IGU7XG4gICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIHRyeUNhdGNoID0gUnguaW50ZXJuYWxzLnRyeUNhdGNoID0gZnVuY3Rpb24gdHJ5Q2F0Y2goZm4pIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZuIG11c3QgYmUgYSBmdW5jdGlvbicpOyB9XG4gICAgcmV0dXJuIHRyeUNhdGNoZXJHZW4oZm4pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRocm93ZXIoZSkge1xuICAgIHRocm93IGU7XG4gIH1cblxuICB2YXIgTWFwID0gcm9vdC5NYXAgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgfVxuXG4gICAgTWFwLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgaWYgKGkgPT09IC0xKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgdGhpcy5fdmFsdWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX2tleXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5zaXplLS07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgcmV0dXJuIGkgPT09IC0xID8gdW5kZWZpbmVkIDogdGhpcy5fdmFsdWVzW2ldO1xuICAgIH07XG5cbiAgICBNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgaSA9IHRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgTWFwLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNiLCB0aGlzQXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgICAgIGNiLmNhbGwodGhpc0FyZywgdGhpcy5fdmFsdWVzW2ldLCB0aGlzLl9rZXlzW2ldKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIE1hcDtcbiAgfSgpKTtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIFJlcHJlc2VudHMgYSBqb2luIHBhdHRlcm4gb3ZlciBvYnNlcnZhYmxlIHNlcXVlbmNlcy5cbiAgICovXG4gIGZ1bmN0aW9uIFBhdHRlcm4ocGF0dGVybnMpIHtcbiAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnM7XG4gIH1cblxuICAvKipcbiAgICogIENyZWF0ZXMgYSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyB0aGUgY3VycmVudCBwbGFuIG1hdGNoZXMgYW5kIHdoZW4gdGhlIHNwZWNpZmllZCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBoYXMgYW4gYXZhaWxhYmxlIHZhbHVlLlxuICAgKiAgQHBhcmFtIG90aGVyIE9ic2VydmFibGUgc2VxdWVuY2UgdG8gbWF0Y2ggaW4gYWRkaXRpb24gdG8gdGhlIGN1cnJlbnQgcGF0dGVybi5cbiAgICogIEByZXR1cm4ge1BhdHRlcm59IFBhdHRlcm4gb2JqZWN0IHRoYXQgbWF0Y2hlcyB3aGVuIGFsbCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbiB0aGUgcGF0dGVybiBoYXZlIGFuIGF2YWlsYWJsZSB2YWx1ZS5cbiAgICovXG4gIFBhdHRlcm4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgIHJldHVybiBuZXcgUGF0dGVybih0aGlzLnBhdHRlcm5zLmNvbmNhdChvdGhlcikpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAgTWF0Y2hlcyB3aGVuIGFsbCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBpbiB0aGUgcGF0dGVybiAoc3BlY2lmaWVkIHVzaW5nIGEgY2hhaW4gb2YgYW5kIG9wZXJhdG9ycykgaGF2ZSBhbiBhdmFpbGFibGUgdmFsdWUgYW5kIHByb2plY3RzIHRoZSB2YWx1ZXMuXG4gICAqICBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciBTZWxlY3RvciB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aXRoIGF2YWlsYWJsZSB2YWx1ZXMgZnJvbSB0aGUgc291cmNlIHNlcXVlbmNlcywgaW4gdGhlIHNhbWUgb3JkZXIgb2YgdGhlIHNlcXVlbmNlcyBpbiB0aGUgcGF0dGVybi5cbiAgICogIEByZXR1cm4ge1BsYW59IFBsYW4gdGhhdCBwcm9kdWNlcyB0aGUgcHJvamVjdGVkIHZhbHVlcywgdG8gYmUgZmVkICh3aXRoIG90aGVyIHBsYW5zKSB0byB0aGUgd2hlbiBvcGVyYXRvci5cbiAgICovXG4gIFBhdHRlcm4ucHJvdG90eXBlLnRoZW5EbyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgUGxhbih0aGlzLCBzZWxlY3Rvcik7XG4gIH07XG5cbiAgZnVuY3Rpb24gUGxhbihleHByZXNzaW9uLCBzZWxlY3Rvcikge1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlT25FcnJvcihvKSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyBvLm9uRXJyb3IoZSk7IH07IH1cbiAgZnVuY3Rpb24gaGFuZGxlT25OZXh0KHNlbGYsIG9ic2VydmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uTmV4dCAoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2goc2VsZi5zZWxlY3RvcikuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7IHJldHVybiBvYnNlcnZlci5vbkVycm9yKHJlc3VsdC5lKTsgfVxuICAgICAgb2JzZXJ2ZXIub25OZXh0KHJlc3VsdCk7XG4gICAgfTtcbiAgfVxuXG4gIFBsYW4ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGV4dGVybmFsU3Vic2NyaXB0aW9ucywgb2JzZXJ2ZXIsIGRlYWN0aXZhdGUpIHtcbiAgICB2YXIgam9pbk9ic2VydmVycyA9IFtdLCBlcnJIYW5kbGVyID0gaGFuZGxlT25FcnJvcihvYnNlcnZlcik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuZXhwcmVzc2lvbi5wYXR0ZXJucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgam9pbk9ic2VydmVycy5wdXNoKHBsYW5DcmVhdGVPYnNlcnZlcihleHRlcm5hbFN1YnNjcmlwdGlvbnMsIHRoaXMuZXhwcmVzc2lvbi5wYXR0ZXJuc1tpXSwgZXJySGFuZGxlcikpO1xuICAgIH1cbiAgICB2YXIgYWN0aXZlUGxhbiA9IG5ldyBBY3RpdmVQbGFuKGpvaW5PYnNlcnZlcnMsIGhhbmRsZU9uTmV4dCh0aGlzLCBvYnNlcnZlciksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gam9pbk9ic2VydmVycy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgam9pbk9ic2VydmVyc1tqXS5yZW1vdmVBY3RpdmVQbGFuKGFjdGl2ZVBsYW4pO1xuICAgICAgfVxuICAgICAgZGVhY3RpdmF0ZShhY3RpdmVQbGFuKTtcbiAgICB9KTtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBqb2luT2JzZXJ2ZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBqb2luT2JzZXJ2ZXJzW2ldLmFkZEFjdGl2ZVBsYW4oYWN0aXZlUGxhbik7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVQbGFuO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBsYW5DcmVhdGVPYnNlcnZlcihleHRlcm5hbFN1YnNjcmlwdGlvbnMsIG9ic2VydmFibGUsIG9uRXJyb3IpIHtcbiAgICB2YXIgZW50cnkgPSBleHRlcm5hbFN1YnNjcmlwdGlvbnMuZ2V0KG9ic2VydmFibGUpO1xuICAgIGlmICghZW50cnkpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBKb2luT2JzZXJ2ZXIob2JzZXJ2YWJsZSwgb25FcnJvcik7XG4gICAgICBleHRlcm5hbFN1YnNjcmlwdGlvbnMuc2V0KG9ic2VydmFibGUsIG9ic2VydmVyKTtcbiAgICAgIHJldHVybiBvYnNlcnZlcjtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJ5O1xuICB9XG5cbiAgZnVuY3Rpb24gQWN0aXZlUGxhbihqb2luT2JzZXJ2ZXJBcnJheSwgb25OZXh0LCBvbkNvbXBsZXRlZCkge1xuICAgIHRoaXMuam9pbk9ic2VydmVyQXJyYXkgPSBqb2luT2JzZXJ2ZXJBcnJheTtcbiAgICB0aGlzLm9uTmV4dCA9IG9uTmV4dDtcbiAgICB0aGlzLm9uQ29tcGxldGVkID0gb25Db21wbGV0ZWQ7XG4gICAgdGhpcy5qb2luT2JzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmpvaW5PYnNlcnZlckFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgam9pbk9ic2VydmVyID0gdGhpcy5qb2luT2JzZXJ2ZXJBcnJheVtpXTtcbiAgICAgIHRoaXMuam9pbk9ic2VydmVycy5zZXQoam9pbk9ic2VydmVyLCBqb2luT2JzZXJ2ZXIpO1xuICAgIH1cbiAgfVxuXG4gIEFjdGl2ZVBsYW4ucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5qb2luT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKHYpIHsgdi5xdWV1ZS5zaGlmdCgpOyB9KTtcbiAgfTtcblxuICBBY3RpdmVQbGFuLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSwgbGVuLCBoYXNWYWx1ZXMgPSB0cnVlO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHRoaXMuam9pbk9ic2VydmVyQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmpvaW5PYnNlcnZlckFycmF5W2ldLnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBoYXNWYWx1ZXMgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNWYWx1ZXMpIHtcbiAgICAgIHZhciBmaXJzdFZhbHVlcyA9IFtdLFxuICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLmpvaW5PYnNlcnZlckFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZpcnN0VmFsdWVzLnB1c2godGhpcy5qb2luT2JzZXJ2ZXJBcnJheVtpXS5xdWV1ZVswXSk7XG4gICAgICAgIHRoaXMuam9pbk9ic2VydmVyQXJyYXlbaV0ucXVldWVbMF0ua2luZCA9PT0gJ0MnICYmIChpc0NvbXBsZXRlZCA9IHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ29tcGxldGVkKSB7XG4gICAgICAgIHRoaXMub25Db21wbGV0ZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVxdWV1ZSgpO1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGZpcnN0VmFsdWVzLmxlbmd0aDsgaSA8IGZpcnN0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2goZmlyc3RWYWx1ZXNbaV0udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25OZXh0LmFwcGx5KHRoaXMsIHZhbHVlcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBKb2luT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKF9fc3VwZXJfXykge1xuICAgIGluaGVyaXRzKEpvaW5PYnNlcnZlciwgX19zdXBlcl9fKTtcblxuICAgIGZ1bmN0aW9uIEpvaW5PYnNlcnZlcihzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICAgIF9fc3VwZXJfXy5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5hY3RpdmVQbGFucyA9IFtdO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBuZXcgU2luZ2xlQXNzaWdubWVudERpc3Bvc2FibGUoKTtcbiAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBKb2luT2JzZXJ2ZXJQcm90b3R5cGUgPSBKb2luT2JzZXJ2ZXIucHJvdG90eXBlO1xuXG4gICAgSm9pbk9ic2VydmVyUHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uLmtpbmQgPT09ICdFJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLm9uRXJyb3Iobm90aWZpY2F0aW9uLmVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1ZXVlLnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICAgICAgdmFyIGFjdGl2ZVBsYW5zID0gdGhpcy5hY3RpdmVQbGFucy5zbGljZSgwKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFjdGl2ZVBsYW5zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgYWN0aXZlUGxhbnNbaV0ubWF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBKb2luT2JzZXJ2ZXJQcm90b3R5cGUuZXJyb3IgPSBub29wO1xuICAgIEpvaW5PYnNlcnZlclByb3RvdHlwZS5jb21wbGV0ZWQgPSBub29wO1xuXG4gICAgSm9pbk9ic2VydmVyUHJvdG90eXBlLmFkZEFjdGl2ZVBsYW4gPSBmdW5jdGlvbiAoYWN0aXZlUGxhbikge1xuICAgICAgdGhpcy5hY3RpdmVQbGFucy5wdXNoKGFjdGl2ZVBsYW4pO1xuICAgIH07XG5cbiAgICBKb2luT2JzZXJ2ZXJQcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uc2V0RGlzcG9zYWJsZSh0aGlzLnNvdXJjZS5tYXRlcmlhbGl6ZSgpLnN1YnNjcmliZSh0aGlzKSk7XG4gICAgfTtcblxuICAgIEpvaW5PYnNlcnZlclByb3RvdHlwZS5yZW1vdmVBY3RpdmVQbGFuID0gZnVuY3Rpb24gKGFjdGl2ZVBsYW4pIHtcbiAgICAgIHRoaXMuYWN0aXZlUGxhbnMuc3BsaWNlKHRoaXMuYWN0aXZlUGxhbnMuaW5kZXhPZihhY3RpdmVQbGFuKSwgMSk7XG4gICAgICB0aGlzLmFjdGl2ZVBsYW5zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmRpc3Bvc2UoKTtcbiAgICB9O1xuXG4gICAgSm9pbk9ic2VydmVyUHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfX3N1cGVyX18ucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEpvaW5PYnNlcnZlcjtcbiAgfSAoQWJzdHJhY3RPYnNlcnZlcikpO1xuXG4gIC8qKlxuICAgKiAgQ3JlYXRlcyBhIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHdoZW4gYm90aCBvYnNlcnZhYmxlIHNlcXVlbmNlcyBoYXZlIGFuIGF2YWlsYWJsZSB2YWx1ZS5cbiAgICpcbiAgICogIEBwYXJhbSByaWdodCBPYnNlcnZhYmxlIHNlcXVlbmNlIHRvIG1hdGNoIHdpdGggdGhlIGN1cnJlbnQgc2VxdWVuY2UuXG4gICAqICBAcmV0dXJuIHtQYXR0ZXJufSBQYXR0ZXJuIG9iamVjdCB0aGF0IG1hdGNoZXMgd2hlbiBib3RoIG9ic2VydmFibGUgc2VxdWVuY2VzIGhhdmUgYW4gYXZhaWxhYmxlIHZhbHVlLlxuICAgKi9cbiAgb2JzZXJ2YWJsZVByb3RvLmFuZCA9IGZ1bmN0aW9uIChyaWdodCkge1xuICAgIHJldHVybiBuZXcgUGF0dGVybihbdGhpcywgcmlnaHRdKTtcbiAgfTtcblxuICAvKipcbiAgICogIE1hdGNoZXMgd2hlbiB0aGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZSBoYXMgYW4gYXZhaWxhYmxlIHZhbHVlIGFuZCBwcm9qZWN0cyB0aGUgdmFsdWUuXG4gICAqXG4gICAqICBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciBTZWxlY3RvciB0aGF0IHdpbGwgYmUgaW52b2tlZCBmb3IgdmFsdWVzIGluIHRoZSBzb3VyY2Ugc2VxdWVuY2UuXG4gICAqICBAcmV0dXJucyB7UGxhbn0gUGxhbiB0aGF0IHByb2R1Y2VzIHRoZSBwcm9qZWN0ZWQgdmFsdWVzLCB0byBiZSBmZWQgKHdpdGggb3RoZXIgcGxhbnMpIHRvIHRoZSB3aGVuIG9wZXJhdG9yLlxuICAgKi9cbiAgb2JzZXJ2YWJsZVByb3RvLnRoZW5EbyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgUGF0dGVybihbdGhpc10pLnRoZW5EbyhzZWxlY3Rvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICBKb2lucyB0b2dldGhlciB0aGUgcmVzdWx0cyBmcm9tIHNldmVyYWwgcGF0dGVybnMuXG4gICAqXG4gICAqICBAcGFyYW0gcGxhbnMgQSBzZXJpZXMgb2YgcGxhbnMgKHNwZWNpZmllZCBhcyBhbiBBcnJheSBvZiBhcyBhIHNlcmllcyBvZiBhcmd1bWVudHMpIGNyZWF0ZWQgYnkgdXNlIG9mIHRoZSBUaGVuIG9wZXJhdG9yIG9uIHBhdHRlcm5zLlxuICAgKiAgQHJldHVybnMge09ic2VydmFibGV9IE9ic2VydmFibGUgc2VxdWVuY2Ugd2l0aCB0aGUgcmVzdWx0cyBmb3JtIG1hdGNoaW5nIHNldmVyYWwgcGF0dGVybnMuXG4gICAqL1xuICBPYnNlcnZhYmxlLndoZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsYW5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgIHBsYW5zID0gYXJndW1lbnRzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGFucyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7IHBsYW5zW2ldID0gYXJndW1lbnRzW2ldOyB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQW5vbnltb3VzT2JzZXJ2YWJsZShmdW5jdGlvbiAobykge1xuICAgICAgdmFyIGFjdGl2ZVBsYW5zID0gW10sXG4gICAgICAgICAgZXh0ZXJuYWxTdWJzY3JpcHRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgdmFyIG91dE9ic2VydmVyID0gb2JzZXJ2ZXJDcmVhdGUoXG4gICAgICAgIGZ1bmN0aW9uICh4KSB7IG8ub25OZXh0KHgpOyB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgZXh0ZXJuYWxTdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHYpIHsgdi5vbkVycm9yKGVycik7IH0pO1xuICAgICAgICAgIG8ub25FcnJvcihlcnIpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoeCkgeyBvLm9uQ29tcGxldGVkKCk7IH1cbiAgICAgICk7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGxhbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBhY3RpdmVQbGFucy5wdXNoKHBsYW5zW2ldLmFjdGl2YXRlKGV4dGVybmFsU3Vic2NyaXB0aW9ucywgb3V0T2JzZXJ2ZXIsIGZ1bmN0aW9uIChhY3RpdmVQbGFuKSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gYWN0aXZlUGxhbnMuaW5kZXhPZihhY3RpdmVQbGFuKTtcbiAgICAgICAgICAgIGFjdGl2ZVBsYW5zLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgYWN0aXZlUGxhbnMubGVuZ3RoID09PSAwICYmIG8ub25Db21wbGV0ZWQoKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGVUaHJvdyhlKS5zdWJzY3JpYmUobyk7XG4gICAgICB9XG4gICAgICB2YXIgZ3JvdXAgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgICAgZXh0ZXJuYWxTdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKGpvaW5PYnNlcnZlcikge1xuICAgICAgICBqb2luT2JzZXJ2ZXIuc3Vic2NyaWJlKCk7XG4gICAgICAgIGdyb3VwLmFkZChqb2luT2JzZXJ2ZXIpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUng7XG59KSk7XG4iXSwibmFtZXMiOlsiZmFjdG9yeSIsIm9iamVjdFR5cGVzIiwiY2hlY2tHbG9iYWwiLCJ2YWx1ZSIsIk9iamVjdCIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJmcmVlV2luZG93Iiwid2luZG93IiwibW9kdWxlRXhwb3J0cyIsInRoaXNHbG9iYWwiLCJyb290IiwiRnVuY3Rpb24iLCJkZWZpbmUiLCJhbWQiLCJSeCIsInJlcXVpcmUiLCJjYWxsIiwiZXhwIiwidW5kZWZpbmVkIiwiT2JzZXJ2YWJsZSIsIm9ic2VydmFibGVQcm90byIsInByb3RvdHlwZSIsIkFub255bW91c09ic2VydmFibGUiLCJvYnNlcnZhYmxlVGhyb3ciLCJ0aHJvd0Vycm9yIiwib2JzZXJ2ZXJDcmVhdGUiLCJPYnNlcnZlciIsImNyZWF0ZSIsIlNpbmdsZUFzc2lnbm1lbnREaXNwb3NhYmxlIiwiQ29tcG9zaXRlRGlzcG9zYWJsZSIsIkFic3RyYWN0T2JzZXJ2ZXIiLCJpbnRlcm5hbHMiLCJub29wIiwiaGVscGVycyIsImluaGVyaXRzIiwiaXNGdW5jdGlvbiIsImVycm9yT2JqIiwiZSIsInRyeUNhdGNoZXJHZW4iLCJ0cnlDYXRjaFRhcmdldCIsInRyeUNhdGNoZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsInRyeUNhdGNoIiwiZm4iLCJUeXBlRXJyb3IiLCJ0aHJvd2VyIiwiTWFwIiwic2l6ZSIsIl92YWx1ZXMiLCJfa2V5cyIsImtleSIsImkiLCJpbmRleE9mIiwic3BsaWNlIiwiZ2V0Iiwic2V0IiwicHVzaCIsImZvckVhY2giLCJjYiIsInRoaXNBcmciLCJQYXR0ZXJuIiwicGF0dGVybnMiLCJhbmQiLCJvdGhlciIsImNvbmNhdCIsInRoZW5EbyIsInNlbGVjdG9yIiwiUGxhbiIsImV4cHJlc3Npb24iLCJoYW5kbGVPbkVycm9yIiwibyIsIm9uRXJyb3IiLCJoYW5kbGVPbk5leHQiLCJvYnNlcnZlciIsIm9uTmV4dCIsInJlc3VsdCIsImFjdGl2YXRlIiwiZXh0ZXJuYWxTdWJzY3JpcHRpb25zIiwiZGVhY3RpdmF0ZSIsImpvaW5PYnNlcnZlcnMiLCJlcnJIYW5kbGVyIiwibGVuIiwibGVuZ3RoIiwicGxhbkNyZWF0ZU9ic2VydmVyIiwiYWN0aXZlUGxhbiIsIkFjdGl2ZVBsYW4iLCJqIiwiamxlbiIsInJlbW92ZUFjdGl2ZVBsYW4iLCJhZGRBY3RpdmVQbGFuIiwib2JzZXJ2YWJsZSIsImVudHJ5IiwiSm9pbk9ic2VydmVyIiwiam9pbk9ic2VydmVyQXJyYXkiLCJvbkNvbXBsZXRlZCIsImpvaW5PYnNlcnZlciIsImRlcXVldWUiLCJ2IiwicXVldWUiLCJzaGlmdCIsIm1hdGNoIiwiaGFzVmFsdWVzIiwiZmlyc3RWYWx1ZXMiLCJpc0NvbXBsZXRlZCIsImtpbmQiLCJ2YWx1ZXMiLCJfX3N1cGVyX18iLCJzb3VyY2UiLCJhY3RpdmVQbGFucyIsInN1YnNjcmlwdGlvbiIsImlzRGlzcG9zZWQiLCJKb2luT2JzZXJ2ZXJQcm90b3R5cGUiLCJuZXh0Iiwibm90aWZpY2F0aW9uIiwiZXJyb3IiLCJzbGljZSIsImNvbXBsZXRlZCIsInN1YnNjcmliZSIsInNldERpc3Bvc2FibGUiLCJtYXRlcmlhbGl6ZSIsImRpc3Bvc2UiLCJyaWdodCIsIndoZW4iLCJwbGFucyIsIkFycmF5IiwiaXNBcnJheSIsIm91dE9ic2VydmVyIiwieCIsImVyciIsImlkeCIsImdyb3VwIiwiYWRkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.joinpatterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.js":
/*!************************************!*\
  !*** ./node_modules/rx/dist/rx.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n;\n(function(undefined) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    var Rx = {\n        internals: {},\n        config: {\n            Promise: root.Promise\n        },\n        helpers: {}\n    };\n    // Defaults\n    var noop = Rx.helpers.noop = function() {}, identity = Rx.helpers.identity = function(x) {\n        return x;\n    }, defaultNow = Rx.helpers.defaultNow = Date.now, defaultComparer = Rx.helpers.defaultComparer = function(x, y) {\n        return isEqual(x, y);\n    }, defaultSubComparer = Rx.helpers.defaultSubComparer = function(x, y) {\n        return x > y ? 1 : x < y ? -1 : 0;\n    }, defaultKeySerializer = Rx.helpers.defaultKeySerializer = function(x) {\n        return x.toString();\n    }, defaultError = Rx.helpers.defaultError = function(err) {\n        throw err;\n    }, isPromise = Rx.helpers.isPromise = function(p) {\n        return !!p && typeof p.subscribe !== \"function\" && typeof p.then === \"function\";\n    }, isFunction = Rx.helpers.isFunction = function() {\n        var isFn = function(value) {\n            return typeof value == \"function\" || false;\n        };\n        // fallback for older versions of Chrome and Safari\n        if (isFn(/x/)) {\n            isFn = function(value) {\n                return typeof value == \"function\" && toString.call(value) == \"[object Function]\";\n            };\n        }\n        return isFn;\n    }();\n    function cloneArray(arr) {\n        for(var a = [], i = 0, len = arr.length; i < len; i++){\n            a.push(arr[i]);\n        }\n        return a;\n    }\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    Rx.config.longStackSupport = false;\n    var hasStacks = false, stacks = tryCatch(function() {\n        throw new Error();\n    })();\n    hasStacks = !!stacks.e && !!stacks.e.stack;\n    // All code after this point will be filtered from stack traces reported by RxJS\n    var rStartingLine = captureLine(), rFileName;\n    var STACK_JUMP_SEPARATOR = \"From previous event:\";\n    function makeStackTraceLong(error, observable) {\n        // If possible, transform the error stack trace by removing Node and RxJS\n        // cruft, then concatenating with the stack trace of `observable`.\n        if (hasStacks && observable.stack && typeof error === \"object\" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {\n            var stacks = [];\n            for(var o = observable; !!o; o = o.source){\n                if (o.stack) {\n                    stacks.unshift(o.stack);\n                }\n            }\n            stacks.unshift(error.stack);\n            var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n            error.stack = filterStackString(concatedStacks);\n        }\n    }\n    function filterStackString(stackString) {\n        var lines = stackString.split(\"\\n\"), desiredLines = [];\n        for(var i = 0, len = lines.length; i < len; i++){\n            var line = lines[i];\n            if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n                desiredLines.push(line);\n            }\n        }\n        return desiredLines.join(\"\\n\");\n    }\n    function isInternalFrame(stackLine) {\n        var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n        if (!fileNameAndLineNumber) {\n            return false;\n        }\n        var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];\n        return fileName === rFileName && lineNumber >= rStartingLine && lineNumber <= rEndingLine;\n    }\n    function isNodeFrame(stackLine) {\n        return stackLine.indexOf(\"(module.js:\") !== -1 || stackLine.indexOf(\"(node.js:\") !== -1;\n    }\n    function captureLine() {\n        if (!hasStacks) {\n            return;\n        }\n        try {\n            throw new Error();\n        } catch (e) {\n            var lines = e.stack.split(\"\\n\");\n            var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n            var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n            if (!fileNameAndLineNumber) {\n                return;\n            }\n            rFileName = fileNameAndLineNumber[0];\n            return fileNameAndLineNumber[1];\n        }\n    }\n    function getFileNameAndLineNumber(stackLine) {\n        // Named functions: 'at functionName (filename:lineNumber:columnNumber)'\n        var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n        if (attempt1) {\n            return [\n                attempt1[1],\n                Number(attempt1[2])\n            ];\n        }\n        // Anonymous functions: 'at filename:lineNumber:columnNumber'\n        var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n        if (attempt2) {\n            return [\n                attempt2[1],\n                Number(attempt2[2])\n            ];\n        }\n        // Firefox style: 'function@filename:lineNumber or @filename:lineNumber'\n        var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n        if (attempt3) {\n            return [\n                attempt3[1],\n                Number(attempt3[2])\n            ];\n        }\n    }\n    var EmptyError = Rx.EmptyError = function() {\n        this.message = \"Sequence contains no elements.\";\n        Error.call(this);\n    };\n    EmptyError.prototype = Object.create(Error.prototype);\n    EmptyError.prototype.name = \"EmptyError\";\n    var ObjectDisposedError = Rx.ObjectDisposedError = function() {\n        this.message = \"Object has been disposed\";\n        Error.call(this);\n    };\n    ObjectDisposedError.prototype = Object.create(Error.prototype);\n    ObjectDisposedError.prototype.name = \"ObjectDisposedError\";\n    var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function() {\n        this.message = \"Argument out of range\";\n        Error.call(this);\n    };\n    ArgumentOutOfRangeError.prototype = Object.create(Error.prototype);\n    ArgumentOutOfRangeError.prototype.name = \"ArgumentOutOfRangeError\";\n    var NotSupportedError = Rx.NotSupportedError = function(message) {\n        this.message = message || \"This operation is not supported\";\n        Error.call(this);\n    };\n    NotSupportedError.prototype = Object.create(Error.prototype);\n    NotSupportedError.prototype.name = \"NotSupportedError\";\n    var NotImplementedError = Rx.NotImplementedError = function(message) {\n        this.message = message || \"This operation is not implemented\";\n        Error.call(this);\n    };\n    NotImplementedError.prototype = Object.create(Error.prototype);\n    NotImplementedError.prototype.name = \"NotImplementedError\";\n    var notImplemented = Rx.helpers.notImplemented = function() {\n        throw new NotImplementedError();\n    };\n    var notSupported = Rx.helpers.notSupported = function() {\n        throw new NotSupportedError();\n    };\n    // Shim in iterator support\n    var $iterator$ = typeof Symbol === \"function\" && Symbol.iterator || \"_es6shim_iterator_\";\n    // Bug for mozilla version\n    if (root.Set && typeof new root.Set()[\"@@iterator\"] === \"function\") {\n        $iterator$ = \"@@iterator\";\n    }\n    var doneEnumerator = Rx.doneEnumerator = {\n        done: true,\n        value: undefined\n    };\n    var isIterable = Rx.helpers.isIterable = function(o) {\n        return o && o[$iterator$] !== undefined;\n    };\n    var isArrayLike = Rx.helpers.isArrayLike = function(o) {\n        return o && o.length !== undefined;\n    };\n    Rx.helpers.iterator = $iterator$;\n    var bindCallback = Rx.internals.bindCallback = function(func, thisArg, argCount) {\n        if (typeof thisArg === \"undefined\") {\n            return func;\n        }\n        switch(argCount){\n            case 0:\n                return function() {\n                    return func.call(thisArg);\n                };\n            case 1:\n                return function(arg) {\n                    return func.call(thisArg, arg);\n                };\n            case 2:\n                return function(value, index) {\n                    return func.call(thisArg, value, index);\n                };\n            case 3:\n                return function(value, index, collection) {\n                    return func.call(thisArg, value, index, collection);\n                };\n        }\n        return function() {\n            return func.apply(thisArg, arguments);\n        };\n    };\n    /** Used to determine if values are of the language type Object */ var dontEnums = [\n        \"toString\",\n        \"toLocaleString\",\n        \"valueOf\",\n        \"hasOwnProperty\",\n        \"isPrototypeOf\",\n        \"propertyIsEnumerable\",\n        \"constructor\"\n    ], dontEnumsLength = dontEnums.length;\n    var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", objectTag = \"[object Object]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", weakMapTag = \"[object WeakMap]\";\n    var arrayBufferTag = \"[object ArrayBuffer]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n    var objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, objToString = objectProto.toString, MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n    var keys = Object.keys || function() {\n        var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !({\n            toString: null\n        }).propertyIsEnumerable(\"toString\"), dontEnums = [\n            \"toString\",\n            \"toLocaleString\",\n            \"valueOf\",\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\",\n            \"constructor\"\n        ], dontEnumsLength = dontEnums.length;\n        return function(obj) {\n            if (typeof obj !== \"object\" && (typeof obj !== \"function\" || obj === null)) {\n                throw new TypeError(\"Object.keys called on non-object\");\n            }\n            var result = [], prop, i;\n            for(prop in obj){\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n            if (hasDontEnumBug) {\n                for(i = 0; i < dontEnumsLength; i++){\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n            return result;\n        };\n    }();\n    function equalObjects(object, other, equalFunc, isLoose, stackA, stackB) {\n        var objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;\n        if (objLength !== othLength && !isLoose) {\n            return false;\n        }\n        var index = objLength, key;\n        while(index--){\n            key = objProps[index];\n            if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {\n                return false;\n            }\n        }\n        var skipCtor = isLoose;\n        while(++index < objLength){\n            key = objProps[index];\n            var objValue = object[key], othValue = other[key], result;\n            if (!(result === undefined ? equalFunc(objValue, othValue, isLoose, stackA, stackB) : result)) {\n                return false;\n            }\n            skipCtor || (skipCtor = key === \"constructor\");\n        }\n        if (!skipCtor) {\n            var objCtor = object.constructor, othCtor = other.constructor;\n            if (objCtor !== othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor === \"function\" && objCtor instanceof objCtor && typeof othCtor === \"function\" && othCtor instanceof othCtor)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function equalByTag(object, other, tag) {\n        switch(tag){\n            case boolTag:\n            case dateTag:\n                return +object === +other;\n            case errorTag:\n                return object.name === other.name && object.message === other.message;\n            case numberTag:\n                return object !== +object ? other !== +other : object === +other;\n            case regexpTag:\n            case stringTag:\n                return object === other + \"\";\n        }\n        return false;\n    }\n    var isObject = Rx.internals.isObject = function(value) {\n        var type = typeof value;\n        return !!value && (type === \"object\" || type === \"function\");\n    };\n    function isObjectLike(value) {\n        return !!value && typeof value === \"object\";\n    }\n    function isLength(value) {\n        return typeof value === \"number\" && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;\n    }\n    var isHostObject = function() {\n        try {\n            Object({\n                \"toString\": 0\n            } + \"\");\n        } catch (e) {\n            return function() {\n                return false;\n            };\n        }\n        return function(value) {\n            return typeof value.toString !== \"function\" && typeof (value + \"\") === \"string\";\n        };\n    }();\n    function isTypedArray(value) {\n        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];\n    }\n    var isArray = Array.isArray || function(value) {\n        return isObjectLike(value) && isLength(value.length) && objToString.call(value) === arrayTag;\n    };\n    function arraySome(array, predicate) {\n        var index = -1, length = array.length;\n        while(++index < length){\n            if (predicate(array[index], index, array)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function equalArrays(array, other, equalFunc, isLoose, stackA, stackB) {\n        var index = -1, arrLength = array.length, othLength = other.length;\n        if (arrLength !== othLength && !(isLoose && othLength > arrLength)) {\n            return false;\n        }\n        // Ignore non-index properties.\n        while(++index < arrLength){\n            var arrValue = array[index], othValue = other[index], result;\n            if (result !== undefined) {\n                if (result) {\n                    continue;\n                }\n                return false;\n            }\n            // Recursively compare arrays (susceptible to call stack limits).\n            if (isLoose) {\n                if (!arraySome(other, function(othValue) {\n                    return arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB);\n                })) {\n                    return false;\n                }\n            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function baseIsEqualDeep(object, other, equalFunc, isLoose, stackA, stackB) {\n        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;\n        if (!objIsArr) {\n            objTag = objToString.call(object);\n            if (objTag === argsTag) {\n                objTag = objectTag;\n            } else if (objTag !== objectTag) {\n                objIsArr = isTypedArray(object);\n            }\n        }\n        if (!othIsArr) {\n            othTag = objToString.call(other);\n            if (othTag === argsTag) {\n                othTag = objectTag;\n            }\n        }\n        var objIsObj = objTag === objectTag && !isHostObject(object), othIsObj = othTag === objectTag && !isHostObject(other), isSameTag = objTag === othTag;\n        if (isSameTag && !(objIsArr || objIsObj)) {\n            return equalByTag(object, other, objTag);\n        }\n        if (!isLoose) {\n            var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n            if (objIsWrapped || othIsWrapped) {\n                return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, isLoose, stackA, stackB);\n            }\n        }\n        if (!isSameTag) {\n            return false;\n        }\n        // Assume cyclic values are equal.\n        // For more information on detecting circular references see https://es5.github.io/#JO.\n        stackA || (stackA = []);\n        stackB || (stackB = []);\n        var length = stackA.length;\n        while(length--){\n            if (stackA[length] === object) {\n                return stackB[length] === other;\n            }\n        }\n        // Add `object` and `other` to the stack of traversed objects.\n        stackA.push(object);\n        stackB.push(other);\n        var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, isLoose, stackA, stackB);\n        stackA.pop();\n        stackB.pop();\n        return result;\n    }\n    function baseIsEqual(value, other, isLoose, stackA, stackB) {\n        if (value === other) {\n            return true;\n        }\n        if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {\n            return value !== value && other !== other;\n        }\n        return baseIsEqualDeep(value, other, baseIsEqual, isLoose, stackA, stackB);\n    }\n    var isEqual = Rx.internals.isEqual = function(value, other) {\n        return baseIsEqual(value, other);\n    };\n    var hasProp = {}.hasOwnProperty, slice = Array.prototype.slice;\n    var inherits = Rx.internals.inherits = function(child, parent) {\n        function __() {\n            this.constructor = child;\n        }\n        __.prototype = parent.prototype;\n        child.prototype = new __();\n    };\n    var addProperties = Rx.internals.addProperties = function(obj) {\n        for(var sources = [], i = 1, len = arguments.length; i < len; i++){\n            sources.push(arguments[i]);\n        }\n        for(var idx = 0, ln = sources.length; idx < ln; idx++){\n            var source = sources[idx];\n            for(var prop in source){\n                obj[prop] = source[prop];\n            }\n        }\n    };\n    // Rx Utils\n    var addRef = Rx.internals.addRef = function(xs, r) {\n        return new AnonymousObservable(function(observer) {\n            return new BinaryDisposable(r.getDisposable(), xs.subscribe(observer));\n        });\n    };\n    function arrayInitialize(count, factory) {\n        var a = new Array(count);\n        for(var i = 0; i < count; i++){\n            a[i] = factory();\n        }\n        return a;\n    }\n    /**\n   * Represents a group of disposable resources that are disposed together.\n   * @constructor\n   */ var CompositeDisposable = Rx.CompositeDisposable = function() {\n        var args = [], i, len;\n        if (Array.isArray(arguments[0])) {\n            args = arguments[0];\n        } else {\n            len = arguments.length;\n            args = new Array(len);\n            for(i = 0; i < len; i++){\n                args[i] = arguments[i];\n            }\n        }\n        this.disposables = args;\n        this.isDisposed = false;\n        this.length = args.length;\n    };\n    var CompositeDisposablePrototype = CompositeDisposable.prototype;\n    /**\n   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.\n   * @param {Mixed} item Disposable to add.\n   */ CompositeDisposablePrototype.add = function(item) {\n        if (this.isDisposed) {\n            item.dispose();\n        } else {\n            this.disposables.push(item);\n            this.length++;\n        }\n    };\n    /**\n   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.\n   * @param {Mixed} item Disposable to remove.\n   * @returns {Boolean} true if found; false otherwise.\n   */ CompositeDisposablePrototype.remove = function(item) {\n        var shouldDispose = false;\n        if (!this.isDisposed) {\n            var idx = this.disposables.indexOf(item);\n            if (idx !== -1) {\n                shouldDispose = true;\n                this.disposables.splice(idx, 1);\n                this.length--;\n                item.dispose();\n            }\n        }\n        return shouldDispose;\n    };\n    /**\n   *  Disposes all disposables in the group and removes them from the group.\n   */ CompositeDisposablePrototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var len = this.disposables.length, currentDisposables = new Array(len);\n            for(var i = 0; i < len; i++){\n                currentDisposables[i] = this.disposables[i];\n            }\n            this.disposables = [];\n            this.length = 0;\n            for(i = 0; i < len; i++){\n                currentDisposables[i].dispose();\n            }\n        }\n    };\n    /**\n   * Provides a set of static methods for creating Disposables.\n   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.\n   */ var Disposable = Rx.Disposable = function(action) {\n        this.isDisposed = false;\n        this.action = action || noop;\n    };\n    /** Performs the task of cleaning up resources. */ Disposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.action();\n            this.isDisposed = true;\n        }\n    };\n    /**\n   * Creates a disposable object that invokes the specified action when disposed.\n   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.\n   * @return {Disposable} The disposable object that runs the given action upon disposal.\n   */ var disposableCreate = Disposable.create = function(action) {\n        return new Disposable(action);\n    };\n    /**\n   * Gets the disposable that does nothing when disposed.\n   */ var disposableEmpty = Disposable.empty = {\n        dispose: noop\n    };\n    /**\n   * Validates whether the given object is a disposable\n   * @param {Object} Object to test whether it has a dispose method\n   * @returns {Boolean} true if a disposable object, else false.\n   */ var isDisposable = Disposable.isDisposable = function(d) {\n        return d && isFunction(d.dispose);\n    };\n    var checkDisposed = Disposable.checkDisposed = function(disposable) {\n        if (disposable.isDisposed) {\n            throw new ObjectDisposedError();\n        }\n    };\n    var disposableFixup = Disposable._fixup = function(result) {\n        return isDisposable(result) ? result : disposableEmpty;\n    };\n    // Single assignment\n    var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = function() {\n        this.isDisposed = false;\n        this.current = null;\n    };\n    SingleAssignmentDisposable.prototype.getDisposable = function() {\n        return this.current;\n    };\n    SingleAssignmentDisposable.prototype.setDisposable = function(value) {\n        if (this.current) {\n            throw new Error(\"Disposable has already been assigned\");\n        }\n        var shouldDispose = this.isDisposed;\n        !shouldDispose && (this.current = value);\n        shouldDispose && value && value.dispose();\n    };\n    SingleAssignmentDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var old = this.current;\n            this.current = null;\n            old && old.dispose();\n        }\n    };\n    // Multiple assignment disposable\n    var SerialDisposable = Rx.SerialDisposable = function() {\n        this.isDisposed = false;\n        this.current = null;\n    };\n    SerialDisposable.prototype.getDisposable = function() {\n        return this.current;\n    };\n    SerialDisposable.prototype.setDisposable = function(value) {\n        var shouldDispose = this.isDisposed;\n        if (!shouldDispose) {\n            var old = this.current;\n            this.current = value;\n        }\n        old && old.dispose();\n        shouldDispose && value && value.dispose();\n    };\n    SerialDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var old = this.current;\n            this.current = null;\n        }\n        old && old.dispose();\n    };\n    var BinaryDisposable = Rx.BinaryDisposable = function(first, second) {\n        this._first = first;\n        this._second = second;\n        this.isDisposed = false;\n    };\n    BinaryDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            var old1 = this._first;\n            this._first = null;\n            old1 && old1.dispose();\n            var old2 = this._second;\n            this._second = null;\n            old2 && old2.dispose();\n        }\n    };\n    var NAryDisposable = Rx.NAryDisposable = function(disposables) {\n        this._disposables = disposables;\n        this.isDisposed = false;\n    };\n    NAryDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            for(var i = 0, len = this._disposables.length; i < len; i++){\n                this._disposables[i].dispose();\n            }\n            this._disposables.length = 0;\n        }\n    };\n    /**\n   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.\n   */ var RefCountDisposable = Rx.RefCountDisposable = function() {\n        function InnerDisposable(disposable) {\n            this.disposable = disposable;\n            this.disposable.count++;\n            this.isInnerDisposed = false;\n        }\n        InnerDisposable.prototype.dispose = function() {\n            if (!this.disposable.isDisposed && !this.isInnerDisposed) {\n                this.isInnerDisposed = true;\n                this.disposable.count--;\n                if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {\n                    this.disposable.isDisposed = true;\n                    this.disposable.underlyingDisposable.dispose();\n                }\n            }\n        };\n        /**\n     * Initializes a new instance of the RefCountDisposable with the specified disposable.\n     * @constructor\n     * @param {Disposable} disposable Underlying disposable.\n      */ function RefCountDisposable(disposable) {\n            this.underlyingDisposable = disposable;\n            this.isDisposed = false;\n            this.isPrimaryDisposed = false;\n            this.count = 0;\n        }\n        /**\n     * Disposes the underlying disposable only when all dependent disposables have been disposed\n     */ RefCountDisposable.prototype.dispose = function() {\n            if (!this.isDisposed && !this.isPrimaryDisposed) {\n                this.isPrimaryDisposed = true;\n                if (this.count === 0) {\n                    this.isDisposed = true;\n                    this.underlyingDisposable.dispose();\n                }\n            }\n        };\n        /**\n     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.\n     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.\n     */ RefCountDisposable.prototype.getDisposable = function() {\n            return this.isDisposed ? disposableEmpty : new InnerDisposable(this);\n        };\n        return RefCountDisposable;\n    }();\n    function ScheduledDisposable(scheduler, disposable) {\n        this.scheduler = scheduler;\n        this.disposable = disposable;\n        this.isDisposed = false;\n    }\n    function scheduleItem(s, self1) {\n        if (!self1.isDisposed) {\n            self1.isDisposed = true;\n            self1.disposable.dispose();\n        }\n    }\n    ScheduledDisposable.prototype.dispose = function() {\n        this.scheduler.schedule(this, scheduleItem);\n    };\n    var ScheduledItem = Rx.internals.ScheduledItem = function(scheduler, state, action, dueTime, comparer) {\n        this.scheduler = scheduler;\n        this.state = state;\n        this.action = action;\n        this.dueTime = dueTime;\n        this.comparer = comparer || defaultSubComparer;\n        this.disposable = new SingleAssignmentDisposable();\n    };\n    ScheduledItem.prototype.invoke = function() {\n        this.disposable.setDisposable(this.invokeCore());\n    };\n    ScheduledItem.prototype.compareTo = function(other) {\n        return this.comparer(this.dueTime, other.dueTime);\n    };\n    ScheduledItem.prototype.isCancelled = function() {\n        return this.disposable.isDisposed;\n    };\n    ScheduledItem.prototype.invokeCore = function() {\n        return disposableFixup(this.action(this.scheduler, this.state));\n    };\n    /** Provides a set of static properties to access commonly used schedulers. */ var Scheduler = Rx.Scheduler = function() {\n        function Scheduler() {}\n        /** Determines whether the given object is a scheduler */ Scheduler.isScheduler = function(s) {\n            return s instanceof Scheduler;\n        };\n        var schedulerProto = Scheduler.prototype;\n        /**\n   * Schedules an action to be executed.\n   * @param state State passed to the action to be executed.\n   * @param {Function} action Action to be executed.\n   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n   */ schedulerProto.schedule = function(state, action) {\n            throw new NotImplementedError();\n        };\n        /**\n   * Schedules an action to be executed after dueTime.\n   * @param state State passed to the action to be executed.\n   * @param {Function} action Action to be executed.\n   * @param {Number} dueTime Relative time after which to execute the action.\n   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n   */ schedulerProto.scheduleFuture = function(state, dueTime, action) {\n            var dt = dueTime;\n            dt instanceof Date && (dt = dt - this.now());\n            dt = Scheduler.normalize(dt);\n            if (dt === 0) {\n                return this.schedule(state, action);\n            }\n            return this._scheduleFuture(state, dt, action);\n        };\n        schedulerProto._scheduleFuture = function(state, dueTime, action) {\n            throw new NotImplementedError();\n        };\n        /** Gets the current time according to the local machine's system clock. */ Scheduler.now = defaultNow;\n        /** Gets the current time according to the local machine's system clock. */ Scheduler.prototype.now = defaultNow;\n        /**\n     * Normalizes the specified TimeSpan value to a positive value.\n     * @param {Number} timeSpan The time span value to normalize.\n     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0\n     */ Scheduler.normalize = function(timeSpan) {\n            timeSpan < 0 && (timeSpan = 0);\n            return timeSpan;\n        };\n        return Scheduler;\n    }();\n    var normalizeTime = Scheduler.normalize, isScheduler = Scheduler.isScheduler;\n    (function(schedulerProto) {\n        function invokeRecImmediate(scheduler, pair) {\n            var state = pair[0], action = pair[1], group = new CompositeDisposable();\n            action(state, innerAction);\n            return group;\n            function innerAction(state2) {\n                var isAdded = false, isDone = false;\n                var d = scheduler.schedule(state2, scheduleWork);\n                if (!isDone) {\n                    group.add(d);\n                    isAdded = true;\n                }\n                function scheduleWork(_, state3) {\n                    if (isAdded) {\n                        group.remove(d);\n                    } else {\n                        isDone = true;\n                    }\n                    action(state3, innerAction);\n                    return disposableEmpty;\n                }\n            }\n        }\n        function invokeRecDate(scheduler, pair) {\n            var state = pair[0], action = pair[1], group = new CompositeDisposable();\n            action(state, innerAction);\n            return group;\n            function innerAction(state2, dueTime1) {\n                var isAdded = false, isDone = false;\n                var d = scheduler.scheduleFuture(state2, dueTime1, scheduleWork);\n                if (!isDone) {\n                    group.add(d);\n                    isAdded = true;\n                }\n                function scheduleWork(_, state3) {\n                    if (isAdded) {\n                        group.remove(d);\n                    } else {\n                        isDone = true;\n                    }\n                    action(state3, innerAction);\n                    return disposableEmpty;\n                }\n            }\n        }\n        /**\n     * Schedules an action to be executed recursively.\n     * @param {Mixed} state State passed to the action to be executed.\n     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.\n     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n     */ schedulerProto.scheduleRecursive = function(state, action) {\n            return this.schedule([\n                state,\n                action\n            ], invokeRecImmediate);\n        };\n        /**\n     * Schedules an action to be executed recursively after a specified relative or absolute due time.\n     * @param {Mixed} state State passed to the action to be executed.\n     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.\n     * @param {Number | Date} dueTime Relative or absolute time after which to execute the action for the first time.\n     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n     */ schedulerProto.scheduleRecursiveFuture = function(state, dueTime, action) {\n            return this.scheduleFuture([\n                state,\n                action\n            ], dueTime, invokeRecDate);\n        };\n    })(Scheduler.prototype);\n    (function(schedulerProto) {\n        /**\n     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.\n     * @param {Mixed} state Initial state passed to the action upon the first iteration.\n     * @param {Number} period Period for running the work periodically.\n     * @param {Function} action Action to be executed, potentially updating the state.\n     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).\n     */ schedulerProto.schedulePeriodic = function(state, period, action) {\n            if (typeof root.setInterval === \"undefined\") {\n                throw new NotSupportedError();\n            }\n            period = normalizeTime(period);\n            var s = state, id = root.setInterval(function() {\n                s = action(s);\n            }, period);\n            return disposableCreate(function() {\n                root.clearInterval(id);\n            });\n        };\n    })(Scheduler.prototype);\n    (function(schedulerProto) {\n        /**\n     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.\n     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.\n     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.\n     */ schedulerProto.catchError = schedulerProto[\"catch\"] = function(handler) {\n            return new CatchScheduler(this, handler);\n        };\n    })(Scheduler.prototype);\n    var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = function() {\n        function createTick(self1) {\n            return function tick(command, recurse) {\n                recurse(0, self1._period);\n                var state = tryCatch(self1._action)(self1._state);\n                if (state === errorObj) {\n                    self1._cancel.dispose();\n                    thrower(state.e);\n                }\n                self1._state = state;\n            };\n        }\n        function SchedulePeriodicRecursive(scheduler, state, period, action) {\n            this._scheduler = scheduler;\n            this._state = state;\n            this._period = period;\n            this._action = action;\n        }\n        SchedulePeriodicRecursive.prototype.start = function() {\n            var d = new SingleAssignmentDisposable();\n            this._cancel = d;\n            d.setDisposable(this._scheduler.scheduleRecursiveFuture(0, this._period, createTick(this)));\n            return d;\n        };\n        return SchedulePeriodicRecursive;\n    }();\n    /** Gets a scheduler that schedules work immediately on the current thread. */ var ImmediateScheduler = function(__super__) {\n        inherits(ImmediateScheduler, __super__);\n        function ImmediateScheduler() {\n            __super__.call(this);\n        }\n        ImmediateScheduler.prototype.schedule = function(state, action) {\n            return disposableFixup(action(this, state));\n        };\n        return ImmediateScheduler;\n    }(Scheduler);\n    var immediateScheduler = Scheduler.immediate = new ImmediateScheduler();\n    /**\n   * Gets a scheduler that schedules work as soon as possible on the current thread.\n   */ var CurrentThreadScheduler = function(__super__) {\n        var queue;\n        function runTrampoline() {\n            while(queue.length > 0){\n                var item = queue.dequeue();\n                !item.isCancelled() && item.invoke();\n            }\n        }\n        inherits(CurrentThreadScheduler, __super__);\n        function CurrentThreadScheduler() {\n            __super__.call(this);\n        }\n        CurrentThreadScheduler.prototype.schedule = function(state, action) {\n            var si = new ScheduledItem(this, state, action, this.now());\n            if (!queue) {\n                queue = new PriorityQueue(4);\n                queue.enqueue(si);\n                var result = tryCatch(runTrampoline)();\n                queue = null;\n                if (result === errorObj) {\n                    thrower(result.e);\n                }\n            } else {\n                queue.enqueue(si);\n            }\n            return si.disposable;\n        };\n        CurrentThreadScheduler.prototype.scheduleRequired = function() {\n            return !queue;\n        };\n        return CurrentThreadScheduler;\n    }(Scheduler);\n    var currentThreadScheduler = Scheduler.currentThread = new CurrentThreadScheduler();\n    var scheduleMethod, clearMethod;\n    var localTimer = function() {\n        var localSetTimeout, localClearTimeout = noop;\n        if (!!root.setTimeout) {\n            localSetTimeout = root.setTimeout;\n            localClearTimeout = root.clearTimeout;\n        } else if (!!root.WScript) {\n            localSetTimeout = function(fn, time) {\n                root.WScript.Sleep(time);\n                fn();\n            };\n        } else {\n            throw new NotSupportedError();\n        }\n        return {\n            setTimeout: localSetTimeout,\n            clearTimeout: localClearTimeout\n        };\n    }();\n    var localSetTimeout = localTimer.setTimeout, localClearTimeout = localTimer.clearTimeout;\n    (function() {\n        var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;\n        clearMethod = function(handle) {\n            delete tasksByHandle[handle];\n        };\n        function runTask(handle) {\n            if (currentlyRunning) {\n                localSetTimeout(function() {\n                    runTask(handle);\n                }, 0);\n            } else {\n                var task = tasksByHandle[handle];\n                if (task) {\n                    currentlyRunning = true;\n                    var result = tryCatch(task)();\n                    clearMethod(handle);\n                    currentlyRunning = false;\n                    if (result === errorObj) {\n                        thrower(result.e);\n                    }\n                }\n            }\n        }\n        var reNative = new RegExp(\"^\" + String(toString).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\").replace(/toString| for [^\\]]+/g, \".*?\") + \"$\");\n        var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == \"function\" && !reNative.test(setImmediate) && setImmediate;\n        function postMessageSupported() {\n            // Ensure not in a worker\n            if (!root.postMessage || root.importScripts) {\n                return false;\n            }\n            var isAsync = false, oldHandler = root.onmessage;\n            // Test for async\n            root.onmessage = function() {\n                isAsync = true;\n            };\n            root.postMessage(\"\", \"*\");\n            root.onmessage = oldHandler;\n            return isAsync;\n        }\n        // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout\n        if (isFunction(setImmediate)) {\n            scheduleMethod = function(action) {\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                setImmediate(function() {\n                    runTask(id);\n                });\n                return id;\n            };\n        } else if (typeof process !== \"undefined\" && ({}).toString.call(process) === \"[object process]\") {\n            scheduleMethod = function(action) {\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                process.nextTick(function() {\n                    runTask(id);\n                });\n                return id;\n            };\n        } else if (postMessageSupported()) {\n            var MSG_PREFIX = \"ms.rx.schedule\" + Math.random();\n            var onGlobalPostMessage = function(event) {\n                // Only if we're a match to avoid any other global events\n                if (typeof event.data === \"string\" && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {\n                    runTask(event.data.substring(MSG_PREFIX.length));\n                }\n            };\n            root.addEventListener(\"message\", onGlobalPostMessage, false);\n            scheduleMethod = function(action) {\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                root.postMessage(MSG_PREFIX + id, \"*\");\n                return id;\n            };\n        } else if (!!root.MessageChannel) {\n            var channel = new root.MessageChannel();\n            channel.port1.onmessage = function(e) {\n                runTask(e.data);\n            };\n            scheduleMethod = function(action) {\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                channel.port2.postMessage(id);\n                return id;\n            };\n        } else if (\"document\" in root && \"onreadystatechange\" in root.document.createElement(\"script\")) {\n            scheduleMethod = function(action) {\n                var scriptElement = root.document.createElement(\"script\");\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                scriptElement.onreadystatechange = function() {\n                    runTask(id);\n                    scriptElement.onreadystatechange = null;\n                    scriptElement.parentNode.removeChild(scriptElement);\n                    scriptElement = null;\n                };\n                root.document.documentElement.appendChild(scriptElement);\n                return id;\n            };\n        } else {\n            scheduleMethod = function(action) {\n                var id = nextHandle++;\n                tasksByHandle[id] = action;\n                localSetTimeout(function() {\n                    runTask(id);\n                }, 0);\n                return id;\n            };\n        }\n    })();\n    /**\n   * Gets a scheduler that schedules work via a timed callback based upon platform.\n   */ var DefaultScheduler = function(__super__) {\n        inherits(DefaultScheduler, __super__);\n        function DefaultScheduler() {\n            __super__.call(this);\n        }\n        function scheduleAction(disposable, action, scheduler, state) {\n            return function schedule() {\n                disposable.setDisposable(Disposable._fixup(action(scheduler, state)));\n            };\n        }\n        function ClearDisposable(id) {\n            this._id = id;\n            this.isDisposed = false;\n        }\n        ClearDisposable.prototype.dispose = function() {\n            if (!this.isDisposed) {\n                this.isDisposed = true;\n                clearMethod(this._id);\n            }\n        };\n        function LocalClearDisposable(id) {\n            this._id = id;\n            this.isDisposed = false;\n        }\n        LocalClearDisposable.prototype.dispose = function() {\n            if (!this.isDisposed) {\n                this.isDisposed = true;\n                localClearTimeout(this._id);\n            }\n        };\n        DefaultScheduler.prototype.schedule = function(state, action) {\n            var disposable = new SingleAssignmentDisposable(), id = scheduleMethod(scheduleAction(disposable, action, this, state));\n            return new BinaryDisposable(disposable, new ClearDisposable(id));\n        };\n        DefaultScheduler.prototype._scheduleFuture = function(state, dueTime, action) {\n            if (dueTime === 0) {\n                return this.schedule(state, action);\n            }\n            var disposable = new SingleAssignmentDisposable(), id = localSetTimeout(scheduleAction(disposable, action, this, state), dueTime);\n            return new BinaryDisposable(disposable, new LocalClearDisposable(id));\n        };\n        function scheduleLongRunning(state, action, disposable) {\n            return function() {\n                action(state, disposable);\n            };\n        }\n        DefaultScheduler.prototype.scheduleLongRunning = function(state, action) {\n            var disposable = disposableCreate(noop);\n            scheduleMethod(scheduleLongRunning(state, action, disposable));\n            return disposable;\n        };\n        return DefaultScheduler;\n    }(Scheduler);\n    var defaultScheduler = Scheduler[\"default\"] = Scheduler.async = new DefaultScheduler();\n    var CatchScheduler = function(__super__) {\n        inherits(CatchScheduler, __super__);\n        function CatchScheduler(scheduler, handler) {\n            this._scheduler = scheduler;\n            this._handler = handler;\n            this._recursiveOriginal = null;\n            this._recursiveWrapper = null;\n            __super__.call(this);\n        }\n        CatchScheduler.prototype.schedule = function(state, action) {\n            return this._scheduler.schedule(state, this._wrap(action));\n        };\n        CatchScheduler.prototype._scheduleFuture = function(state, dueTime, action) {\n            return this._scheduler.schedule(state, dueTime, this._wrap(action));\n        };\n        CatchScheduler.prototype.now = function() {\n            return this._scheduler.now();\n        };\n        CatchScheduler.prototype._clone = function(scheduler) {\n            return new CatchScheduler(scheduler, this._handler);\n        };\n        CatchScheduler.prototype._wrap = function(action) {\n            var parent = this;\n            return function(self1, state) {\n                var res = tryCatch(action)(parent._getRecursiveWrapper(self1), state);\n                if (res === errorObj) {\n                    if (!parent._handler(res.e)) {\n                        thrower(res.e);\n                    }\n                    return disposableEmpty;\n                }\n                return disposableFixup(res);\n            };\n        };\n        CatchScheduler.prototype._getRecursiveWrapper = function(scheduler) {\n            if (this._recursiveOriginal !== scheduler) {\n                this._recursiveOriginal = scheduler;\n                var wrapper = this._clone(scheduler);\n                wrapper._recursiveOriginal = scheduler;\n                wrapper._recursiveWrapper = wrapper;\n                this._recursiveWrapper = wrapper;\n            }\n            return this._recursiveWrapper;\n        };\n        CatchScheduler.prototype.schedulePeriodic = function(state, period, action) {\n            var self1 = this, failed = false, d = new SingleAssignmentDisposable();\n            d.setDisposable(this._scheduler.schedulePeriodic(state, period, function(state1) {\n                if (failed) {\n                    return null;\n                }\n                var res = tryCatch(action)(state1);\n                if (res === errorObj) {\n                    failed = true;\n                    if (!self1._handler(res.e)) {\n                        thrower(res.e);\n                    }\n                    d.dispose();\n                    return null;\n                }\n                return res;\n            }));\n            return d;\n        };\n        return CatchScheduler;\n    }(Scheduler);\n    function IndexedItem(id, value) {\n        this.id = id;\n        this.value = value;\n    }\n    IndexedItem.prototype.compareTo = function(other) {\n        var c = this.value.compareTo(other.value);\n        c === 0 && (c = this.id - other.id);\n        return c;\n    };\n    var PriorityQueue = Rx.internals.PriorityQueue = function(capacity) {\n        this.items = new Array(capacity);\n        this.length = 0;\n    };\n    var priorityProto = PriorityQueue.prototype;\n    priorityProto.isHigherPriority = function(left, right) {\n        return this.items[left].compareTo(this.items[right]) < 0;\n    };\n    priorityProto.percolate = function(index) {\n        if (index >= this.length || index < 0) {\n            return;\n        }\n        var parent = index - 1 >> 1;\n        if (parent < 0 || parent === index) {\n            return;\n        }\n        if (this.isHigherPriority(index, parent)) {\n            var temp = this.items[index];\n            this.items[index] = this.items[parent];\n            this.items[parent] = temp;\n            this.percolate(parent);\n        }\n    };\n    priorityProto.heapify = function(index) {\n        +index || (index = 0);\n        if (index >= this.length || index < 0) {\n            return;\n        }\n        var left = 2 * index + 1, right = 2 * index + 2, first = index;\n        if (left < this.length && this.isHigherPriority(left, first)) {\n            first = left;\n        }\n        if (right < this.length && this.isHigherPriority(right, first)) {\n            first = right;\n        }\n        if (first !== index) {\n            var temp = this.items[index];\n            this.items[index] = this.items[first];\n            this.items[first] = temp;\n            this.heapify(first);\n        }\n    };\n    priorityProto.peek = function() {\n        return this.items[0].value;\n    };\n    priorityProto.removeAt = function(index) {\n        this.items[index] = this.items[--this.length];\n        this.items[this.length] = undefined;\n        this.heapify();\n    };\n    priorityProto.dequeue = function() {\n        var result = this.peek();\n        this.removeAt(0);\n        return result;\n    };\n    priorityProto.enqueue = function(item) {\n        var index = this.length++;\n        this.items[index] = new IndexedItem(PriorityQueue.count++, item);\n        this.percolate(index);\n    };\n    priorityProto.remove = function(item) {\n        for(var i = 0; i < this.length; i++){\n            if (this.items[i].value === item) {\n                this.removeAt(i);\n                return true;\n            }\n        }\n        return false;\n    };\n    PriorityQueue.count = 0;\n    /**\n   *  Represents a notification to an observer.\n   */ var Notification = Rx.Notification = function() {\n        function Notification() {}\n        Notification.prototype._accept = function(onNext, onError, onCompleted) {\n            throw new NotImplementedError();\n        };\n        Notification.prototype._acceptObserver = function(onNext, onError, onCompleted) {\n            throw new NotImplementedError();\n        };\n        /**\n     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.\n     * @param {Function | Observer} observerOrOnNext Function to invoke for an OnNext notification or Observer to invoke the notification on..\n     * @param {Function} onError Function to invoke for an OnError notification.\n     * @param {Function} onCompleted Function to invoke for an OnCompleted notification.\n     * @returns {Any} Result produced by the observation.\n     */ Notification.prototype.accept = function(observerOrOnNext, onError, onCompleted) {\n            return observerOrOnNext && typeof observerOrOnNext === \"object\" ? this._acceptObserver(observerOrOnNext) : this._accept(observerOrOnNext, onError, onCompleted);\n        };\n        /**\n     * Returns an observable sequence with a single notification.\n     *\n     * @memberOf Notifications\n     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.\n     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.\n     */ Notification.prototype.toObservable = function(scheduler) {\n            var self1 = this;\n            isScheduler(scheduler) || (scheduler = immediateScheduler);\n            return new AnonymousObservable(function(o) {\n                return scheduler.schedule(self1, function(_, notification) {\n                    notification._acceptObserver(o);\n                    notification.kind === \"N\" && o.onCompleted();\n                });\n            });\n        };\n        return Notification;\n    }();\n    var OnNextNotification = function(__super__) {\n        inherits(OnNextNotification, __super__);\n        function OnNextNotification(value) {\n            this.value = value;\n            this.kind = \"N\";\n        }\n        OnNextNotification.prototype._accept = function(onNext) {\n            return onNext(this.value);\n        };\n        OnNextNotification.prototype._acceptObserver = function(o) {\n            return o.onNext(this.value);\n        };\n        OnNextNotification.prototype.toString = function() {\n            return \"OnNext(\" + this.value + \")\";\n        };\n        return OnNextNotification;\n    }(Notification);\n    var OnErrorNotification = function(__super__) {\n        inherits(OnErrorNotification, __super__);\n        function OnErrorNotification(error) {\n            this.error = error;\n            this.kind = \"E\";\n        }\n        OnErrorNotification.prototype._accept = function(onNext, onError) {\n            return onError(this.error);\n        };\n        OnErrorNotification.prototype._acceptObserver = function(o) {\n            return o.onError(this.error);\n        };\n        OnErrorNotification.prototype.toString = function() {\n            return \"OnError(\" + this.error + \")\";\n        };\n        return OnErrorNotification;\n    }(Notification);\n    var OnCompletedNotification = function(__super__) {\n        inherits(OnCompletedNotification, __super__);\n        function OnCompletedNotification() {\n            this.kind = \"C\";\n        }\n        OnCompletedNotification.prototype._accept = function(onNext, onError, onCompleted) {\n            return onCompleted();\n        };\n        OnCompletedNotification.prototype._acceptObserver = function(o) {\n            return o.onCompleted();\n        };\n        OnCompletedNotification.prototype.toString = function() {\n            return \"OnCompleted()\";\n        };\n        return OnCompletedNotification;\n    }(Notification);\n    /**\n   * Creates an object that represents an OnNext notification to an observer.\n   * @param {Any} value The value contained in the notification.\n   * @returns {Notification} The OnNext notification containing the value.\n   */ var notificationCreateOnNext = Notification.createOnNext = function(value) {\n        return new OnNextNotification(value);\n    };\n    /**\n   * Creates an object that represents an OnError notification to an observer.\n   * @param {Any} error The exception contained in the notification.\n   * @returns {Notification} The OnError notification containing the exception.\n   */ var notificationCreateOnError = Notification.createOnError = function(error) {\n        return new OnErrorNotification(error);\n    };\n    /**\n   * Creates an object that represents an OnCompleted notification to an observer.\n   * @returns {Notification} The OnCompleted notification.\n   */ var notificationCreateOnCompleted = Notification.createOnCompleted = function() {\n        return new OnCompletedNotification();\n    };\n    /**\n   * Supports push-style iteration over an observable sequence.\n   */ var Observer = Rx.Observer = function() {};\n    /**\n   *  Creates a notification callback from an observer.\n   * @returns The action that forwards its input notification to the underlying observer.\n   */ Observer.prototype.toNotifier = function() {\n        var observer = this;\n        return function(n) {\n            return n.accept(observer);\n        };\n    };\n    /**\n   *  Hides the identity of an observer.\n   * @returns An observer that hides the identity of the specified observer.\n   */ Observer.prototype.asObserver = function() {\n        var self1 = this;\n        return new AnonymousObserver(function(x) {\n            self1.onNext(x);\n        }, function(err) {\n            self1.onError(err);\n        }, function() {\n            self1.onCompleted();\n        });\n    };\n    /**\n   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.\n   *  If a violation is detected, an Error is thrown from the offending observer method call.\n   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.\n   */ Observer.prototype.checked = function() {\n        return new CheckedObserver(this);\n    };\n    /**\n   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.\n   * @param {Function} [onNext] Observer's OnNext action implementation.\n   * @param {Function} [onError] Observer's OnError action implementation.\n   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.\n   * @returns {Observer} The observer object implemented using the given actions.\n   */ var observerCreate = Observer.create = function(onNext, onError, onCompleted) {\n        onNext || (onNext = noop);\n        onError || (onError = defaultError);\n        onCompleted || (onCompleted = noop);\n        return new AnonymousObserver(onNext, onError, onCompleted);\n    };\n    /**\n   *  Creates an observer from a notification callback.\n   * @param {Function} handler Action that handles a notification.\n   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.\n   */ Observer.fromNotifier = function(handler, thisArg) {\n        var cb = bindCallback(handler, thisArg, 1);\n        return new AnonymousObserver(function(x) {\n            return cb(notificationCreateOnNext(x));\n        }, function(e) {\n            return cb(notificationCreateOnError(e));\n        }, function() {\n            return cb(notificationCreateOnCompleted());\n        });\n    };\n    /**\n   * Schedules the invocation of observer methods on the given scheduler.\n   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.\n   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.\n   */ Observer.prototype.notifyOn = function(scheduler) {\n        return new ObserveOnObserver(scheduler, this);\n    };\n    Observer.prototype.makeSafe = function(disposable) {\n        return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);\n    };\n    /**\n   * Abstract base class for implementations of the Observer class.\n   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.\n   */ var AbstractObserver = Rx.internals.AbstractObserver = function(__super__) {\n        inherits(AbstractObserver, __super__);\n        /**\n     * Creates a new observer in a non-stopped state.\n     */ function AbstractObserver() {\n            this.isStopped = false;\n        }\n        // Must be implemented by other observers\n        AbstractObserver.prototype.next = notImplemented;\n        AbstractObserver.prototype.error = notImplemented;\n        AbstractObserver.prototype.completed = notImplemented;\n        /**\n     * Notifies the observer of a new element in the sequence.\n     * @param {Any} value Next element in the sequence.\n     */ AbstractObserver.prototype.onNext = function(value) {\n            !this.isStopped && this.next(value);\n        };\n        /**\n     * Notifies the observer that an exception has occurred.\n     * @param {Any} error The error that has occurred.\n     */ AbstractObserver.prototype.onError = function(error) {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.error(error);\n            }\n        };\n        /**\n     * Notifies the observer of the end of the sequence.\n     */ AbstractObserver.prototype.onCompleted = function() {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.completed();\n            }\n        };\n        /**\n     * Disposes the observer, causing it to transition to the stopped state.\n     */ AbstractObserver.prototype.dispose = function() {\n            this.isStopped = true;\n        };\n        AbstractObserver.prototype.fail = function(e) {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.error(e);\n                return true;\n            }\n            return false;\n        };\n        return AbstractObserver;\n    }(Observer);\n    /**\n   * Class to create an Observer instance from delegate-based implementations of the on* methods.\n   */ var AnonymousObserver = Rx.AnonymousObserver = function(__super__) {\n        inherits(AnonymousObserver, __super__);\n        /**\n     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.\n     * @param {Any} onNext Observer's OnNext action implementation.\n     * @param {Any} onError Observer's OnError action implementation.\n     * @param {Any} onCompleted Observer's OnCompleted action implementation.\n     */ function AnonymousObserver(onNext, onError, onCompleted) {\n            __super__.call(this);\n            this._onNext = onNext;\n            this._onError = onError;\n            this._onCompleted = onCompleted;\n        }\n        /**\n     * Calls the onNext action.\n     * @param {Any} value Next element in the sequence.\n     */ AnonymousObserver.prototype.next = function(value) {\n            this._onNext(value);\n        };\n        /**\n     * Calls the onError action.\n     * @param {Any} error The error that has occurred.\n     */ AnonymousObserver.prototype.error = function(error) {\n            this._onError(error);\n        };\n        /**\n     *  Calls the onCompleted action.\n     */ AnonymousObserver.prototype.completed = function() {\n            this._onCompleted();\n        };\n        return AnonymousObserver;\n    }(AbstractObserver);\n    var CheckedObserver = function(__super__) {\n        inherits(CheckedObserver, __super__);\n        function CheckedObserver(observer) {\n            __super__.call(this);\n            this._observer = observer;\n            this._state = 0; // 0 - idle, 1 - busy, 2 - done\n        }\n        var CheckedObserverPrototype = CheckedObserver.prototype;\n        CheckedObserverPrototype.onNext = function(value) {\n            this.checkAccess();\n            var res = tryCatch(this._observer.onNext).call(this._observer, value);\n            this._state = 0;\n            res === errorObj && thrower(res.e);\n        };\n        CheckedObserverPrototype.onError = function(err) {\n            this.checkAccess();\n            var res = tryCatch(this._observer.onError).call(this._observer, err);\n            this._state = 2;\n            res === errorObj && thrower(res.e);\n        };\n        CheckedObserverPrototype.onCompleted = function() {\n            this.checkAccess();\n            var res = tryCatch(this._observer.onCompleted).call(this._observer);\n            this._state = 2;\n            res === errorObj && thrower(res.e);\n        };\n        CheckedObserverPrototype.checkAccess = function() {\n            if (this._state === 1) {\n                throw new Error(\"Re-entrancy detected\");\n            }\n            if (this._state === 2) {\n                throw new Error(\"Observer completed\");\n            }\n            if (this._state === 0) {\n                this._state = 1;\n            }\n        };\n        return CheckedObserver;\n    }(Observer);\n    var ScheduledObserver = Rx.internals.ScheduledObserver = function(__super__) {\n        inherits(ScheduledObserver, __super__);\n        function ScheduledObserver(scheduler, observer) {\n            __super__.call(this);\n            this.scheduler = scheduler;\n            this.observer = observer;\n            this.isAcquired = false;\n            this.hasFaulted = false;\n            this.queue = [];\n            this.disposable = new SerialDisposable();\n        }\n        function enqueueNext(observer, x) {\n            return function() {\n                observer.onNext(x);\n            };\n        }\n        function enqueueError(observer, e) {\n            return function() {\n                observer.onError(e);\n            };\n        }\n        function enqueueCompleted(observer) {\n            return function() {\n                observer.onCompleted();\n            };\n        }\n        ScheduledObserver.prototype.next = function(x) {\n            this.queue.push(enqueueNext(this.observer, x));\n        };\n        ScheduledObserver.prototype.error = function(e) {\n            this.queue.push(enqueueError(this.observer, e));\n        };\n        ScheduledObserver.prototype.completed = function() {\n            this.queue.push(enqueueCompleted(this.observer));\n        };\n        function scheduleMethod(state, recurse) {\n            var work;\n            if (state.queue.length > 0) {\n                work = state.queue.shift();\n            } else {\n                state.isAcquired = false;\n                return;\n            }\n            var res = tryCatch(work)();\n            if (res === errorObj) {\n                state.queue = [];\n                state.hasFaulted = true;\n                return thrower(res.e);\n            }\n            recurse(state);\n        }\n        ScheduledObserver.prototype.ensureActive = function() {\n            var isOwner = false;\n            if (!this.hasFaulted && this.queue.length > 0) {\n                isOwner = !this.isAcquired;\n                this.isAcquired = true;\n            }\n            isOwner && this.disposable.setDisposable(this.scheduler.scheduleRecursive(this, scheduleMethod));\n        };\n        ScheduledObserver.prototype.dispose = function() {\n            __super__.prototype.dispose.call(this);\n            this.disposable.dispose();\n        };\n        return ScheduledObserver;\n    }(AbstractObserver);\n    var ObserveOnObserver = function(__super__) {\n        inherits(ObserveOnObserver, __super__);\n        function ObserveOnObserver(scheduler, observer, cancel) {\n            __super__.call(this, scheduler, observer);\n            this._cancel = cancel;\n        }\n        ObserveOnObserver.prototype.next = function(value) {\n            __super__.prototype.next.call(this, value);\n            this.ensureActive();\n        };\n        ObserveOnObserver.prototype.error = function(e) {\n            __super__.prototype.error.call(this, e);\n            this.ensureActive();\n        };\n        ObserveOnObserver.prototype.completed = function() {\n            __super__.prototype.completed.call(this);\n            this.ensureActive();\n        };\n        ObserveOnObserver.prototype.dispose = function() {\n            __super__.prototype.dispose.call(this);\n            this._cancel && this._cancel.dispose();\n            this._cancel = null;\n        };\n        return ObserveOnObserver;\n    }(ScheduledObserver);\n    var observableProto;\n    /**\n   * Represents a push-style collection.\n   */ var Observable = Rx.Observable = function() {\n        function makeSubscribe(self1, subscribe) {\n            return function(o) {\n                var oldOnError = o.onError;\n                o.onError = function(e) {\n                    makeStackTraceLong(e, self1);\n                    oldOnError.call(o, e);\n                };\n                return subscribe.call(self1, o);\n            };\n        }\n        function Observable() {\n            if (Rx.config.longStackSupport && hasStacks) {\n                var oldSubscribe = this._subscribe;\n                var e = tryCatch(thrower)(new Error()).e;\n                this.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n                this._subscribe = makeSubscribe(this, oldSubscribe);\n            }\n        }\n        observableProto = Observable.prototype;\n        /**\n    * Determines whether the given object is an Observable\n    * @param {Any} An object to determine whether it is an Observable\n    * @returns {Boolean} true if an Observable, else false.\n    */ Observable.isObservable = function(o) {\n            return o && isFunction(o.subscribe);\n        };\n        /**\n     *  Subscribes an o to the observable sequence.\n     *  @param {Mixed} [oOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.\n     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.\n     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.\n     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.\n     */ observableProto.subscribe = observableProto.forEach = function(oOrOnNext, onError, onCompleted) {\n            return this._subscribe(typeof oOrOnNext === \"object\" ? oOrOnNext : observerCreate(oOrOnNext, onError, onCompleted));\n        };\n        /**\n     * Subscribes to the next value in the sequence with an optional \"this\" argument.\n     * @param {Function} onNext The function to invoke on each element in the observable sequence.\n     * @param {Any} [thisArg] Object to use as this when executing callback.\n     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.\n     */ observableProto.subscribeOnNext = function(onNext, thisArg) {\n            return this._subscribe(observerCreate(typeof thisArg !== \"undefined\" ? function(x) {\n                onNext.call(thisArg, x);\n            } : onNext));\n        };\n        /**\n     * Subscribes to an exceptional condition in the sequence with an optional \"this\" argument.\n     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.\n     * @param {Any} [thisArg] Object to use as this when executing callback.\n     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.\n     */ observableProto.subscribeOnError = function(onError, thisArg) {\n            return this._subscribe(observerCreate(null, typeof thisArg !== \"undefined\" ? function(e) {\n                onError.call(thisArg, e);\n            } : onError));\n        };\n        /**\n     * Subscribes to the next value in the sequence with an optional \"this\" argument.\n     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.\n     * @param {Any} [thisArg] Object to use as this when executing callback.\n     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.\n     */ observableProto.subscribeOnCompleted = function(onCompleted, thisArg) {\n            return this._subscribe(observerCreate(null, null, typeof thisArg !== \"undefined\" ? function() {\n                onCompleted.call(thisArg);\n            } : onCompleted));\n        };\n        return Observable;\n    }();\n    var ObservableBase = Rx.ObservableBase = function(__super__) {\n        inherits(ObservableBase, __super__);\n        function fixSubscriber(subscriber) {\n            return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;\n        }\n        function setDisposable(s, state) {\n            var ado = state[0], self1 = state[1];\n            var sub = tryCatch(self1.subscribeCore).call(self1, ado);\n            if (sub === errorObj && !ado.fail(errorObj.e)) {\n                thrower(errorObj.e);\n            }\n            ado.setDisposable(fixSubscriber(sub));\n        }\n        function ObservableBase() {\n            __super__.call(this);\n        }\n        ObservableBase.prototype._subscribe = function(o) {\n            var ado = new AutoDetachObserver(o), state = [\n                ado,\n                this\n            ];\n            if (currentThreadScheduler.scheduleRequired()) {\n                currentThreadScheduler.schedule(state, setDisposable);\n            } else {\n                setDisposable(null, state);\n            }\n            return ado;\n        };\n        ObservableBase.prototype.subscribeCore = notImplemented;\n        return ObservableBase;\n    }(Observable);\n    var FlatMapObservable = Rx.FlatMapObservable = function(__super__) {\n        inherits(FlatMapObservable, __super__);\n        function FlatMapObservable(source, selector, resultSelector, thisArg) {\n            this.resultSelector = isFunction(resultSelector) ? resultSelector : null;\n            this.selector = bindCallback(isFunction(selector) ? selector : function() {\n                return selector;\n            }, thisArg, 3);\n            this.source = source;\n            __super__.call(this);\n        }\n        FlatMapObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o, this.selector, this.resultSelector, this));\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(observer, selector, resultSelector, source) {\n            this.i = 0;\n            this.selector = selector;\n            this.resultSelector = resultSelector;\n            this.source = source;\n            this.o = observer;\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype._wrapResult = function(result, x, i) {\n            return this.resultSelector ? result.map(function(y, i2) {\n                return this.resultSelector(x, y, i, i2);\n            }, this) : result;\n        };\n        InnerObserver.prototype.next = function(x) {\n            var i = this.i++;\n            var result = tryCatch(this.selector)(x, i, this.source);\n            if (result === errorObj) {\n                return this.o.onError(result.e);\n            }\n            isPromise(result) && (result = observableFromPromise(result));\n            (isArrayLike(result) || isIterable(result)) && (result = Observable.from(result));\n            this.o.onNext(this._wrapResult(result, x, i));\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.o.onCompleted();\n        };\n        return FlatMapObservable;\n    }(ObservableBase);\n    var Enumerable = Rx.internals.Enumerable = function() {};\n    function IsDisposedDisposable(state) {\n        this._s = state;\n        this.isDisposed = false;\n    }\n    IsDisposedDisposable.prototype.dispose = function() {\n        if (!this.isDisposed) {\n            this.isDisposed = true;\n            this._s.isDisposed = true;\n        }\n    };\n    var ConcatEnumerableObservable = function(__super__) {\n        inherits(ConcatEnumerableObservable, __super__);\n        function ConcatEnumerableObservable(sources) {\n            this.sources = sources;\n            __super__.call(this);\n        }\n        function scheduleMethod(state, recurse) {\n            if (state.isDisposed) {\n                return;\n            }\n            var currentItem = tryCatch(state.e.next).call(state.e);\n            if (currentItem === errorObj) {\n                return state.o.onError(currentItem.e);\n            }\n            if (currentItem.done) {\n                return state.o.onCompleted();\n            }\n            // Check if promise\n            var currentValue = currentItem.value;\n            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));\n            var d = new SingleAssignmentDisposable();\n            state.subscription.setDisposable(d);\n            d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));\n        }\n        ConcatEnumerableObservable.prototype.subscribeCore = function(o) {\n            var subscription = new SerialDisposable();\n            var state = {\n                isDisposed: false,\n                o: o,\n                subscription: subscription,\n                e: this.sources[$iterator$]()\n            };\n            var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);\n            return new NAryDisposable([\n                subscription,\n                cancelable,\n                new IsDisposedDisposable(state)\n            ]);\n        };\n        function InnerObserver(state, recurse) {\n            this._state = state;\n            this._recurse = recurse;\n            AbstractObserver.call(this);\n        }\n        inherits(InnerObserver, AbstractObserver);\n        InnerObserver.prototype.next = function(x) {\n            this._state.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this._state.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this._recurse(this._state);\n        };\n        return ConcatEnumerableObservable;\n    }(ObservableBase);\n    Enumerable.prototype.concat = function() {\n        return new ConcatEnumerableObservable(this);\n    };\n    var CatchErrorObservable = function(__super__) {\n        function CatchErrorObservable(sources) {\n            this.sources = sources;\n            __super__.call(this);\n        }\n        inherits(CatchErrorObservable, __super__);\n        function scheduleMethod(state, recurse) {\n            if (state.isDisposed) {\n                return;\n            }\n            var currentItem = tryCatch(state.e.next).call(state.e);\n            if (currentItem === errorObj) {\n                return state.o.onError(currentItem.e);\n            }\n            if (currentItem.done) {\n                return state.lastError !== null ? state.o.onError(state.lastError) : state.o.onCompleted();\n            }\n            var currentValue = currentItem.value;\n            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));\n            var d = new SingleAssignmentDisposable();\n            state.subscription.setDisposable(d);\n            d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));\n        }\n        CatchErrorObservable.prototype.subscribeCore = function(o) {\n            var subscription = new SerialDisposable();\n            var state = {\n                isDisposed: false,\n                e: this.sources[$iterator$](),\n                subscription: subscription,\n                lastError: null,\n                o: o\n            };\n            var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);\n            return new NAryDisposable([\n                subscription,\n                cancelable,\n                new IsDisposedDisposable(state)\n            ]);\n        };\n        function InnerObserver(state, recurse) {\n            this._state = state;\n            this._recurse = recurse;\n            AbstractObserver.call(this);\n        }\n        inherits(InnerObserver, AbstractObserver);\n        InnerObserver.prototype.next = function(x) {\n            this._state.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this._state.lastError = e;\n            this._recurse(this._state);\n        };\n        InnerObserver.prototype.completed = function() {\n            this._state.o.onCompleted();\n        };\n        return CatchErrorObservable;\n    }(ObservableBase);\n    Enumerable.prototype.catchError = function() {\n        return new CatchErrorObservable(this);\n    };\n    var RepeatEnumerable = function(__super__) {\n        inherits(RepeatEnumerable, __super__);\n        function RepeatEnumerable(v, c) {\n            this.v = v;\n            this.c = c == null ? -1 : c;\n        }\n        RepeatEnumerable.prototype[$iterator$] = function() {\n            return new RepeatEnumerator(this);\n        };\n        function RepeatEnumerator(p) {\n            this.v = p.v;\n            this.l = p.c;\n        }\n        RepeatEnumerator.prototype.next = function() {\n            if (this.l === 0) {\n                return doneEnumerator;\n            }\n            if (this.l > 0) {\n                this.l--;\n            }\n            return {\n                done: false,\n                value: this.v\n            };\n        };\n        return RepeatEnumerable;\n    }(Enumerable);\n    var enumerableRepeat = Enumerable.repeat = function(value, repeatCount) {\n        return new RepeatEnumerable(value, repeatCount);\n    };\n    var OfEnumerable = function(__super__) {\n        inherits(OfEnumerable, __super__);\n        function OfEnumerable(s, fn, thisArg) {\n            this.s = s;\n            this.fn = fn ? bindCallback(fn, thisArg, 3) : null;\n        }\n        OfEnumerable.prototype[$iterator$] = function() {\n            return new OfEnumerator(this);\n        };\n        function OfEnumerator(p) {\n            this.i = -1;\n            this.s = p.s;\n            this.l = this.s.length;\n            this.fn = p.fn;\n        }\n        OfEnumerator.prototype.next = function() {\n            return ++this.i < this.l ? {\n                done: false,\n                value: !this.fn ? this.s[this.i] : this.fn(this.s[this.i], this.i, this.s)\n            } : doneEnumerator;\n        };\n        return OfEnumerable;\n    }(Enumerable);\n    var enumerableOf = Enumerable.of = function(source, selector, thisArg) {\n        return new OfEnumerable(source, selector, thisArg);\n    };\n    var ObserveOnObservable = function(__super__) {\n        inherits(ObserveOnObservable, __super__);\n        function ObserveOnObservable(source, s) {\n            this.source = source;\n            this._s = s;\n            __super__.call(this);\n        }\n        ObserveOnObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ObserveOnObserver(this._s, o));\n        };\n        return ObserveOnObservable;\n    }(ObservableBase);\n    /**\n   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.\n   *\n   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects\n   *  that require to be run on a scheduler, use subscribeOn.\n   *\n   *  @param {Scheduler} scheduler Scheduler to notify observers on.\n   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.\n   */ observableProto.observeOn = function(scheduler) {\n        return new ObserveOnObservable(this, scheduler);\n    };\n    var SubscribeOnObservable = function(__super__) {\n        inherits(SubscribeOnObservable, __super__);\n        function SubscribeOnObservable(source, s) {\n            this.source = source;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleMethod(scheduler, state) {\n            var source = state[0], d = state[1], o = state[2];\n            d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(o)));\n        }\n        SubscribeOnObservable.prototype.subscribeCore = function(o) {\n            var m = new SingleAssignmentDisposable(), d = new SerialDisposable();\n            d.setDisposable(m);\n            m.setDisposable(this._s.schedule([\n                this.source,\n                d,\n                o\n            ], scheduleMethod));\n            return d;\n        };\n        return SubscribeOnObservable;\n    }(ObservableBase);\n    /**\n   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;\n   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.\n\n   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer\n   *  callbacks on a scheduler, use observeOn.\n\n   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.\n   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.\n   */ observableProto.subscribeOn = function(scheduler) {\n        return new SubscribeOnObservable(this, scheduler);\n    };\n    var FromPromiseObservable = function(__super__) {\n        inherits(FromPromiseObservable, __super__);\n        function FromPromiseObservable(p, s) {\n            this._p = p;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleNext(s, state) {\n            var o = state[0], data = state[1];\n            o.onNext(data);\n            o.onCompleted();\n        }\n        function scheduleError(s, state) {\n            var o = state[0], err = state[1];\n            o.onError(err);\n        }\n        FromPromiseObservable.prototype.subscribeCore = function(o) {\n            var sad = new SingleAssignmentDisposable(), self1 = this, p = this._p;\n            if (isFunction(p)) {\n                p = tryCatch(p)();\n                if (p === errorObj) {\n                    o.onError(p.e);\n                    return sad;\n                }\n            }\n            p.then(function(data) {\n                sad.setDisposable(self1._s.schedule([\n                    o,\n                    data\n                ], scheduleNext));\n            }, function(err) {\n                sad.setDisposable(self1._s.schedule([\n                    o,\n                    err\n                ], scheduleError));\n            });\n            return sad;\n        };\n        return FromPromiseObservable;\n    }(ObservableBase);\n    /**\n  * Converts a Promise to an Observable sequence\n  * @param {Promise} An ES6 Compliant promise.\n  * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.\n  */ var observableFromPromise = Observable.fromPromise = function(promise, scheduler) {\n        scheduler || (scheduler = defaultScheduler);\n        return new FromPromiseObservable(promise, scheduler);\n    };\n    /*\n   * Converts an existing observable sequence to an ES6 Compatible Promise\n   * @example\n   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);\n   *\n   * // With config\n   * Rx.config.Promise = RSVP.Promise;\n   * var promise = Rx.Observable.return(42).toPromise();\n   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.\n   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.\n   */ observableProto.toPromise = function(promiseCtor) {\n        promiseCtor || (promiseCtor = Rx.config.Promise);\n        if (!promiseCtor) {\n            throw new NotSupportedError(\"Promise type not provided nor in Rx.config.Promise\");\n        }\n        var source = this;\n        return new promiseCtor(function(resolve, reject) {\n            // No cancellation can be done\n            var value;\n            source.subscribe(function(v) {\n                value = v;\n            }, reject, function() {\n                resolve(value);\n            });\n        });\n    };\n    var ToArrayObservable = function(__super__) {\n        inherits(ToArrayObservable, __super__);\n        function ToArrayObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        ToArrayObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o));\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(o) {\n            this.o = o;\n            this.a = [];\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            this.a.push(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.o.onNext(this.a);\n            this.o.onCompleted();\n        };\n        return ToArrayObservable;\n    }(ObservableBase);\n    /**\n  * Creates an array from an observable sequence.\n  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.\n  */ observableProto.toArray = function() {\n        return new ToArrayObservable(this);\n    };\n    /**\n   *  Creates an observable sequence from a specified subscribe method implementation.\n   * @example\n   *  var res = Rx.Observable.create(function (observer) { return function () { } );\n   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );\n   *  var res = Rx.Observable.create(function (observer) { } );\n   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.\n   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.\n   */ Observable.create = function(subscribe, parent) {\n        return new AnonymousObservable(subscribe, parent);\n    };\n    var Defer = function(__super__) {\n        inherits(Defer, __super__);\n        function Defer(factory) {\n            this._f = factory;\n            __super__.call(this);\n        }\n        Defer.prototype.subscribeCore = function(o) {\n            var result = tryCatch(this._f)();\n            if (result === errorObj) {\n                return observableThrow(result.e).subscribe(o);\n            }\n            isPromise(result) && (result = observableFromPromise(result));\n            return result.subscribe(o);\n        };\n        return Defer;\n    }(ObservableBase);\n    /**\n   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.\n   *\n   * @example\n   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });\n   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.\n   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.\n   */ var observableDefer = Observable.defer = function(observableFactory) {\n        return new Defer(observableFactory);\n    };\n    var EmptyObservable = function(__super__) {\n        inherits(EmptyObservable, __super__);\n        function EmptyObservable(scheduler) {\n            this.scheduler = scheduler;\n            __super__.call(this);\n        }\n        EmptyObservable.prototype.subscribeCore = function(observer) {\n            var sink = new EmptySink(observer, this.scheduler);\n            return sink.run();\n        };\n        function EmptySink(observer, scheduler) {\n            this.observer = observer;\n            this.scheduler = scheduler;\n        }\n        function scheduleItem(s, state) {\n            state.onCompleted();\n            return disposableEmpty;\n        }\n        EmptySink.prototype.run = function() {\n            var state = this.observer;\n            return this.scheduler === immediateScheduler ? scheduleItem(null, state) : this.scheduler.schedule(state, scheduleItem);\n        };\n        return EmptyObservable;\n    }(ObservableBase);\n    var EMPTY_OBSERVABLE = new EmptyObservable(immediateScheduler);\n    /**\n   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.\n   *\n   * @example\n   *  var res = Rx.Observable.empty();\n   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);\n   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.\n   * @returns {Observable} An observable sequence with no elements.\n   */ var observableEmpty = Observable.empty = function(scheduler) {\n        isScheduler(scheduler) || (scheduler = immediateScheduler);\n        return scheduler === immediateScheduler ? EMPTY_OBSERVABLE : new EmptyObservable(scheduler);\n    };\n    var FromObservable = function(__super__) {\n        inherits(FromObservable, __super__);\n        function FromObservable(iterable, fn, scheduler) {\n            this._iterable = iterable;\n            this._fn = fn;\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        function createScheduleMethod(o, it, fn) {\n            return function loopRecursive(i, recurse) {\n                var next = tryCatch(it.next).call(it);\n                if (next === errorObj) {\n                    return o.onError(next.e);\n                }\n                if (next.done) {\n                    return o.onCompleted();\n                }\n                var result = next.value;\n                if (isFunction(fn)) {\n                    result = tryCatch(fn)(result, i);\n                    if (result === errorObj) {\n                        return o.onError(result.e);\n                    }\n                }\n                o.onNext(result);\n                recurse(i + 1);\n            };\n        }\n        FromObservable.prototype.subscribeCore = function(o) {\n            var list = Object(this._iterable), it = getIterable(list);\n            return this._scheduler.scheduleRecursive(0, createScheduleMethod(o, it, this._fn));\n        };\n        return FromObservable;\n    }(ObservableBase);\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n    function StringIterable(s) {\n        this._s = s;\n    }\n    StringIterable.prototype[$iterator$] = function() {\n        return new StringIterator(this._s);\n    };\n    function StringIterator(s) {\n        this._s = s;\n        this._l = s.length;\n        this._i = 0;\n    }\n    StringIterator.prototype[$iterator$] = function() {\n        return this;\n    };\n    StringIterator.prototype.next = function() {\n        return this._i < this._l ? {\n            done: false,\n            value: this._s.charAt(this._i++)\n        } : doneEnumerator;\n    };\n    function ArrayIterable(a) {\n        this._a = a;\n    }\n    ArrayIterable.prototype[$iterator$] = function() {\n        return new ArrayIterator(this._a);\n    };\n    function ArrayIterator(a) {\n        this._a = a;\n        this._l = toLength(a);\n        this._i = 0;\n    }\n    ArrayIterator.prototype[$iterator$] = function() {\n        return this;\n    };\n    ArrayIterator.prototype.next = function() {\n        return this._i < this._l ? {\n            done: false,\n            value: this._a[this._i++]\n        } : doneEnumerator;\n    };\n    function numberIsFinite(value) {\n        return typeof value === \"number\" && root.isFinite(value);\n    }\n    function isNan(n) {\n        return n !== n;\n    }\n    function getIterable(o) {\n        var i = o[$iterator$], it;\n        if (!i && typeof o === \"string\") {\n            it = new StringIterable(o);\n            return it[$iterator$]();\n        }\n        if (!i && o.length !== undefined) {\n            it = new ArrayIterable(o);\n            return it[$iterator$]();\n        }\n        if (!i) {\n            throw new TypeError(\"Object is not iterable\");\n        }\n        return o[$iterator$]();\n    }\n    function sign(value) {\n        var number = +value;\n        if (number === 0) {\n            return number;\n        }\n        if (isNaN(number)) {\n            return number;\n        }\n        return number < 0 ? -1 : 1;\n    }\n    function toLength(o) {\n        var len = +o.length;\n        if (isNaN(len)) {\n            return 0;\n        }\n        if (len === 0 || !numberIsFinite(len)) {\n            return len;\n        }\n        len = sign(len) * Math.floor(Math.abs(len));\n        if (len <= 0) {\n            return 0;\n        }\n        if (len > maxSafeInteger) {\n            return maxSafeInteger;\n        }\n        return len;\n    }\n    /**\n  * This method creates a new Observable sequence from an array-like or iterable object.\n  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.\n  * @param {Function} [mapFn] Map function to call on every element of the array.\n  * @param {Any} [thisArg] The context to use calling the mapFn if provided.\n  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.\n  */ var observableFrom = Observable.from = function(iterable, mapFn, thisArg, scheduler) {\n        if (iterable == null) {\n            throw new Error(\"iterable cannot be null.\");\n        }\n        if (mapFn && !isFunction(mapFn)) {\n            throw new Error(\"mapFn when provided must be a function\");\n        }\n        if (mapFn) {\n            var mapper = bindCallback(mapFn, thisArg, 2);\n        }\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new FromObservable(iterable, mapper, scheduler);\n    };\n    var FromArrayObservable = function(__super__) {\n        inherits(FromArrayObservable, __super__);\n        function FromArrayObservable(args, scheduler) {\n            this._args = args;\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        function scheduleMethod(o, args) {\n            var len = args.length;\n            return function loopRecursive(i, recurse) {\n                if (i < len) {\n                    o.onNext(args[i]);\n                    recurse(i + 1);\n                } else {\n                    o.onCompleted();\n                }\n            };\n        }\n        FromArrayObservable.prototype.subscribeCore = function(o) {\n            return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._args));\n        };\n        return FromArrayObservable;\n    }(ObservableBase);\n    /**\n  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.\n  * @deprecated use Observable.from or Observable.of\n  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.\n  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.\n  */ var observableFromArray = Observable.fromArray = function(array, scheduler) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new FromArrayObservable(array, scheduler);\n    };\n    var GenerateObservable = function(__super__) {\n        inherits(GenerateObservable, __super__);\n        function GenerateObservable(state, cndFn, itrFn, resFn, s) {\n            this._initialState = state;\n            this._cndFn = cndFn;\n            this._itrFn = itrFn;\n            this._resFn = resFn;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleRecursive(state, recurse) {\n            if (state.first) {\n                state.first = false;\n            } else {\n                state.newState = tryCatch(state.self._itrFn)(state.newState);\n                if (state.newState === errorObj) {\n                    return state.o.onError(state.newState.e);\n                }\n            }\n            var hasResult = tryCatch(state.self._cndFn)(state.newState);\n            if (hasResult === errorObj) {\n                return state.o.onError(hasResult.e);\n            }\n            if (hasResult) {\n                var result = tryCatch(state.self._resFn)(state.newState);\n                if (result === errorObj) {\n                    return state.o.onError(result.e);\n                }\n                state.o.onNext(result);\n                recurse(state);\n            } else {\n                state.o.onCompleted();\n            }\n        }\n        GenerateObservable.prototype.subscribeCore = function(o) {\n            var state = {\n                o: o,\n                self: this,\n                first: true,\n                newState: this._initialState\n            };\n            return this._s.scheduleRecursive(state, scheduleRecursive);\n        };\n        return GenerateObservable;\n    }(ObservableBase);\n    /**\n   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.\n   *\n   * @example\n   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });\n   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);\n   * @param {Mixed} initialState Initial state.\n   * @param {Function} condition Condition to terminate generation (upon returning false).\n   * @param {Function} iterate Iteration step function.\n   * @param {Function} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.\n   * @returns {Observable} The generated sequence.\n   */ Observable.generate = function(initialState, condition, iterate, resultSelector, scheduler) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new GenerateObservable(initialState, condition, iterate, resultSelector, scheduler);\n    };\n    var NeverObservable = function(__super__) {\n        inherits(NeverObservable, __super__);\n        function NeverObservable() {\n            __super__.call(this);\n        }\n        NeverObservable.prototype.subscribeCore = function(observer) {\n            return disposableEmpty;\n        };\n        return NeverObservable;\n    }(ObservableBase);\n    var NEVER_OBSERVABLE = new NeverObservable();\n    /**\n   * Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).\n   * @returns {Observable} An observable sequence whose observers will never get called.\n   */ var observableNever = Observable.never = function() {\n        return NEVER_OBSERVABLE;\n    };\n    function observableOf(scheduler, array) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new FromArrayObservable(array, scheduler);\n    }\n    /**\n  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.\n  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.\n  */ Observable.of = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return new FromArrayObservable(args, currentThreadScheduler);\n    };\n    /**\n  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.\n  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.\n  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.\n  */ Observable.ofWithScheduler = function(scheduler) {\n        var len = arguments.length, args = new Array(len - 1);\n        for(var i = 1; i < len; i++){\n            args[i - 1] = arguments[i];\n        }\n        return new FromArrayObservable(args, scheduler);\n    };\n    var PairsObservable = function(__super__) {\n        inherits(PairsObservable, __super__);\n        function PairsObservable(o, scheduler) {\n            this._o = o;\n            this._keys = Object.keys(o);\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        function scheduleMethod(o, obj, keys) {\n            return function loopRecursive(i, recurse) {\n                if (i < keys.length) {\n                    var key = keys[i];\n                    o.onNext([\n                        key,\n                        obj[key]\n                    ]);\n                    recurse(i + 1);\n                } else {\n                    o.onCompleted();\n                }\n            };\n        }\n        PairsObservable.prototype.subscribeCore = function(o) {\n            return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._o, this._keys));\n        };\n        return PairsObservable;\n    }(ObservableBase);\n    /**\n   * Convert an object into an observable sequence of [key, value] pairs.\n   * @param {Object} obj The object to inspect.\n   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.\n   * @returns {Observable} An observable sequence of [key, value] pairs from the object.\n   */ Observable.pairs = function(obj, scheduler) {\n        scheduler || (scheduler = currentThreadScheduler);\n        return new PairsObservable(obj, scheduler);\n    };\n    var RangeObservable = function(__super__) {\n        inherits(RangeObservable, __super__);\n        function RangeObservable(start, count, scheduler) {\n            this.start = start;\n            this.rangeCount = count;\n            this.scheduler = scheduler;\n            __super__.call(this);\n        }\n        function loopRecursive(start, count, o) {\n            return function loop(i, recurse) {\n                if (i < count) {\n                    o.onNext(start + i);\n                    recurse(i + 1);\n                } else {\n                    o.onCompleted();\n                }\n            };\n        }\n        RangeObservable.prototype.subscribeCore = function(o) {\n            return this.scheduler.scheduleRecursive(0, loopRecursive(this.start, this.rangeCount, o));\n        };\n        return RangeObservable;\n    }(ObservableBase);\n    /**\n  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.\n  * @param {Number} start The value of the first integer in the sequence.\n  * @param {Number} count The number of sequential integers to generate.\n  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.\n  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.\n  */ Observable.range = function(start, count, scheduler) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new RangeObservable(start, count, scheduler);\n    };\n    var RepeatObservable = function(__super__) {\n        inherits(RepeatObservable, __super__);\n        function RepeatObservable(value, repeatCount, scheduler) {\n            this.value = value;\n            this.repeatCount = repeatCount == null ? -1 : repeatCount;\n            this.scheduler = scheduler;\n            __super__.call(this);\n        }\n        RepeatObservable.prototype.subscribeCore = function(observer) {\n            var sink = new RepeatSink(observer, this);\n            return sink.run();\n        };\n        return RepeatObservable;\n    }(ObservableBase);\n    function RepeatSink(observer, parent) {\n        this.observer = observer;\n        this.parent = parent;\n    }\n    RepeatSink.prototype.run = function() {\n        var observer = this.observer, value = this.parent.value;\n        function loopRecursive(i, recurse) {\n            if (i === -1 || i > 0) {\n                observer.onNext(value);\n                i > 0 && i--;\n            }\n            if (i === 0) {\n                return observer.onCompleted();\n            }\n            recurse(i);\n        }\n        return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount, loopRecursive);\n    };\n    /**\n   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.\n   * @param {Mixed} value Element to repeat.\n   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.\n   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.\n   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.\n   */ Observable.repeat = function(value, repeatCount, scheduler) {\n        isScheduler(scheduler) || (scheduler = currentThreadScheduler);\n        return new RepeatObservable(value, repeatCount, scheduler);\n    };\n    var JustObservable = function(__super__) {\n        inherits(JustObservable, __super__);\n        function JustObservable(value, scheduler) {\n            this._value = value;\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        JustObservable.prototype.subscribeCore = function(o) {\n            var state = [\n                this._value,\n                o\n            ];\n            return this._scheduler === immediateScheduler ? scheduleItem(null, state) : this._scheduler.schedule(state, scheduleItem);\n        };\n        function scheduleItem(s, state) {\n            var value = state[0], observer = state[1];\n            observer.onNext(value);\n            observer.onCompleted();\n            return disposableEmpty;\n        }\n        return JustObservable;\n    }(ObservableBase);\n    /**\n   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.\n   *  There is an alias called 'just' or browsers <IE9.\n   * @param {Mixed} value Single element in the resulting observable sequence.\n   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.\n   * @returns {Observable} An observable sequence containing the single specified element.\n   */ var observableReturn = Observable[\"return\"] = Observable.just = function(value, scheduler) {\n        isScheduler(scheduler) || (scheduler = immediateScheduler);\n        return new JustObservable(value, scheduler);\n    };\n    var ThrowObservable = function(__super__) {\n        inherits(ThrowObservable, __super__);\n        function ThrowObservable(error, scheduler) {\n            this._error = error;\n            this._scheduler = scheduler;\n            __super__.call(this);\n        }\n        ThrowObservable.prototype.subscribeCore = function(o) {\n            var state = [\n                this._error,\n                o\n            ];\n            return this._scheduler === immediateScheduler ? scheduleItem(null, state) : this._scheduler.schedule(state, scheduleItem);\n        };\n        function scheduleItem(s, state) {\n            var e = state[0], o = state[1];\n            o.onError(e);\n            return disposableEmpty;\n        }\n        return ThrowObservable;\n    }(ObservableBase);\n    /**\n   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.\n   *  There is an alias to this method called 'throwError' for browsers <IE9.\n   * @param {Mixed} error An object used for the sequence's termination.\n   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.\n   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.\n   */ var observableThrow = Observable[\"throw\"] = function(error, scheduler) {\n        isScheduler(scheduler) || (scheduler = immediateScheduler);\n        return new ThrowObservable(error, scheduler);\n    };\n    var UsingObservable = function(__super__) {\n        inherits(UsingObservable, __super__);\n        function UsingObservable(resFn, obsFn) {\n            this._resFn = resFn;\n            this._obsFn = obsFn;\n            __super__.call(this);\n        }\n        UsingObservable.prototype.subscribeCore = function(o) {\n            var disposable = disposableEmpty;\n            var resource = tryCatch(this._resFn)();\n            if (resource === errorObj) {\n                return new BinaryDisposable(observableThrow(resource.e).subscribe(o), disposable);\n            }\n            resource && (disposable = resource);\n            var source = tryCatch(this._obsFn)(resource);\n            if (source === errorObj) {\n                return new BinaryDisposable(observableThrow(source.e).subscribe(o), disposable);\n            }\n            return new BinaryDisposable(source.subscribe(o), disposable);\n        };\n        return UsingObservable;\n    }(ObservableBase);\n    /**\n   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.\n   * @param {Function} resourceFactory Factory function to obtain a resource object.\n   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.\n   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.\n   */ Observable.using = function(resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    /**\n   * Propagates the observable sequence or Promise that reacts first.\n   * @param {Observable} rightSource Second observable sequence or Promise.\n   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.\n   */ observableProto.amb = function(rightSource) {\n        var leftSource = this;\n        return new AnonymousObservable(function(observer) {\n            var choice, leftChoice = \"L\", rightChoice = \"R\", leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();\n            isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));\n            function choiceL() {\n                if (!choice) {\n                    choice = leftChoice;\n                    rightSubscription.dispose();\n                }\n            }\n            function choiceR() {\n                if (!choice) {\n                    choice = rightChoice;\n                    leftSubscription.dispose();\n                }\n            }\n            var leftSubscribe = observerCreate(function(left) {\n                choiceL();\n                choice === leftChoice && observer.onNext(left);\n            }, function(e) {\n                choiceL();\n                choice === leftChoice && observer.onError(e);\n            }, function() {\n                choiceL();\n                choice === leftChoice && observer.onCompleted();\n            });\n            var rightSubscribe = observerCreate(function(right) {\n                choiceR();\n                choice === rightChoice && observer.onNext(right);\n            }, function(e) {\n                choiceR();\n                choice === rightChoice && observer.onError(e);\n            }, function() {\n                choiceR();\n                choice === rightChoice && observer.onCompleted();\n            });\n            leftSubscription.setDisposable(leftSource.subscribe(leftSubscribe));\n            rightSubscription.setDisposable(rightSource.subscribe(rightSubscribe));\n            return new BinaryDisposable(leftSubscription, rightSubscription);\n        });\n    };\n    function amb(p, c) {\n        return p.amb(c);\n    }\n    /**\n   * Propagates the observable sequence or Promise that reacts first.\n   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.\n   */ Observable.amb = function() {\n        var acc = observableNever(), items;\n        if (Array.isArray(arguments[0])) {\n            items = arguments[0];\n        } else {\n            var len = arguments.length;\n            items = new Array(items);\n            for(var i = 0; i < len; i++){\n                items[i] = arguments[i];\n            }\n        }\n        for(var i = 0, len = items.length; i < len; i++){\n            acc = amb(acc, items[i]);\n        }\n        return acc;\n    };\n    var CatchObservable = function(__super__) {\n        inherits(CatchObservable, __super__);\n        function CatchObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        CatchObservable.prototype.subscribeCore = function(o) {\n            var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();\n            subscription.setDisposable(d1);\n            d1.setDisposable(this.source.subscribe(new CatchObserver(o, subscription, this._fn)));\n            return subscription;\n        };\n        return CatchObservable;\n    }(ObservableBase);\n    var CatchObserver = function(__super__) {\n        inherits(CatchObserver, __super__);\n        function CatchObserver(o, s, fn) {\n            this._o = o;\n            this._s = s;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        CatchObserver.prototype.next = function(x) {\n            this._o.onNext(x);\n        };\n        CatchObserver.prototype.completed = function() {\n            return this._o.onCompleted();\n        };\n        CatchObserver.prototype.error = function(e) {\n            var result = tryCatch(this._fn)(e);\n            if (result === errorObj) {\n                return this._o.onError(result.e);\n            }\n            isPromise(result) && (result = observableFromPromise(result));\n            var d = new SingleAssignmentDisposable();\n            this._s.setDisposable(d);\n            d.setDisposable(result.subscribe(this._o));\n        };\n        return CatchObserver;\n    }(AbstractObserver);\n    /**\n   * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.\n   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.\n   */ observableProto[\"catch\"] = function(handlerOrSecond) {\n        return isFunction(handlerOrSecond) ? new CatchObservable(this, handlerOrSecond) : observableCatch([\n            this,\n            handlerOrSecond\n        ]);\n    };\n    /**\n   * Continues an observable sequence that is terminated by an exception with the next observable sequence.\n   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.\n   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.\n   */ var observableCatch = Observable[\"catch\"] = function() {\n        var items;\n        if (Array.isArray(arguments[0])) {\n            items = arguments[0];\n        } else {\n            var len = arguments.length;\n            items = new Array(len);\n            for(var i = 0; i < len; i++){\n                items[i] = arguments[i];\n            }\n        }\n        return enumerableOf(items).catchError();\n    };\n    /**\n   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.\n   * This can be in the form of an argument list of observables or an array.\n   *\n   * @example\n   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });\n   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });\n   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.\n   */ observableProto.combineLatest = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        if (Array.isArray(args[0])) {\n            args[0].unshift(this);\n        } else {\n            args.unshift(this);\n        }\n        return combineLatest.apply(this, args);\n    };\n    function falseFactory() {\n        return false;\n    }\n    function argumentsToArray() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return args;\n    }\n    var CombineLatestObservable = function(__super__) {\n        inherits(CombineLatestObservable, __super__);\n        function CombineLatestObservable(params, cb) {\n            this._params = params;\n            this._cb = cb;\n            __super__.call(this);\n        }\n        CombineLatestObservable.prototype.subscribeCore = function(observer) {\n            var len = this._params.length, subscriptions = new Array(len);\n            var state = {\n                hasValue: arrayInitialize(len, falseFactory),\n                hasValueAll: false,\n                isDone: arrayInitialize(len, falseFactory),\n                values: new Array(len)\n            };\n            for(var i = 0; i < len; i++){\n                var source = this._params[i], sad = new SingleAssignmentDisposable();\n                subscriptions[i] = sad;\n                isPromise(source) && (source = observableFromPromise(source));\n                sad.setDisposable(source.subscribe(new CombineLatestObserver(observer, i, this._cb, state)));\n            }\n            return new NAryDisposable(subscriptions);\n        };\n        return CombineLatestObservable;\n    }(ObservableBase);\n    var CombineLatestObserver = function(__super__) {\n        inherits(CombineLatestObserver, __super__);\n        function CombineLatestObserver(o, i, cb, state) {\n            this._o = o;\n            this._i = i;\n            this._cb = cb;\n            this._state = state;\n            __super__.call(this);\n        }\n        function notTheSame(i) {\n            return function(x, j) {\n                return j !== i;\n            };\n        }\n        CombineLatestObserver.prototype.next = function(x) {\n            this._state.values[this._i] = x;\n            this._state.hasValue[this._i] = true;\n            if (this._state.hasValueAll || (this._state.hasValueAll = this._state.hasValue.every(identity))) {\n                var res = tryCatch(this._cb).apply(null, this._state.values);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                this._o.onNext(res);\n            } else if (this._state.isDone.filter(notTheSame(this._i)).every(identity)) {\n                this._o.onCompleted();\n            }\n        };\n        CombineLatestObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        CombineLatestObserver.prototype.completed = function() {\n            this._state.isDone[this._i] = true;\n            this._state.isDone.every(identity) && this._o.onCompleted();\n        };\n        return CombineLatestObserver;\n    }(AbstractObserver);\n    /**\n  * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.\n  *\n  * @example\n  * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });\n  * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });\n  * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.\n  */ var combineLatest = Observable.combineLatest = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;\n        Array.isArray(args[0]) && (args = args[0]);\n        return new CombineLatestObservable(args, resultSelector);\n    };\n    /**\n   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.\n   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.\n   */ observableProto.concat = function() {\n        for(var args = [], i = 0, len = arguments.length; i < len; i++){\n            args.push(arguments[i]);\n        }\n        args.unshift(this);\n        return observableConcat.apply(null, args);\n    };\n    var ConcatObserver = function(__super__) {\n        inherits(ConcatObserver, __super__);\n        function ConcatObserver(s, fn) {\n            this._s = s;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        ConcatObserver.prototype.next = function(x) {\n            this._s.o.onNext(x);\n        };\n        ConcatObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        ConcatObserver.prototype.completed = function() {\n            this._s.i++;\n            this._fn(this._s);\n        };\n        return ConcatObserver;\n    }(AbstractObserver);\n    var ConcatObservable = function(__super__) {\n        inherits(ConcatObservable, __super__);\n        function ConcatObservable(sources) {\n            this._sources = sources;\n            __super__.call(this);\n        }\n        function scheduleRecursive(state, recurse) {\n            if (state.disposable.isDisposed) {\n                return;\n            }\n            if (state.i === state.sources.length) {\n                return state.o.onCompleted();\n            }\n            // Check if promise\n            var currentValue = state.sources[state.i];\n            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));\n            var d = new SingleAssignmentDisposable();\n            state.subscription.setDisposable(d);\n            d.setDisposable(currentValue.subscribe(new ConcatObserver(state, recurse)));\n        }\n        ConcatObservable.prototype.subscribeCore = function(o) {\n            var subscription = new SerialDisposable();\n            var disposable = disposableCreate(noop);\n            var state = {\n                o: o,\n                i: 0,\n                subscription: subscription,\n                disposable: disposable,\n                sources: this._sources\n            };\n            var cancelable = immediateScheduler.scheduleRecursive(state, scheduleRecursive);\n            return new NAryDisposable([\n                subscription,\n                disposable,\n                cancelable\n            ]);\n        };\n        return ConcatObservable;\n    }(ObservableBase);\n    /**\n   * Concatenates all the observable sequences.\n   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.\n   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.\n   */ var observableConcat = Observable.concat = function() {\n        var args;\n        if (Array.isArray(arguments[0])) {\n            args = arguments[0];\n        } else {\n            args = new Array(arguments.length);\n            for(var i = 0, len = arguments.length; i < len; i++){\n                args[i] = arguments[i];\n            }\n        }\n        return new ConcatObservable(args);\n    };\n    /**\n   * Concatenates an observable sequence of observable sequences.\n   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.\n   */ observableProto.concatAll = function() {\n        return this.merge(1);\n    };\n    var MergeObservable = function(__super__) {\n        inherits(MergeObservable, __super__);\n        function MergeObservable(source, maxConcurrent) {\n            this.source = source;\n            this.maxConcurrent = maxConcurrent;\n            __super__.call(this);\n        }\n        MergeObservable.prototype.subscribeCore = function(observer) {\n            var g = new CompositeDisposable();\n            g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));\n            return g;\n        };\n        return MergeObservable;\n    }(ObservableBase);\n    var MergeObserver = function(__super__) {\n        function MergeObserver(o, max, g) {\n            this.o = o;\n            this.max = max;\n            this.g = g;\n            this.done = false;\n            this.q = [];\n            this.activeCount = 0;\n            __super__.call(this);\n        }\n        inherits(MergeObserver, __super__);\n        MergeObserver.prototype.handleSubscribe = function(xs) {\n            var sad = new SingleAssignmentDisposable();\n            this.g.add(sad);\n            isPromise(xs) && (xs = observableFromPromise(xs));\n            sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));\n        };\n        MergeObserver.prototype.next = function(innerSource) {\n            if (this.activeCount < this.max) {\n                this.activeCount++;\n                this.handleSubscribe(innerSource);\n            } else {\n                this.q.push(innerSource);\n            }\n        };\n        MergeObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        MergeObserver.prototype.completed = function() {\n            this.done = true;\n            this.activeCount === 0 && this.o.onCompleted();\n        };\n        function InnerObserver(parent, sad) {\n            this.parent = parent;\n            this.sad = sad;\n            __super__.call(this);\n        }\n        inherits(InnerObserver, __super__);\n        InnerObserver.prototype.next = function(x) {\n            this.parent.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.parent.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.parent.g.remove(this.sad);\n            if (this.parent.q.length > 0) {\n                this.parent.handleSubscribe(this.parent.q.shift());\n            } else {\n                this.parent.activeCount--;\n                this.parent.done && this.parent.activeCount === 0 && this.parent.o.onCompleted();\n            }\n        };\n        return MergeObserver;\n    }(AbstractObserver);\n    /**\n  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.\n  * Or merges two observable sequences into a single observable sequence.\n  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.\n  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.\n  */ observableProto.merge = function(maxConcurrentOrOther) {\n        return typeof maxConcurrentOrOther !== \"number\" ? observableMerge(this, maxConcurrentOrOther) : new MergeObservable(this, maxConcurrentOrOther);\n    };\n    /**\n   * Merges all the observable sequences into a single observable sequence.\n   * The scheduler is optional and if not specified, the immediate scheduler is used.\n   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.\n   */ var observableMerge = Observable.merge = function() {\n        var scheduler, sources = [], i, len = arguments.length;\n        if (!arguments[0]) {\n            scheduler = immediateScheduler;\n            for(i = 1; i < len; i++){\n                sources.push(arguments[i]);\n            }\n        } else if (isScheduler(arguments[0])) {\n            scheduler = arguments[0];\n            for(i = 1; i < len; i++){\n                sources.push(arguments[i]);\n            }\n        } else {\n            scheduler = immediateScheduler;\n            for(i = 0; i < len; i++){\n                sources.push(arguments[i]);\n            }\n        }\n        if (Array.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        return observableOf(scheduler, sources).mergeAll();\n    };\n    var CompositeError = Rx.CompositeError = function(errors) {\n        this.innerErrors = errors;\n        this.message = \"This contains multiple errors. Check the innerErrors\";\n        Error.call(this);\n    };\n    CompositeError.prototype = Object.create(Error.prototype);\n    CompositeError.prototype.name = \"CompositeError\";\n    var MergeDelayErrorObservable = function(__super__) {\n        inherits(MergeDelayErrorObservable, __super__);\n        function MergeDelayErrorObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        MergeDelayErrorObservable.prototype.subscribeCore = function(o) {\n            var group = new CompositeDisposable(), m = new SingleAssignmentDisposable(), state = {\n                isStopped: false,\n                errors: [],\n                o: o\n            };\n            group.add(m);\n            m.setDisposable(this.source.subscribe(new MergeDelayErrorObserver(group, state)));\n            return group;\n        };\n        return MergeDelayErrorObservable;\n    }(ObservableBase);\n    var MergeDelayErrorObserver = function(__super__) {\n        inherits(MergeDelayErrorObserver, __super__);\n        function MergeDelayErrorObserver(group, state) {\n            this._group = group;\n            this._state = state;\n            __super__.call(this);\n        }\n        function setCompletion(o, errors) {\n            if (errors.length === 0) {\n                o.onCompleted();\n            } else if (errors.length === 1) {\n                o.onError(errors[0]);\n            } else {\n                o.onError(new CompositeError(errors));\n            }\n        }\n        MergeDelayErrorObserver.prototype.next = function(x) {\n            var inner = new SingleAssignmentDisposable();\n            this._group.add(inner);\n            // Check for promises support\n            isPromise(x) && (x = observableFromPromise(x));\n            inner.setDisposable(x.subscribe(new InnerObserver(inner, this._group, this._state)));\n        };\n        MergeDelayErrorObserver.prototype.error = function(e) {\n            this._state.errors.push(e);\n            this._state.isStopped = true;\n            this._group.length === 1 && setCompletion(this._state.o, this._state.errors);\n        };\n        MergeDelayErrorObserver.prototype.completed = function() {\n            this._state.isStopped = true;\n            this._group.length === 1 && setCompletion(this._state.o, this._state.errors);\n        };\n        inherits(InnerObserver, __super__);\n        function InnerObserver(inner, group, state) {\n            this._inner = inner;\n            this._group = group;\n            this._state = state;\n            __super__.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            this._state.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this._state.errors.push(e);\n            this._group.remove(this._inner);\n            this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);\n        };\n        InnerObserver.prototype.completed = function() {\n            this._group.remove(this._inner);\n            this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);\n        };\n        return MergeDelayErrorObserver;\n    }(AbstractObserver);\n    /**\n  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to\n  * receive all successfully emitted items from all of the source Observables without being interrupted by\n  * an error notification from one of them.\n  *\n  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an\n  * error via the Observer's onError, mergeDelayError will refrain from propagating that\n  * error notification until all of the merged Observables have finished emitting items.\n  * @param {Array | Arguments} args Arguments or an array to merge.\n  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable\n  */ Observable.mergeDelayError = function() {\n        var args;\n        if (Array.isArray(arguments[0])) {\n            args = arguments[0];\n        } else {\n            var len = arguments.length;\n            args = new Array(len);\n            for(var i = 0; i < len; i++){\n                args[i] = arguments[i];\n            }\n        }\n        var source = observableOf(null, args);\n        return new MergeDelayErrorObservable(source);\n    };\n    var MergeAllObservable = function(__super__) {\n        inherits(MergeAllObservable, __super__);\n        function MergeAllObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        MergeAllObservable.prototype.subscribeCore = function(o) {\n            var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();\n            g.add(m);\n            m.setDisposable(this.source.subscribe(new MergeAllObserver(o, g)));\n            return g;\n        };\n        return MergeAllObservable;\n    }(ObservableBase);\n    var MergeAllObserver = function(__super__) {\n        function MergeAllObserver(o, g) {\n            this.o = o;\n            this.g = g;\n            this.done = false;\n            __super__.call(this);\n        }\n        inherits(MergeAllObserver, __super__);\n        MergeAllObserver.prototype.next = function(innerSource) {\n            var sad = new SingleAssignmentDisposable();\n            this.g.add(sad);\n            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));\n            sad.setDisposable(innerSource.subscribe(new InnerObserver(this, sad)));\n        };\n        MergeAllObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        MergeAllObserver.prototype.completed = function() {\n            this.done = true;\n            this.g.length === 1 && this.o.onCompleted();\n        };\n        function InnerObserver(parent, sad) {\n            this.parent = parent;\n            this.sad = sad;\n            __super__.call(this);\n        }\n        inherits(InnerObserver, __super__);\n        InnerObserver.prototype.next = function(x) {\n            this.parent.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.parent.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.parent.g.remove(this.sad);\n            this.parent.done && this.parent.g.length === 1 && this.parent.o.onCompleted();\n        };\n        return MergeAllObserver;\n    }(AbstractObserver);\n    /**\n  * Merges an observable sequence of observable sequences into an observable sequence.\n  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.\n  */ observableProto.mergeAll = function() {\n        return new MergeAllObservable(this);\n    };\n    /**\n   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.\n   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.\n   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.\n   */ observableProto.onErrorResumeNext = function(second) {\n        if (!second) {\n            throw new Error(\"Second observable is required\");\n        }\n        return onErrorResumeNext([\n            this,\n            second\n        ]);\n    };\n    var OnErrorResumeNextObservable = function(__super__) {\n        inherits(OnErrorResumeNextObservable, __super__);\n        function OnErrorResumeNextObservable(sources) {\n            this.sources = sources;\n            __super__.call(this);\n        }\n        function scheduleMethod(state, recurse) {\n            if (state.pos < state.sources.length) {\n                var current = state.sources[state.pos++];\n                isPromise(current) && (current = observableFromPromise(current));\n                var d = new SingleAssignmentDisposable();\n                state.subscription.setDisposable(d);\n                d.setDisposable(current.subscribe(new OnErrorResumeNextObserver(state, recurse)));\n            } else {\n                state.o.onCompleted();\n            }\n        }\n        OnErrorResumeNextObservable.prototype.subscribeCore = function(o) {\n            var subscription = new SerialDisposable(), state = {\n                pos: 0,\n                subscription: subscription,\n                o: o,\n                sources: this.sources\n            }, cancellable = immediateScheduler.scheduleRecursive(state, scheduleMethod);\n            return new BinaryDisposable(subscription, cancellable);\n        };\n        return OnErrorResumeNextObservable;\n    }(ObservableBase);\n    var OnErrorResumeNextObserver = function(__super__) {\n        inherits(OnErrorResumeNextObserver, __super__);\n        function OnErrorResumeNextObserver(state, recurse) {\n            this._state = state;\n            this._recurse = recurse;\n            __super__.call(this);\n        }\n        OnErrorResumeNextObserver.prototype.next = function(x) {\n            this._state.o.onNext(x);\n        };\n        OnErrorResumeNextObserver.prototype.error = function() {\n            this._recurse(this._state);\n        };\n        OnErrorResumeNextObserver.prototype.completed = function() {\n            this._recurse(this._state);\n        };\n        return OnErrorResumeNextObserver;\n    }(AbstractObserver);\n    /**\n   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.\n   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.\n   */ var onErrorResumeNext = Observable.onErrorResumeNext = function() {\n        var sources = [];\n        if (Array.isArray(arguments[0])) {\n            sources = arguments[0];\n        } else {\n            var len = arguments.length;\n            sources = new Array(len);\n            for(var i = 0; i < len; i++){\n                sources[i] = arguments[i];\n            }\n        }\n        return new OnErrorResumeNextObservable(sources);\n    };\n    var SkipUntilObservable = function(__super__) {\n        inherits(SkipUntilObservable, __super__);\n        function SkipUntilObservable(source, other) {\n            this._s = source;\n            this._o = isPromise(other) ? observableFromPromise(other) : other;\n            this._open = false;\n            __super__.call(this);\n        }\n        SkipUntilObservable.prototype.subscribeCore = function(o) {\n            var leftSubscription = new SingleAssignmentDisposable();\n            leftSubscription.setDisposable(this._s.subscribe(new SkipUntilSourceObserver(o, this)));\n            isPromise(this._o) && (this._o = observableFromPromise(this._o));\n            var rightSubscription = new SingleAssignmentDisposable();\n            rightSubscription.setDisposable(this._o.subscribe(new SkipUntilOtherObserver(o, this, rightSubscription)));\n            return new BinaryDisposable(leftSubscription, rightSubscription);\n        };\n        return SkipUntilObservable;\n    }(ObservableBase);\n    var SkipUntilSourceObserver = function(__super__) {\n        inherits(SkipUntilSourceObserver, __super__);\n        function SkipUntilSourceObserver(o, p) {\n            this._o = o;\n            this._p = p;\n            __super__.call(this);\n        }\n        SkipUntilSourceObserver.prototype.next = function(x) {\n            this._p._open && this._o.onNext(x);\n        };\n        SkipUntilSourceObserver.prototype.error = function(err) {\n            this._o.onError(err);\n        };\n        SkipUntilSourceObserver.prototype.onCompleted = function() {\n            this._p._open && this._o.onCompleted();\n        };\n        return SkipUntilSourceObserver;\n    }(AbstractObserver);\n    var SkipUntilOtherObserver = function(__super__) {\n        inherits(SkipUntilOtherObserver, __super__);\n        function SkipUntilOtherObserver(o, p, r) {\n            this._o = o;\n            this._p = p;\n            this._r = r;\n            __super__.call(this);\n        }\n        SkipUntilOtherObserver.prototype.next = function() {\n            this._p._open = true;\n            this._r.dispose();\n        };\n        SkipUntilOtherObserver.prototype.error = function(err) {\n            this._o.onError(err);\n        };\n        SkipUntilOtherObserver.prototype.onCompleted = function() {\n            this._r.dispose();\n        };\n        return SkipUntilOtherObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the values from the source observable sequence only after the other observable sequence produces a value.\n   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.\n   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.\n   */ observableProto.skipUntil = function(other) {\n        return new SkipUntilObservable(this, other);\n    };\n    var SwitchObservable = function(__super__) {\n        inherits(SwitchObservable, __super__);\n        function SwitchObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        SwitchObservable.prototype.subscribeCore = function(o) {\n            var inner = new SerialDisposable(), s = this.source.subscribe(new SwitchObserver(o, inner));\n            return new BinaryDisposable(s, inner);\n        };\n        inherits(SwitchObserver, AbstractObserver);\n        function SwitchObserver(o, inner) {\n            this.o = o;\n            this.inner = inner;\n            this.stopped = false;\n            this.latest = 0;\n            this.hasLatest = false;\n            AbstractObserver.call(this);\n        }\n        SwitchObserver.prototype.next = function(innerSource) {\n            var d = new SingleAssignmentDisposable(), id = ++this.latest;\n            this.hasLatest = true;\n            this.inner.setDisposable(d);\n            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));\n            d.setDisposable(innerSource.subscribe(new InnerObserver(this, id)));\n        };\n        SwitchObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        SwitchObserver.prototype.completed = function() {\n            this.stopped = true;\n            !this.hasLatest && this.o.onCompleted();\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(parent, id) {\n            this.parent = parent;\n            this.id = id;\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            this.parent.latest === this.id && this.parent.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.parent.latest === this.id && this.parent.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            if (this.parent.latest === this.id) {\n                this.parent.hasLatest = false;\n                this.parent.stopped && this.parent.o.onCompleted();\n            }\n        };\n        return SwitchObservable;\n    }(ObservableBase);\n    /**\n  * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.\n  * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.\n  */ observableProto[\"switch\"] = observableProto.switchLatest = function() {\n        return new SwitchObservable(this);\n    };\n    var TakeUntilObservable = function(__super__) {\n        inherits(TakeUntilObservable, __super__);\n        function TakeUntilObservable(source, other) {\n            this.source = source;\n            this.other = isPromise(other) ? observableFromPromise(other) : other;\n            __super__.call(this);\n        }\n        TakeUntilObservable.prototype.subscribeCore = function(o) {\n            return new BinaryDisposable(this.source.subscribe(o), this.other.subscribe(new TakeUntilObserver(o)));\n        };\n        return TakeUntilObservable;\n    }(ObservableBase);\n    var TakeUntilObserver = function(__super__) {\n        inherits(TakeUntilObserver, __super__);\n        function TakeUntilObserver(o) {\n            this._o = o;\n            __super__.call(this);\n        }\n        TakeUntilObserver.prototype.next = function() {\n            this._o.onCompleted();\n        };\n        TakeUntilObserver.prototype.error = function(err) {\n            this._o.onError(err);\n        };\n        TakeUntilObserver.prototype.onCompleted = noop;\n        return TakeUntilObserver;\n    }(AbstractObserver);\n    /**\n   * Returns the values from the source observable sequence until the other observable sequence produces a value.\n   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.\n   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.\n   */ observableProto.takeUntil = function(other) {\n        return new TakeUntilObservable(this, other);\n    };\n    function falseFactory() {\n        return false;\n    }\n    function argumentsToArray() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return args;\n    }\n    var WithLatestFromObservable = function(__super__) {\n        inherits(WithLatestFromObservable, __super__);\n        function WithLatestFromObservable(source, sources, resultSelector) {\n            this._s = source;\n            this._ss = sources;\n            this._cb = resultSelector;\n            __super__.call(this);\n        }\n        WithLatestFromObservable.prototype.subscribeCore = function(o) {\n            var len = this._ss.length;\n            var state = {\n                hasValue: arrayInitialize(len, falseFactory),\n                hasValueAll: false,\n                values: new Array(len)\n            };\n            var n = this._ss.length, subscriptions = new Array(n + 1);\n            for(var i = 0; i < n; i++){\n                var other = this._ss[i], sad = new SingleAssignmentDisposable();\n                isPromise(other) && (other = observableFromPromise(other));\n                sad.setDisposable(other.subscribe(new WithLatestFromOtherObserver(o, i, state)));\n                subscriptions[i] = sad;\n            }\n            var outerSad = new SingleAssignmentDisposable();\n            outerSad.setDisposable(this._s.subscribe(new WithLatestFromSourceObserver(o, this._cb, state)));\n            subscriptions[n] = outerSad;\n            return new NAryDisposable(subscriptions);\n        };\n        return WithLatestFromObservable;\n    }(ObservableBase);\n    var WithLatestFromOtherObserver = function(__super__) {\n        inherits(WithLatestFromOtherObserver, __super__);\n        function WithLatestFromOtherObserver(o, i, state) {\n            this._o = o;\n            this._i = i;\n            this._state = state;\n            __super__.call(this);\n        }\n        WithLatestFromOtherObserver.prototype.next = function(x) {\n            this._state.values[this._i] = x;\n            this._state.hasValue[this._i] = true;\n            this._state.hasValueAll = this._state.hasValue.every(identity);\n        };\n        WithLatestFromOtherObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        WithLatestFromOtherObserver.prototype.completed = noop;\n        return WithLatestFromOtherObserver;\n    }(AbstractObserver);\n    var WithLatestFromSourceObserver = function(__super__) {\n        inherits(WithLatestFromSourceObserver, __super__);\n        function WithLatestFromSourceObserver(o, cb, state) {\n            this._o = o;\n            this._cb = cb;\n            this._state = state;\n            __super__.call(this);\n        }\n        WithLatestFromSourceObserver.prototype.next = function(x) {\n            var allValues = [\n                x\n            ].concat(this._state.values);\n            if (!this._state.hasValueAll) {\n                return;\n            }\n            var res = tryCatch(this._cb).apply(null, allValues);\n            if (res === errorObj) {\n                return this._o.onError(res.e);\n            }\n            this._o.onNext(res);\n        };\n        WithLatestFromSourceObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        WithLatestFromSourceObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return WithLatestFromSourceObserver;\n    }(AbstractObserver);\n    /**\n   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.\n   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.\n   */ observableProto.withLatestFrom = function() {\n        if (arguments.length === 0) {\n            throw new Error(\"invalid arguments\");\n        }\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;\n        Array.isArray(args[0]) && (args = args[0]);\n        return new WithLatestFromObservable(this, args, resultSelector);\n    };\n    function falseFactory() {\n        return false;\n    }\n    function emptyArrayFactory() {\n        return [];\n    }\n    var ZipObservable = function(__super__) {\n        inherits(ZipObservable, __super__);\n        function ZipObservable(sources, resultSelector) {\n            this._s = sources;\n            this._cb = resultSelector;\n            __super__.call(this);\n        }\n        ZipObservable.prototype.subscribeCore = function(observer) {\n            var n = this._s.length, subscriptions = new Array(n), done = arrayInitialize(n, falseFactory), q = arrayInitialize(n, emptyArrayFactory);\n            for(var i = 0; i < n; i++){\n                var source = this._s[i], sad = new SingleAssignmentDisposable();\n                subscriptions[i] = sad;\n                isPromise(source) && (source = observableFromPromise(source));\n                sad.setDisposable(source.subscribe(new ZipObserver(observer, i, this, q, done)));\n            }\n            return new NAryDisposable(subscriptions);\n        };\n        return ZipObservable;\n    }(ObservableBase);\n    var ZipObserver = function(__super__) {\n        inherits(ZipObserver, __super__);\n        function ZipObserver(o, i, p, q, d) {\n            this._o = o;\n            this._i = i;\n            this._p = p;\n            this._q = q;\n            this._d = d;\n            __super__.call(this);\n        }\n        function notEmpty(x) {\n            return x.length > 0;\n        }\n        function shiftEach(x) {\n            return x.shift();\n        }\n        function notTheSame(i) {\n            return function(x, j) {\n                return j !== i;\n            };\n        }\n        ZipObserver.prototype.next = function(x) {\n            this._q[this._i].push(x);\n            if (this._q.every(notEmpty)) {\n                var queuedValues = this._q.map(shiftEach);\n                var res = tryCatch(this._p._cb).apply(null, queuedValues);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                this._o.onNext(res);\n            } else if (this._d.filter(notTheSame(this._i)).every(identity)) {\n                this._o.onCompleted();\n            }\n        };\n        ZipObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ZipObserver.prototype.completed = function() {\n            this._d[this._i] = true;\n            this._d.every(identity) && this._o.onCompleted();\n        };\n        return ZipObserver;\n    }(AbstractObserver);\n    /**\n   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.\n   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.\n   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.\n   */ observableProto.zip = function() {\n        if (arguments.length === 0) {\n            throw new Error(\"invalid arguments\");\n        }\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;\n        Array.isArray(args[0]) && (args = args[0]);\n        var parent = this;\n        args.unshift(parent);\n        return new ZipObservable(args, resultSelector);\n    };\n    /**\n   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.\n   * @param arguments Observable sources.\n   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.\n   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.\n   */ Observable.zip = function() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        if (Array.isArray(args[0])) {\n            args = isFunction(args[1]) ? args[0].concat(args[1]) : args[0];\n        }\n        var first = args.shift();\n        return first.zip.apply(first, args);\n    };\n    function falseFactory() {\n        return false;\n    }\n    function emptyArrayFactory() {\n        return [];\n    }\n    function argumentsToArray() {\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return args;\n    }\n    var ZipIterableObservable = function(__super__) {\n        inherits(ZipIterableObservable, __super__);\n        function ZipIterableObservable(sources, cb) {\n            this.sources = sources;\n            this._cb = cb;\n            __super__.call(this);\n        }\n        ZipIterableObservable.prototype.subscribeCore = function(o) {\n            var sources = this.sources, len = sources.length, subscriptions = new Array(len);\n            var state = {\n                q: arrayInitialize(len, emptyArrayFactory),\n                done: arrayInitialize(len, falseFactory),\n                cb: this._cb,\n                o: o\n            };\n            for(var i = 0; i < len; i++){\n                (function(i) {\n                    var source = sources[i], sad = new SingleAssignmentDisposable();\n                    (isArrayLike(source) || isIterable(source)) && (source = observableFrom(source));\n                    subscriptions[i] = sad;\n                    sad.setDisposable(source.subscribe(new ZipIterableObserver(state, i)));\n                })(i);\n            }\n            return new NAryDisposable(subscriptions);\n        };\n        return ZipIterableObservable;\n    }(ObservableBase);\n    var ZipIterableObserver = function(__super__) {\n        inherits(ZipIterableObserver, __super__);\n        function ZipIterableObserver(s, i) {\n            this._s = s;\n            this._i = i;\n            __super__.call(this);\n        }\n        function notEmpty(x) {\n            return x.length > 0;\n        }\n        function shiftEach(x) {\n            return x.shift();\n        }\n        function notTheSame(i) {\n            return function(x, j) {\n                return j !== i;\n            };\n        }\n        ZipIterableObserver.prototype.next = function(x) {\n            this._s.q[this._i].push(x);\n            if (this._s.q.every(notEmpty)) {\n                var queuedValues = this._s.q.map(shiftEach), res = tryCatch(this._s.cb).apply(null, queuedValues);\n                if (res === errorObj) {\n                    return this._s.o.onError(res.e);\n                }\n                this._s.o.onNext(res);\n            } else if (this._s.done.filter(notTheSame(this._i)).every(identity)) {\n                this._s.o.onCompleted();\n            }\n        };\n        ZipIterableObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        ZipIterableObserver.prototype.completed = function() {\n            this._s.done[this._i] = true;\n            this._s.done.every(identity) && this._s.o.onCompleted();\n        };\n        return ZipIterableObserver;\n    }(AbstractObserver);\n    /**\n * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.\n * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.\n * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.\n */ observableProto.zipIterable = function() {\n        if (arguments.length === 0) {\n            throw new Error(\"invalid arguments\");\n        }\n        var len = arguments.length, args = new Array(len);\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;\n        var parent = this;\n        args.unshift(parent);\n        return new ZipIterableObservable(args, resultSelector);\n    };\n    function asObservable(source) {\n        return function subscribe(o) {\n            return source.subscribe(o);\n        };\n    }\n    /**\n   *  Hides the identity of an observable sequence.\n   * @returns {Observable} An observable sequence that hides the identity of the source sequence.\n   */ observableProto.asObservable = function() {\n        return new AnonymousObservable(asObservable(this), this);\n    };\n    function toArray(x) {\n        return x.toArray();\n    }\n    function notEmpty(x) {\n        return x.length > 0;\n    }\n    /**\n   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.\n   * @param {Number} count Length of each buffer.\n   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.\n   * @returns {Observable} An observable sequence of buffers.\n   */ observableProto.bufferWithCount = observableProto.bufferCount = function(count, skip) {\n        typeof skip !== \"number\" && (skip = count);\n        return this.windowWithCount(count, skip).flatMap(toArray).filter(notEmpty);\n    };\n    var DematerializeObservable = function(__super__) {\n        inherits(DematerializeObservable, __super__);\n        function DematerializeObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        DematerializeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new DematerializeObserver(o));\n        };\n        return DematerializeObservable;\n    }(ObservableBase);\n    var DematerializeObserver = function(__super__) {\n        inherits(DematerializeObserver, __super__);\n        function DematerializeObserver(o) {\n            this._o = o;\n            __super__.call(this);\n        }\n        DematerializeObserver.prototype.next = function(x) {\n            x.accept(this._o);\n        };\n        DematerializeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        DematerializeObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return DematerializeObserver;\n    }(AbstractObserver);\n    /**\n   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.\n   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.\n   */ observableProto.dematerialize = function() {\n        return new DematerializeObservable(this);\n    };\n    var DistinctUntilChangedObservable = function(__super__) {\n        inherits(DistinctUntilChangedObservable, __super__);\n        function DistinctUntilChangedObservable(source, keyFn, comparer) {\n            this.source = source;\n            this.keyFn = keyFn;\n            this.comparer = comparer;\n            __super__.call(this);\n        }\n        DistinctUntilChangedObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new DistinctUntilChangedObserver(o, this.keyFn, this.comparer));\n        };\n        return DistinctUntilChangedObservable;\n    }(ObservableBase);\n    var DistinctUntilChangedObserver = function(__super__) {\n        inherits(DistinctUntilChangedObserver, __super__);\n        function DistinctUntilChangedObserver(o, keyFn, comparer) {\n            this.o = o;\n            this.keyFn = keyFn;\n            this.comparer = comparer;\n            this.hasCurrentKey = false;\n            this.currentKey = null;\n            __super__.call(this);\n        }\n        DistinctUntilChangedObserver.prototype.next = function(x) {\n            var key = x, comparerEquals;\n            if (isFunction(this.keyFn)) {\n                key = tryCatch(this.keyFn)(x);\n                if (key === errorObj) {\n                    return this.o.onError(key.e);\n                }\n            }\n            if (this.hasCurrentKey) {\n                comparerEquals = tryCatch(this.comparer)(this.currentKey, key);\n                if (comparerEquals === errorObj) {\n                    return this.o.onError(comparerEquals.e);\n                }\n            }\n            if (!this.hasCurrentKey || !comparerEquals) {\n                this.hasCurrentKey = true;\n                this.currentKey = key;\n                this.o.onNext(x);\n            }\n        };\n        DistinctUntilChangedObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        DistinctUntilChangedObserver.prototype.completed = function() {\n            this.o.onCompleted();\n        };\n        return DistinctUntilChangedObserver;\n    }(AbstractObserver);\n    /**\n  *  Returns an observable sequence that contains only distinct contiguous elements according to the keyFn and the comparer.\n  * @param {Function} [keyFn] A function to compute the comparison key for each element. If not provided, it projects the value.\n  * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.\n  * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.\n  */ observableProto.distinctUntilChanged = function(keyFn, comparer) {\n        comparer || (comparer = defaultComparer);\n        return new DistinctUntilChangedObservable(this, keyFn, comparer);\n    };\n    var TapObservable = function(__super__) {\n        inherits(TapObservable, __super__);\n        function TapObservable(source, observerOrOnNext, onError, onCompleted) {\n            this.source = source;\n            this._oN = observerOrOnNext;\n            this._oE = onError;\n            this._oC = onCompleted;\n            __super__.call(this);\n        }\n        TapObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o, this));\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(o, p) {\n            this.o = o;\n            this.t = !p._oN || isFunction(p._oN) ? observerCreate(p._oN || noop, p._oE || noop, p._oC || noop) : p._oN;\n            this.isStopped = false;\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            var res = tryCatch(this.t.onNext).call(this.t, x);\n            if (res === errorObj) {\n                this.o.onError(res.e);\n            }\n            this.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(err) {\n            var res = tryCatch(this.t.onError).call(this.t, err);\n            if (res === errorObj) {\n                return this.o.onError(res.e);\n            }\n            this.o.onError(err);\n        };\n        InnerObserver.prototype.completed = function() {\n            var res = tryCatch(this.t.onCompleted).call(this.t);\n            if (res === errorObj) {\n                return this.o.onError(res.e);\n            }\n            this.o.onCompleted();\n        };\n        return TapObservable;\n    }(ObservableBase);\n    /**\n  *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.\n  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n  * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an o.\n  * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n  * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.\n  * @returns {Observable} The source sequence with the side-effecting behavior applied.\n  */ observableProto[\"do\"] = observableProto.tap = observableProto.doAction = function(observerOrOnNext, onError, onCompleted) {\n        return new TapObservable(this, observerOrOnNext, onError, onCompleted);\n    };\n    /**\n  *  Invokes an action for each element in the observable sequence.\n  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n  * @param {Function} onNext Action to invoke for each element in the observable sequence.\n  * @param {Any} [thisArg] Object to use as this when executing callback.\n  * @returns {Observable} The source sequence with the side-effecting behavior applied.\n  */ observableProto.doOnNext = observableProto.tapOnNext = function(onNext, thisArg) {\n        return this.tap(typeof thisArg !== \"undefined\" ? function(x) {\n            onNext.call(thisArg, x);\n        } : onNext);\n    };\n    /**\n  *  Invokes an action upon exceptional termination of the observable sequence.\n  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n  * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.\n  * @param {Any} [thisArg] Object to use as this when executing callback.\n  * @returns {Observable} The source sequence with the side-effecting behavior applied.\n  */ observableProto.doOnError = observableProto.tapOnError = function(onError, thisArg) {\n        return this.tap(noop, typeof thisArg !== \"undefined\" ? function(e) {\n            onError.call(thisArg, e);\n        } : onError);\n    };\n    /**\n  *  Invokes an action upon graceful termination of the observable sequence.\n  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.\n  * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.\n  * @param {Any} [thisArg] Object to use as this when executing callback.\n  * @returns {Observable} The source sequence with the side-effecting behavior applied.\n  */ observableProto.doOnCompleted = observableProto.tapOnCompleted = function(onCompleted, thisArg) {\n        return this.tap(noop, null, typeof thisArg !== \"undefined\" ? function() {\n            onCompleted.call(thisArg);\n        } : onCompleted);\n    };\n    var FinallyObservable = function(__super__) {\n        inherits(FinallyObservable, __super__);\n        function FinallyObservable(source, fn, thisArg) {\n            this.source = source;\n            this._fn = bindCallback(fn, thisArg, 0);\n            __super__.call(this);\n        }\n        FinallyObservable.prototype.subscribeCore = function(o) {\n            var d = tryCatch(this.source.subscribe).call(this.source, o);\n            if (d === errorObj) {\n                this._fn();\n                thrower(d.e);\n            }\n            return new FinallyDisposable(d, this._fn);\n        };\n        function FinallyDisposable(s, fn) {\n            this.isDisposed = false;\n            this._s = s;\n            this._fn = fn;\n        }\n        FinallyDisposable.prototype.dispose = function() {\n            if (!this.isDisposed) {\n                var res = tryCatch(this._s.dispose).call(this._s);\n                this._fn();\n                res === errorObj && thrower(res.e);\n            }\n        };\n        return FinallyObservable;\n    }(ObservableBase);\n    /**\n   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.\n   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.\n   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.\n   */ observableProto[\"finally\"] = function(action, thisArg) {\n        return new FinallyObservable(this, action, thisArg);\n    };\n    var IgnoreElementsObservable = function(__super__) {\n        inherits(IgnoreElementsObservable, __super__);\n        function IgnoreElementsObservable(source) {\n            this.source = source;\n            __super__.call(this);\n        }\n        IgnoreElementsObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o));\n        };\n        function InnerObserver(o) {\n            this.o = o;\n            this.isStopped = false;\n        }\n        InnerObserver.prototype.onNext = noop;\n        InnerObserver.prototype.onError = function(err) {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.o.onError(err);\n            }\n        };\n        InnerObserver.prototype.onCompleted = function() {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.o.onCompleted();\n            }\n        };\n        InnerObserver.prototype.dispose = function() {\n            this.isStopped = true;\n        };\n        InnerObserver.prototype.fail = function(e) {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this.observer.onError(e);\n                return true;\n            }\n            return false;\n        };\n        return IgnoreElementsObservable;\n    }(ObservableBase);\n    /**\n   *  Ignores all elements in an observable sequence leaving only the termination messages.\n   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.\n   */ observableProto.ignoreElements = function() {\n        return new IgnoreElementsObservable(this);\n    };\n    var MaterializeObservable = function(__super__) {\n        inherits(MaterializeObservable, __super__);\n        function MaterializeObservable(source, fn) {\n            this.source = source;\n            __super__.call(this);\n        }\n        MaterializeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new MaterializeObserver(o));\n        };\n        return MaterializeObservable;\n    }(ObservableBase);\n    var MaterializeObserver = function(__super__) {\n        inherits(MaterializeObserver, __super__);\n        function MaterializeObserver(o) {\n            this._o = o;\n            __super__.call(this);\n        }\n        MaterializeObserver.prototype.next = function(x) {\n            this._o.onNext(notificationCreateOnNext(x));\n        };\n        MaterializeObserver.prototype.error = function(e) {\n            this._o.onNext(notificationCreateOnError(e));\n            this._o.onCompleted();\n        };\n        MaterializeObserver.prototype.completed = function() {\n            this._o.onNext(notificationCreateOnCompleted());\n            this._o.onCompleted();\n        };\n        return MaterializeObserver;\n    }(AbstractObserver);\n    /**\n   *  Materializes the implicit notifications of an observable sequence as explicit notification values.\n   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.\n   */ observableProto.materialize = function() {\n        return new MaterializeObservable(this);\n    };\n    /**\n   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.\n   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.\n   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.\n   */ observableProto.repeat = function(repeatCount) {\n        return enumerableRepeat(this, repeatCount).concat();\n    };\n    /**\n   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.\n   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);\n   *\n   * @example\n   *  var res = retried = retry.repeat();\n   *  var res = retried = retry.repeat(2);\n   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.\n   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.\n   */ observableProto.retry = function(retryCount) {\n        return enumerableRepeat(this, retryCount).catchError();\n    };\n    function repeat(value) {\n        return {\n            \"@@iterator\": function() {\n                return {\n                    next: function() {\n                        return {\n                            done: false,\n                            value: value\n                        };\n                    }\n                };\n            }\n        };\n    }\n    var RetryWhenObservable = function(__super__) {\n        function createDisposable(state) {\n            return {\n                isDisposed: false,\n                dispose: function() {\n                    if (!this.isDisposed) {\n                        this.isDisposed = true;\n                        state.isDisposed = true;\n                    }\n                }\n            };\n        }\n        function RetryWhenObservable(source, notifier) {\n            this.source = source;\n            this._notifier = notifier;\n            __super__.call(this);\n        }\n        inherits(RetryWhenObservable, __super__);\n        RetryWhenObservable.prototype.subscribeCore = function(o) {\n            var exceptions = new Subject(), notifier = new Subject(), handled = this._notifier(exceptions), notificationDisposable = handled.subscribe(notifier);\n            var e = this.source[\"@@iterator\"]();\n            var state = {\n                isDisposed: false\n            }, lastError, subscription = new SerialDisposable();\n            var cancelable = currentThreadScheduler.scheduleRecursive(null, function(_, recurse) {\n                if (state.isDisposed) {\n                    return;\n                }\n                var currentItem = e.next();\n                if (currentItem.done) {\n                    if (lastError) {\n                        o.onError(lastError);\n                    } else {\n                        o.onCompleted();\n                    }\n                    return;\n                }\n                // Check if promise\n                var currentValue = currentItem.value;\n                isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));\n                var outer = new SingleAssignmentDisposable();\n                var inner = new SingleAssignmentDisposable();\n                subscription.setDisposable(new BinaryDisposable(inner, outer));\n                outer.setDisposable(currentValue.subscribe(function(x) {\n                    o.onNext(x);\n                }, function(exn) {\n                    inner.setDisposable(notifier.subscribe(recurse, function(ex) {\n                        o.onError(ex);\n                    }, function() {\n                        o.onCompleted();\n                    }));\n                    exceptions.onNext(exn);\n                    outer.dispose();\n                }, function() {\n                    o.onCompleted();\n                }));\n            });\n            return new NAryDisposable([\n                notificationDisposable,\n                subscription,\n                cancelable,\n                createDisposable(state)\n            ]);\n        };\n        return RetryWhenObservable;\n    }(ObservableBase);\n    observableProto.retryWhen = function(notifier) {\n        return new RetryWhenObservable(repeat(this), notifier);\n    };\n    function repeat(value) {\n        return {\n            \"@@iterator\": function() {\n                return {\n                    next: function() {\n                        return {\n                            done: false,\n                            value: value\n                        };\n                    }\n                };\n            }\n        };\n    }\n    var RepeatWhenObservable = function(__super__) {\n        function createDisposable(state) {\n            return {\n                isDisposed: false,\n                dispose: function() {\n                    if (!this.isDisposed) {\n                        this.isDisposed = true;\n                        state.isDisposed = true;\n                    }\n                }\n            };\n        }\n        function RepeatWhenObservable(source, notifier) {\n            this.source = source;\n            this._notifier = notifier;\n            __super__.call(this);\n        }\n        inherits(RepeatWhenObservable, __super__);\n        RepeatWhenObservable.prototype.subscribeCore = function(o) {\n            var completions = new Subject(), notifier = new Subject(), handled = this._notifier(completions), notificationDisposable = handled.subscribe(notifier);\n            var e = this.source[\"@@iterator\"]();\n            var state = {\n                isDisposed: false\n            }, lastError, subscription = new SerialDisposable();\n            var cancelable = currentThreadScheduler.scheduleRecursive(null, function(_, recurse) {\n                if (state.isDisposed) {\n                    return;\n                }\n                var currentItem = e.next();\n                if (currentItem.done) {\n                    if (lastError) {\n                        o.onError(lastError);\n                    } else {\n                        o.onCompleted();\n                    }\n                    return;\n                }\n                // Check if promise\n                var currentValue = currentItem.value;\n                isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));\n                var outer = new SingleAssignmentDisposable();\n                var inner = new SingleAssignmentDisposable();\n                subscription.setDisposable(new BinaryDisposable(inner, outer));\n                outer.setDisposable(currentValue.subscribe(function(x) {\n                    o.onNext(x);\n                }, function(exn) {\n                    o.onError(exn);\n                }, function() {\n                    inner.setDisposable(notifier.subscribe(recurse, function(ex) {\n                        o.onError(ex);\n                    }, function() {\n                        o.onCompleted();\n                    }));\n                    completions.onNext(null);\n                    outer.dispose();\n                }));\n            });\n            return new NAryDisposable([\n                notificationDisposable,\n                subscription,\n                cancelable,\n                createDisposable(state)\n            ]);\n        };\n        return RepeatWhenObservable;\n    }(ObservableBase);\n    observableProto.repeatWhen = function(notifier) {\n        return new RepeatWhenObservable(repeat(this), notifier);\n    };\n    var ScanObservable = function(__super__) {\n        inherits(ScanObservable, __super__);\n        function ScanObservable(source, accumulator, hasSeed, seed) {\n            this.source = source;\n            this.accumulator = accumulator;\n            this.hasSeed = hasSeed;\n            this.seed = seed;\n            __super__.call(this);\n        }\n        ScanObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new ScanObserver(o, this));\n        };\n        return ScanObservable;\n    }(ObservableBase);\n    var ScanObserver = function(__super__) {\n        inherits(ScanObserver, __super__);\n        function ScanObserver(o, parent) {\n            this._o = o;\n            this._p = parent;\n            this._fn = parent.accumulator;\n            this._hs = parent.hasSeed;\n            this._s = parent.seed;\n            this._ha = false;\n            this._a = null;\n            this._hv = false;\n            this._i = 0;\n            __super__.call(this);\n        }\n        ScanObserver.prototype.next = function(x) {\n            !this._hv && (this._hv = true);\n            if (this._ha) {\n                this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);\n            } else {\n                this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;\n                this._ha = true;\n            }\n            if (this._a === errorObj) {\n                return this._o.onError(this._a.e);\n            }\n            this._o.onNext(this._a);\n            this._i++;\n        };\n        ScanObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        ScanObserver.prototype.completed = function() {\n            !this._hv && this._hs && this._o.onNext(this._s);\n            this._o.onCompleted();\n        };\n        return ScanObserver;\n    }(AbstractObserver);\n    /**\n  *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.\n  *  For aggregation behavior with no intermediate results, see Observable.aggregate.\n  * @param {Mixed} [seed] The initial accumulator value.\n  * @param {Function} accumulator An accumulator function to be invoked on each element.\n  * @returns {Observable} An observable sequence containing the accumulated values.\n  */ observableProto.scan = function() {\n        var hasSeed = false, seed, accumulator = arguments[0];\n        if (arguments.length === 2) {\n            hasSeed = true;\n            seed = arguments[1];\n        }\n        return new ScanObservable(this, accumulator, hasSeed, seed);\n    };\n    var SkipLastObservable = function(__super__) {\n        inherits(SkipLastObservable, __super__);\n        function SkipLastObservable(source, c) {\n            this.source = source;\n            this._c = c;\n            __super__.call(this);\n        }\n        SkipLastObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SkipLastObserver(o, this._c));\n        };\n        return SkipLastObservable;\n    }(ObservableBase);\n    var SkipLastObserver = function(__super__) {\n        inherits(SkipLastObserver, __super__);\n        function SkipLastObserver(o, c) {\n            this._o = o;\n            this._c = c;\n            this._q = [];\n            __super__.call(this);\n        }\n        SkipLastObserver.prototype.next = function(x) {\n            this._q.push(x);\n            this._q.length > this._c && this._o.onNext(this._q.shift());\n        };\n        SkipLastObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipLastObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SkipLastObserver;\n    }(AbstractObserver);\n    /**\n   *  Bypasses a specified number of elements at the end of an observable sequence.\n   * @description\n   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are\n   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.\n   * @param count Number of elements to bypass at the end of the source sequence.\n   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.\n   */ observableProto.skipLast = function(count) {\n        if (count < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        return new SkipLastObservable(this, count);\n    };\n    /**\n   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.\n   *  @example\n   *  var res = source.startWith(1, 2, 3);\n   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);\n   * @param {Arguments} args The specified values to prepend to the observable sequence\n   * @returns {Observable} The source sequence prepended with the specified values.\n   */ observableProto.startWith = function() {\n        var values, scheduler, start = 0;\n        if (!!arguments.length && isScheduler(arguments[0])) {\n            scheduler = arguments[0];\n            start = 1;\n        } else {\n            scheduler = immediateScheduler;\n        }\n        for(var args = [], i = start, len = arguments.length; i < len; i++){\n            args.push(arguments[i]);\n        }\n        return observableConcat.apply(null, [\n            observableFromArray(args, scheduler),\n            this\n        ]);\n    };\n    var TakeLastObserver = function(__super__) {\n        inherits(TakeLastObserver, __super__);\n        function TakeLastObserver(o, c) {\n            this._o = o;\n            this._c = c;\n            this._q = [];\n            __super__.call(this);\n        }\n        TakeLastObserver.prototype.next = function(x) {\n            this._q.push(x);\n            this._q.length > this._c && this._q.shift();\n        };\n        TakeLastObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TakeLastObserver.prototype.completed = function() {\n            while(this._q.length > 0){\n                this._o.onNext(this._q.shift());\n            }\n            this._o.onCompleted();\n        };\n        return TakeLastObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns a specified number of contiguous elements from the end of an observable sequence.\n   * @description\n   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of\n   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.\n   * @param {Number} count Number of elements to take from the end of the source sequence.\n   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.\n   */ observableProto.takeLast = function(count) {\n        if (count < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            return source.subscribe(new TakeLastObserver(o, count));\n        }, source);\n    };\n    var TakeLastBufferObserver = function(__super__) {\n        inherits(TakeLastBufferObserver, __super__);\n        function TakeLastBufferObserver(o, c) {\n            this._o = o;\n            this._c = c;\n            this._q = [];\n            __super__.call(this);\n        }\n        TakeLastBufferObserver.prototype.next = function(x) {\n            this._q.push(x);\n            this._q.length > this._c && this._q.shift();\n        };\n        TakeLastBufferObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TakeLastBufferObserver.prototype.completed = function() {\n            this._o.onNext(this._q);\n            this._o.onCompleted();\n        };\n        return TakeLastBufferObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.\n   *\n   * @description\n   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the\n   *  source sequence, this buffer is produced on the result sequence.\n   * @param {Number} count Number of elements to take from the end of the source sequence.\n   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.\n   */ observableProto.takeLastBuffer = function(count) {\n        if (count < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            return source.subscribe(new TakeLastBufferObserver(o, count));\n        }, source);\n    };\n    /**\n   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.\n   * @param {Number} count Length of each window.\n   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.\n   * @returns {Observable} An observable sequence of windows.\n   */ observableProto.windowWithCount = observableProto.windowCount = function(count, skip) {\n        var source = this;\n        +count || (count = 0);\n        Math.abs(count) === Infinity && (count = 0);\n        if (count <= 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        skip == null && (skip = count);\n        +skip || (skip = 0);\n        Math.abs(skip) === Infinity && (skip = 0);\n        if (skip <= 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        return new AnonymousObservable(function(observer) {\n            var m = new SingleAssignmentDisposable(), refCountDisposable = new RefCountDisposable(m), n = 0, q = [];\n            function createWindow() {\n                var s = new Subject();\n                q.push(s);\n                observer.onNext(addRef(s, refCountDisposable));\n            }\n            createWindow();\n            m.setDisposable(source.subscribe(function(x) {\n                for(var i = 0, len = q.length; i < len; i++){\n                    q[i].onNext(x);\n                }\n                var c = n - count + 1;\n                c >= 0 && c % skip === 0 && q.shift().onCompleted();\n                ++n % skip === 0 && createWindow();\n            }, function(e) {\n                while(q.length > 0){\n                    q.shift().onError(e);\n                }\n                observer.onError(e);\n            }, function() {\n                while(q.length > 0){\n                    q.shift().onCompleted();\n                }\n                observer.onCompleted();\n            }));\n            return refCountDisposable;\n        }, source);\n    };\n    observableProto.flatMapConcat = observableProto.concatMap = function(selector, resultSelector, thisArg) {\n        return new FlatMapObservable(this, selector, resultSelector, thisArg).merge(1);\n    };\n    /**\n   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.\n   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.\n   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.\n   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.\n   * @param {Any} [thisArg] An optional \"this\" to use to invoke each transform.\n   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.\n   */ observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {\n        var source = this, onNextFunc = bindCallback(onNext, thisArg, 2), onErrorFunc = bindCallback(onError, thisArg, 1), onCompletedFunc = bindCallback(onCompleted, thisArg, 0);\n        return new AnonymousObservable(function(observer) {\n            var index = 0;\n            return source.subscribe(function(x) {\n                var result;\n                try {\n                    result = onNextFunc(x, index++);\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n            }, function(err) {\n                var result;\n                try {\n                    result = onErrorFunc(err);\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n                observer.onCompleted();\n            }, function() {\n                var result;\n                try {\n                    result = onCompletedFunc();\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n                observer.onCompleted();\n            });\n        }, this).concatAll();\n    };\n    var DefaultIfEmptyObserver = function(__super__) {\n        inherits(DefaultIfEmptyObserver, __super__);\n        function DefaultIfEmptyObserver(o, d) {\n            this._o = o;\n            this._d = d;\n            this._f = false;\n            __super__.call(this);\n        }\n        DefaultIfEmptyObserver.prototype.next = function(x) {\n            this._f = true;\n            this._o.onNext(x);\n        };\n        DefaultIfEmptyObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        DefaultIfEmptyObserver.prototype.completed = function() {\n            !this._f && this._o.onNext(this._d);\n            this._o.onCompleted();\n        };\n        return DefaultIfEmptyObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.\n   *\n   *  var res = obs = xs.defaultIfEmpty();\n   *  2 - obs = xs.defaultIfEmpty(false);\n   *\n   * @memberOf Observable#\n   * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.\n   * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.\n   */ observableProto.defaultIfEmpty = function(defaultValue) {\n        var source = this;\n        defaultValue === undefined && (defaultValue = null);\n        return new AnonymousObservable(function(o) {\n            return source.subscribe(new DefaultIfEmptyObserver(o, defaultValue));\n        }, source);\n    };\n    // Swap out for Array.findIndex\n    function arrayIndexOfComparer(array, item, comparer) {\n        for(var i = 0, len = array.length; i < len; i++){\n            if (comparer(array[i], item)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function HashSet(comparer) {\n        this.comparer = comparer;\n        this.set = [];\n    }\n    HashSet.prototype.push = function(value) {\n        var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;\n        retValue && this.set.push(value);\n        return retValue;\n    };\n    var DistinctObservable = function(__super__) {\n        inherits(DistinctObservable, __super__);\n        function DistinctObservable(source, keyFn, cmpFn) {\n            this.source = source;\n            this._keyFn = keyFn;\n            this._cmpFn = cmpFn;\n            __super__.call(this);\n        }\n        DistinctObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new DistinctObserver(o, this._keyFn, this._cmpFn));\n        };\n        return DistinctObservable;\n    }(ObservableBase);\n    var DistinctObserver = function(__super__) {\n        inherits(DistinctObserver, __super__);\n        function DistinctObserver(o, keyFn, cmpFn) {\n            this._o = o;\n            this._keyFn = keyFn;\n            this._h = new HashSet(cmpFn);\n            __super__.call(this);\n        }\n        DistinctObserver.prototype.next = function(x) {\n            var key = x;\n            if (isFunction(this._keyFn)) {\n                key = tryCatch(this._keyFn)(x);\n                if (key === errorObj) {\n                    return this._o.onError(key.e);\n                }\n            }\n            this._h.push(key) && this._o.onNext(x);\n        };\n        DistinctObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        DistinctObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return DistinctObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.\n   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.\n   *\n   * @example\n   *  var res = obs = xs.distinct();\n   *  2 - obs = xs.distinct(function (x) { return x.id; });\n   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });\n   * @param {Function} [keySelector]  A function to compute the comparison key for each element.\n   * @param {Function} [comparer]  Used to compare items in the collection.\n   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.\n   */ observableProto.distinct = function(keySelector, comparer) {\n        comparer || (comparer = defaultComparer);\n        return new DistinctObservable(this, keySelector, comparer);\n    };\n    var MapObservable = function(__super__) {\n        inherits(MapObservable, __super__);\n        function MapObservable(source, selector, thisArg) {\n            this.source = source;\n            this.selector = bindCallback(selector, thisArg, 3);\n            __super__.call(this);\n        }\n        function innerMap(selector, self1) {\n            return function(x, i, o) {\n                return selector.call(this, self1.selector(x, i, o), i, o);\n            };\n        }\n        MapObservable.prototype.internalMap = function(selector, thisArg) {\n            return new MapObservable(this.source, innerMap(selector, this), thisArg);\n        };\n        MapObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o, this.selector, this));\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(o, selector, source) {\n            this.o = o;\n            this.selector = selector;\n            this.source = source;\n            this.i = 0;\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            var result = tryCatch(this.selector)(x, this.i++, this.source);\n            if (result === errorObj) {\n                return this.o.onError(result.e);\n            }\n            this.o.onNext(result);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.o.onCompleted();\n        };\n        return MapObservable;\n    }(ObservableBase);\n    /**\n  * Projects each element of an observable sequence into a new form by incorporating the element's index.\n  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.\n  * @param {Any} [thisArg] Object to use as this when executing callback.\n  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.\n  */ observableProto.map = observableProto.select = function(selector, thisArg) {\n        var selectorFn = typeof selector === \"function\" ? selector : function() {\n            return selector;\n        };\n        return this instanceof MapObservable ? this.internalMap(selectorFn, thisArg) : new MapObservable(this, selectorFn, thisArg);\n    };\n    function plucker(args, len) {\n        return function mapper(x) {\n            var currentProp = x;\n            for(var i = 0; i < len; i++){\n                var p = currentProp[args[i]];\n                if (typeof p !== \"undefined\") {\n                    currentProp = p;\n                } else {\n                    return undefined;\n                }\n            }\n            return currentProp;\n        };\n    }\n    /**\n   * Retrieves the value of a specified nested property from all elements in\n   * the Observable sequence.\n   * @param {Arguments} arguments The nested properties to pluck.\n   * @returns {Observable} Returns a new Observable sequence of property values.\n   */ observableProto.pluck = function() {\n        var len = arguments.length, args = new Array(len);\n        if (len === 0) {\n            throw new Error(\"List of properties cannot be empty.\");\n        }\n        for(var i = 0; i < len; i++){\n            args[i] = arguments[i];\n        }\n        return this.map(plucker(args, len));\n    };\n    /**\n   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.\n   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.\n   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.\n   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.\n   * @param {Any} [thisArg] An optional \"this\" to use to invoke each transform.\n   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.\n   */ observableProto.flatMapObserver = observableProto.selectManyObserver = function(onNext, onError, onCompleted, thisArg) {\n        var source = this;\n        return new AnonymousObservable(function(observer) {\n            var index = 0;\n            return source.subscribe(function(x) {\n                var result;\n                try {\n                    result = onNext.call(thisArg, x, index++);\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n            }, function(err) {\n                var result;\n                try {\n                    result = onError.call(thisArg, err);\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n                observer.onCompleted();\n            }, function() {\n                var result;\n                try {\n                    result = onCompleted.call(thisArg);\n                } catch (e) {\n                    observer.onError(e);\n                    return;\n                }\n                isPromise(result) && (result = observableFromPromise(result));\n                observer.onNext(result);\n                observer.onCompleted();\n            });\n        }, source).mergeAll();\n    };\n    observableProto.flatMap = observableProto.selectMany = observableProto.mergeMap = function(selector, resultSelector, thisArg) {\n        return new FlatMapObservable(this, selector, resultSelector, thisArg).mergeAll();\n    };\n    observableProto.flatMapLatest = observableProto.switchMap = function(selector, resultSelector, thisArg) {\n        return new FlatMapObservable(this, selector, resultSelector, thisArg).switchLatest();\n    };\n    var SkipObservable = function(__super__) {\n        inherits(SkipObservable, __super__);\n        function SkipObservable(source, count) {\n            this.source = source;\n            this._count = count;\n            __super__.call(this);\n        }\n        SkipObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SkipObserver(o, this._count));\n        };\n        function SkipObserver(o, c) {\n            this._o = o;\n            this._r = c;\n            AbstractObserver.call(this);\n        }\n        inherits(SkipObserver, AbstractObserver);\n        SkipObserver.prototype.next = function(x) {\n            if (this._r <= 0) {\n                this._o.onNext(x);\n            } else {\n                this._r--;\n            }\n        };\n        SkipObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SkipObservable;\n    }(ObservableBase);\n    /**\n   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.\n   * @param {Number} count The number of elements to skip before returning the remaining elements.\n   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.\n   */ observableProto.skip = function(count) {\n        if (count < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        return new SkipObservable(this, count);\n    };\n    var SkipWhileObservable = function(__super__) {\n        inherits(SkipWhileObservable, __super__);\n        function SkipWhileObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        SkipWhileObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SkipWhileObserver(o, this));\n        };\n        return SkipWhileObservable;\n    }(ObservableBase);\n    var SkipWhileObserver = function(__super__) {\n        inherits(SkipWhileObserver, __super__);\n        function SkipWhileObserver(o, p) {\n            this._o = o;\n            this._p = p;\n            this._i = 0;\n            this._r = false;\n            __super__.call(this);\n        }\n        SkipWhileObserver.prototype.next = function(x) {\n            if (!this._r) {\n                var res = tryCatch(this._p._fn)(x, this._i++, this._p);\n                if (res === errorObj) {\n                    return this._o.onError(res.e);\n                }\n                this._r = !res;\n            }\n            this._r && this._o.onNext(x);\n        };\n        SkipWhileObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipWhileObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SkipWhileObserver;\n    }(AbstractObserver);\n    /**\n   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.\n   *  The element's index is used in the logic of the predicate function.\n   *\n   *  var res = source.skipWhile(function (value) { return value < 10; });\n   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });\n   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.\n   */ observableProto.skipWhile = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return new SkipWhileObservable(this, fn);\n    };\n    var TakeObservable = function(__super__) {\n        inherits(TakeObservable, __super__);\n        function TakeObservable(source, count) {\n            this.source = source;\n            this._count = count;\n            __super__.call(this);\n        }\n        TakeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new TakeObserver(o, this._count));\n        };\n        function TakeObserver(o, c) {\n            this._o = o;\n            this._c = c;\n            this._r = c;\n            AbstractObserver.call(this);\n        }\n        inherits(TakeObserver, AbstractObserver);\n        TakeObserver.prototype.next = function(x) {\n            if (this._r-- > 0) {\n                this._o.onNext(x);\n                this._r <= 0 && this._o.onCompleted();\n            }\n        };\n        TakeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TakeObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return TakeObservable;\n    }(ObservableBase);\n    /**\n   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).\n   * @param {Number} count The number of elements to return.\n   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name=\"count count</paramref> is set to 0.\n   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.\n   */ observableProto.take = function(count, scheduler) {\n        if (count < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n        if (count === 0) {\n            return observableEmpty(scheduler);\n        }\n        return new TakeObservable(this, count);\n    };\n    var TakeWhileObservable = function(__super__) {\n        inherits(TakeWhileObservable, __super__);\n        function TakeWhileObservable(source, fn) {\n            this.source = source;\n            this._fn = fn;\n            __super__.call(this);\n        }\n        TakeWhileObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new TakeWhileObserver(o, this));\n        };\n        return TakeWhileObservable;\n    }(ObservableBase);\n    var TakeWhileObserver = function(__super__) {\n        inherits(TakeWhileObserver, __super__);\n        function TakeWhileObserver(o, p) {\n            this._o = o;\n            this._p = p;\n            this._i = 0;\n            this._r = true;\n            __super__.call(this);\n        }\n        TakeWhileObserver.prototype.next = function(x) {\n            if (this._r) {\n                this._r = tryCatch(this._p._fn)(x, this._i++, this._p);\n                if (this._r === errorObj) {\n                    return this._o.onError(this._r.e);\n                }\n            }\n            if (this._r) {\n                this._o.onNext(x);\n            } else {\n                this._o.onCompleted();\n            }\n        };\n        TakeWhileObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TakeWhileObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return TakeWhileObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns elements from an observable sequence as long as a specified condition is true.\n   *  The element's index is used in the logic of the predicate function.\n   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.\n   * @param {Any} [thisArg] Object to use as this when executing callback.\n   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.\n   */ observableProto.takeWhile = function(predicate, thisArg) {\n        var fn = bindCallback(predicate, thisArg, 3);\n        return new TakeWhileObservable(this, fn);\n    };\n    var FilterObservable = function(__super__) {\n        inherits(FilterObservable, __super__);\n        function FilterObservable(source, predicate, thisArg) {\n            this.source = source;\n            this.predicate = bindCallback(predicate, thisArg, 3);\n            __super__.call(this);\n        }\n        FilterObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new InnerObserver(o, this.predicate, this));\n        };\n        function innerPredicate(predicate, self1) {\n            return function(x, i, o) {\n                return self1.predicate(x, i, o) && predicate.call(this, x, i, o);\n            };\n        }\n        FilterObservable.prototype.internalFilter = function(predicate, thisArg) {\n            return new FilterObservable(this.source, innerPredicate(predicate, this), thisArg);\n        };\n        inherits(InnerObserver, AbstractObserver);\n        function InnerObserver(o, predicate, source) {\n            this.o = o;\n            this.predicate = predicate;\n            this.source = source;\n            this.i = 0;\n            AbstractObserver.call(this);\n        }\n        InnerObserver.prototype.next = function(x) {\n            var shouldYield = tryCatch(this.predicate)(x, this.i++, this.source);\n            if (shouldYield === errorObj) {\n                return this.o.onError(shouldYield.e);\n            }\n            shouldYield && this.o.onNext(x);\n        };\n        InnerObserver.prototype.error = function(e) {\n            this.o.onError(e);\n        };\n        InnerObserver.prototype.completed = function() {\n            this.o.onCompleted();\n        };\n        return FilterObservable;\n    }(ObservableBase);\n    /**\n  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.\n  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.\n  * @param {Any} [thisArg] Object to use as this when executing callback.\n  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.\n  */ observableProto.filter = observableProto.where = function(predicate, thisArg) {\n        return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) : new FilterObservable(this, predicate, thisArg);\n    };\n    var TransduceObserver = function(__super__) {\n        inherits(TransduceObserver, __super__);\n        function TransduceObserver(o, xform) {\n            this._o = o;\n            this._xform = xform;\n            __super__.call(this);\n        }\n        TransduceObserver.prototype.next = function(x) {\n            var res = tryCatch(this._xform[\"@@transducer/step\"]).call(this._xform, this._o, x);\n            if (res === errorObj) {\n                this._o.onError(res.e);\n            }\n        };\n        TransduceObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TransduceObserver.prototype.completed = function() {\n            this._xform[\"@@transducer/result\"](this._o);\n        };\n        return TransduceObserver;\n    }(AbstractObserver);\n    function transformForObserver(o) {\n        return {\n            \"@@transducer/init\": function() {\n                return o;\n            },\n            \"@@transducer/step\": function(obs, input) {\n                return obs.onNext(input);\n            },\n            \"@@transducer/result\": function(obs) {\n                return obs.onCompleted();\n            }\n        };\n    }\n    /**\n   * Executes a transducer to transform the observable sequence\n   * @param {Transducer} transducer A transducer to execute\n   * @returns {Observable} An Observable sequence containing the results from the transducer.\n   */ observableProto.transduce = function(transducer) {\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            var xform = transducer(transformForObserver(o));\n            return source.subscribe(new TransduceObserver(o, xform));\n        }, source);\n    };\n    var AnonymousObservable = Rx.AnonymousObservable = function(__super__) {\n        inherits(AnonymousObservable, __super__);\n        // Fix subscriber to check for undefined or function returned to decorate as Disposable\n        function fixSubscriber(subscriber) {\n            return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;\n        }\n        function setDisposable(s, state) {\n            var ado = state[0], self1 = state[1];\n            var sub = tryCatch(self1.__subscribe).call(self1, ado);\n            if (sub === errorObj && !ado.fail(errorObj.e)) {\n                thrower(errorObj.e);\n            }\n            ado.setDisposable(fixSubscriber(sub));\n        }\n        function AnonymousObservable(subscribe, parent) {\n            this.source = parent;\n            this.__subscribe = subscribe;\n            __super__.call(this);\n        }\n        AnonymousObservable.prototype._subscribe = function(o) {\n            var ado = new AutoDetachObserver(o), state = [\n                ado,\n                this\n            ];\n            if (currentThreadScheduler.scheduleRequired()) {\n                currentThreadScheduler.schedule(state, setDisposable);\n            } else {\n                setDisposable(null, state);\n            }\n            return ado;\n        };\n        return AnonymousObservable;\n    }(Observable);\n    var AutoDetachObserver = function(__super__) {\n        inherits(AutoDetachObserver, __super__);\n        function AutoDetachObserver(observer) {\n            __super__.call(this);\n            this.observer = observer;\n            this.m = new SingleAssignmentDisposable();\n        }\n        var AutoDetachObserverPrototype = AutoDetachObserver.prototype;\n        AutoDetachObserverPrototype.next = function(value) {\n            var result = tryCatch(this.observer.onNext).call(this.observer, value);\n            if (result === errorObj) {\n                this.dispose();\n                thrower(result.e);\n            }\n        };\n        AutoDetachObserverPrototype.error = function(err) {\n            var result = tryCatch(this.observer.onError).call(this.observer, err);\n            this.dispose();\n            result === errorObj && thrower(result.e);\n        };\n        AutoDetachObserverPrototype.completed = function() {\n            var result = tryCatch(this.observer.onCompleted).call(this.observer);\n            this.dispose();\n            result === errorObj && thrower(result.e);\n        };\n        AutoDetachObserverPrototype.setDisposable = function(value) {\n            this.m.setDisposable(value);\n        };\n        AutoDetachObserverPrototype.getDisposable = function() {\n            return this.m.getDisposable();\n        };\n        AutoDetachObserverPrototype.dispose = function() {\n            __super__.prototype.dispose.call(this);\n            this.m.dispose();\n        };\n        return AutoDetachObserver;\n    }(AbstractObserver);\n    var InnerSubscription = function(s, o) {\n        this._s = s;\n        this._o = o;\n    };\n    InnerSubscription.prototype.dispose = function() {\n        if (!this._s.isDisposed && this._o !== null) {\n            var idx = this._s.observers.indexOf(this._o);\n            this._s.observers.splice(idx, 1);\n            this._o = null;\n        }\n    };\n    /**\n   *  Represents an object that is both an observable sequence as well as an observer.\n   *  Each notification is broadcasted to all subscribed observers.\n   */ var Subject = Rx.Subject = function(__super__) {\n        inherits(Subject, __super__);\n        function Subject() {\n            __super__.call(this);\n            this.isDisposed = false;\n            this.isStopped = false;\n            this.observers = [];\n            this.hasError = false;\n        }\n        addProperties(Subject.prototype, Observer.prototype, {\n            _subscribe: function(o) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.observers.push(o);\n                    return new InnerSubscription(this, o);\n                }\n                if (this.hasError) {\n                    o.onError(this.error);\n                    return disposableEmpty;\n                }\n                o.onCompleted();\n                return disposableEmpty;\n            },\n            /**\n       * Indicates whether the subject has observers subscribed to it.\n       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.\n       */ hasObservers: function() {\n                checkDisposed(this);\n                return this.observers.length > 0;\n            },\n            /**\n       * Notifies all subscribed observers about the end of the sequence.\n       */ onCompleted: function() {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.isStopped = true;\n                    for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                        os[i].onCompleted();\n                    }\n                    this.observers.length = 0;\n                }\n            },\n            /**\n       * Notifies all subscribed observers about the exception.\n       * @param {Mixed} error The exception to send to all observers.\n       */ onError: function(error) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.isStopped = true;\n                    this.error = error;\n                    this.hasError = true;\n                    for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                        os[i].onError(error);\n                    }\n                    this.observers.length = 0;\n                }\n            },\n            /**\n       * Notifies all subscribed observers about the arrival of the specified element in the sequence.\n       * @param {Mixed} value The value to send to all observers.\n       */ onNext: function(value) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                        os[i].onNext(value);\n                    }\n                }\n            },\n            /**\n       * Unsubscribe all observers and release resources.\n       */ dispose: function() {\n                this.isDisposed = true;\n                this.observers = null;\n            }\n        });\n        /**\n     * Creates a subject from the specified observer and observable.\n     * @param {Observer} observer The observer used to send messages to the subject.\n     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.\n     * @returns {Subject} Subject implemented using the given observer and observable.\n     */ Subject.create = function(observer, observable) {\n            return new AnonymousSubject(observer, observable);\n        };\n        return Subject;\n    }(Observable);\n    /**\n   *  Represents the result of an asynchronous operation.\n   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.\n   */ var AsyncSubject = Rx.AsyncSubject = function(__super__) {\n        inherits(AsyncSubject, __super__);\n        /**\n     * Creates a subject that can only receive one value and that value is cached for all future observations.\n     * @constructor\n     */ function AsyncSubject() {\n            __super__.call(this);\n            this.isDisposed = false;\n            this.isStopped = false;\n            this.hasValue = false;\n            this.observers = [];\n            this.hasError = false;\n        }\n        addProperties(AsyncSubject.prototype, Observer.prototype, {\n            _subscribe: function(o) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.observers.push(o);\n                    return new InnerSubscription(this, o);\n                }\n                if (this.hasError) {\n                    o.onError(this.error);\n                } else if (this.hasValue) {\n                    o.onNext(this.value);\n                    o.onCompleted();\n                } else {\n                    o.onCompleted();\n                }\n                return disposableEmpty;\n            },\n            /**\n       * Indicates whether the subject has observers subscribed to it.\n       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.\n       */ hasObservers: function() {\n                checkDisposed(this);\n                return this.observers.length > 0;\n            },\n            /**\n       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).\n       */ onCompleted: function() {\n                var i, len;\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.isStopped = true;\n                    var os = cloneArray(this.observers), len = os.length;\n                    if (this.hasValue) {\n                        for(i = 0; i < len; i++){\n                            var o = os[i];\n                            o.onNext(this.value);\n                            o.onCompleted();\n                        }\n                    } else {\n                        for(i = 0; i < len; i++){\n                            os[i].onCompleted();\n                        }\n                    }\n                    this.observers.length = 0;\n                }\n            },\n            /**\n       * Notifies all subscribed observers about the error.\n       * @param {Mixed} error The Error to send to all observers.\n       */ onError: function(error) {\n                checkDisposed(this);\n                if (!this.isStopped) {\n                    this.isStopped = true;\n                    this.hasError = true;\n                    this.error = error;\n                    for(var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++){\n                        os[i].onError(error);\n                    }\n                    this.observers.length = 0;\n                }\n            },\n            /**\n       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.\n       * @param {Mixed} value The value to store in the subject.\n       */ onNext: function(value) {\n                checkDisposed(this);\n                if (this.isStopped) {\n                    return;\n                }\n                this.value = value;\n                this.hasValue = true;\n            },\n            /**\n       * Unsubscribe all observers and release resources.\n       */ dispose: function() {\n                this.isDisposed = true;\n                this.observers = null;\n                this.error = null;\n                this.value = null;\n            }\n        });\n        return AsyncSubject;\n    }(Observable);\n    var AnonymousSubject = Rx.AnonymousSubject = function(__super__) {\n        inherits(AnonymousSubject, __super__);\n        function AnonymousSubject(observer, observable) {\n            this.observer = observer;\n            this.observable = observable;\n            __super__.call(this);\n        }\n        addProperties(AnonymousSubject.prototype, Observer.prototype, {\n            _subscribe: function(o) {\n                return this.observable.subscribe(o);\n            },\n            onCompleted: function() {\n                this.observer.onCompleted();\n            },\n            onError: function(error) {\n                this.observer.onError(error);\n            },\n            onNext: function(value) {\n                this.observer.onNext(value);\n            }\n        });\n        return AnonymousSubject;\n    }(Observable);\n    if (true) {\n        root.Rx = Rx;\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return Rx;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n    // All code before this point will be filtered from stack traces.\n    var rEndingLine = captureLine();\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.sorting.js":
/*!********************************************!*\
  !*** ./node_modules/rx/dist/rx.sorting.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    var Observable = Rx.Observable, observableProto = Observable.prototype, AnonymousObservable = Rx.AnonymousObservable, observableNever = Observable.never, isEqual = Rx.internals.isEqual, defaultSubComparer = Rx.helpers.defaultSubComparer;\n    /**\n   * jortSort checks if your inputs are sorted.  Note that this is only for a sequence with an end.\n   * See http://jort.technology/ for full details.\n   * @returns {Observable} An observable which has a single value of true if sorted, else false.\n   */ observableProto.jortSort = function() {\n        return this.jortSortUntil(observableNever());\n    };\n    /**\n   * jortSort checks if your inputs are sorted until another Observable sequence fires.\n   * See http://jort.technology/ for full details.\n   * @returns {Observable} An observable which has a single value of true if sorted, else false.\n   */ observableProto.jortSortUntil = function(other) {\n        var source = this;\n        return new AnonymousObservable(function(observer) {\n            var arr = [];\n            return source.takeUntil(other).subscribe(arr.push.bind(arr), observer.onError.bind(observer), function() {\n                var sorted = arr.slice(0).sort(defaultSubComparer);\n                observer.onNext(isEqual(arr, sorted));\n                observer.onCompleted();\n            });\n        }, source);\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcngvZGlzdC9yeC5zb3J0aW5nLmpzIiwibWFwcGluZ3MiOiI7QUFBQSw2S0FBNkc7O0FBRTNHLFVBQVVBLE9BQU87SUFDakIsSUFBSUMsY0FBYztRQUNoQixZQUFZO1FBQ1osVUFBVTtJQUNaO0lBRUEsU0FBU0MsWUFBWUMsS0FBSztRQUN4QixPQUFPLFNBQVVBLE1BQU1DLE1BQU0sS0FBS0EsU0FBVUQsUUFBUTtJQUN0RDtJQUVBLElBQUlFLGNBQWMsV0FBWSxDQUFDLE9BQU9DLFFBQVEsSUFBSUEsV0FBVyxDQUFDQSxRQUFRQyxRQUFRLEdBQUlELFVBQVU7SUFDNUYsSUFBSUUsYUFBYSxXQUFZLENBQUMsUUFBYUMsQ0FBQyxJQUFJQSxVQUFVLENBQUNBLE9BQU9GLFFBQVEsR0FBSUUsU0FBUztJQUN2RixJQUFJQyxhQUFhUixZQUFZRyxlQUFlRyxjQUFjLE9BQU9HLFdBQVcsWUFBWUE7SUFDeEYsSUFBSUMsV0FBV1YsWUFBWUQsV0FBVyxDQUFDLE9BQU9ZLEtBQUssSUFBSUE7SUFDdkQsSUFBSUMsYUFBYVosWUFBWUQsV0FBVyxDQUFDLFlBQWMsSUFBSWM7SUFDM0QsSUFBSUMsZ0JBQWdCLGNBQWVSLFdBQVdGLE9BQU8sS0FBS0QsY0FBZUEsY0FBYztJQUN2RixJQUFJWSxhQUFhZixZQUFZRCxXQUFXLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJO0lBQzdELElBQUlpQixPQUFPUixjQUFlLGVBQWlCTyxDQUFBQSxjQUFjQSxXQUFXRixNQUFNLEtBQU1ELGNBQWVGLFlBQVlLLGNBQWNFLFNBQVM7SUFFbEksOEJBQThCO0lBQzlCLElBQUksSUFBMEMsRUFBRTtRQUM5Q0MsaUNBQU87WUFBQztTQUFPLG1DQUFFLFNBQVVFLEVBQUUsRUFBRWhCLFFBQU87WUFDcEMsT0FBT04sUUFBUWtCLE1BQU1aLFVBQVNnQjtRQUNoQyxDQUFDO0FBQUEsa0dBQUM7SUFDSixPQUFPLEVBSU47QUFDSCxHQUFFRSxJQUFJLENBQUMsUUFBTSxTQUFVTixJQUFJLEVBQUVPLEdBQUcsRUFBRUgsRUFBRSxFQUFFSSxTQUFTO0lBRTdDLElBQUlDLGFBQWFMLEdBQUdLLFVBQVUsRUFDNUJDLGtCQUFrQkQsV0FBV0UsU0FBUyxFQUN0Q0Msc0JBQXNCUixHQUFHUSxtQkFBbUIsRUFDNUNDLGtCQUFrQkosV0FBV0ssS0FBSyxFQUNsQ0MsVUFBVVgsR0FBR1ksU0FBUyxDQUFDRCxPQUFPLEVBQzlCRSxxQkFBcUJiLEdBQUdjLE9BQU8sQ0FBQ0Qsa0JBQWtCO0lBRXBEOzs7O0dBSUMsR0FDRFAsZ0JBQWdCUyxRQUFRLEdBQUc7UUFDekIsT0FBTyxJQUFJLENBQUNDLGFBQWEsQ0FBQ1A7SUFDNUI7SUFFQTs7OztHQUlDLEdBQ0RILGdCQUFnQlUsYUFBYSxHQUFHLFNBQVVDLEtBQUs7UUFDN0MsSUFBSUMsU0FBUyxJQUFJO1FBQ2pCLE9BQU8sSUFBSVYsb0JBQW9CLFNBQVVXLFFBQVE7WUFDL0MsSUFBSUMsTUFBTSxFQUFFO1lBQ1osT0FBT0YsT0FBT0csU0FBUyxDQUFDSixPQUFPSyxTQUFTLENBQ3RDRixJQUFJRyxJQUFJLENBQUNDLElBQUksQ0FBQ0osTUFDZEQsU0FBU00sT0FBTyxDQUFDRCxJQUFJLENBQUNMLFdBQ3RCO2dCQUNFLElBQUlPLFNBQVNOLElBQUlPLEtBQUssQ0FBQyxHQUFHQyxJQUFJLENBQUNmO2dCQUMvQk0sU0FBU1UsTUFBTSxDQUFDbEIsUUFBUVMsS0FBS007Z0JBQzdCUCxTQUFTVyxXQUFXO1lBQ3RCO1FBQ0osR0FBR1o7SUFDTDtJQUVBLE9BQU9sQjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VydmVyLWFjdGlvbi8uL25vZGVfbW9kdWxlcy9yeC9kaXN0L3J4LnNvcnRpbmcuanM/MmU0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCwgQWxsIHJpZ2h0cyByZXNlcnZlZC4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgdmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdmdW5jdGlvbic6IHRydWUsXG4gICAgJ29iamVjdCc6IHRydWVcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0dsb2JhbCh2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUuT2JqZWN0ID09PSBPYmplY3QpID8gdmFsdWUgOiBudWxsO1xuICB9XG5cbiAgdmFyIGZyZWVFeHBvcnRzID0gKG9iamVjdFR5cGVzW3R5cGVvZiBleHBvcnRzXSAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlKSA/IGV4cG9ydHMgOiBudWxsO1xuICB2YXIgZnJlZU1vZHVsZSA9IChvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSkgPyBtb2R1bGUgOiBudWxsO1xuICB2YXIgZnJlZUdsb2JhbCA9IGNoZWNrR2xvYmFsKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUgJiYgdHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsKTtcbiAgdmFyIGZyZWVTZWxmID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHNlbGZdICYmIHNlbGYpO1xuICB2YXIgZnJlZVdpbmRvdyA9IGNoZWNrR2xvYmFsKG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyk7XG4gIHZhciBtb2R1bGVFeHBvcnRzID0gKGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cykgPyBmcmVlRXhwb3J0cyA6IG51bGw7XG4gIHZhciB0aGlzR2xvYmFsID0gY2hlY2tHbG9iYWwob2JqZWN0VHlwZXNbdHlwZW9mIHRoaXNdICYmIHRoaXMpO1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgKChmcmVlV2luZG93ICE9PSAodGhpc0dsb2JhbCAmJiB0aGlzR2xvYmFsLndpbmRvdykpICYmIGZyZWVXaW5kb3cpIHx8IGZyZWVTZWxmIHx8IHRoaXNHbG9iYWwgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvLyBCZWNhdXNlIG9mIGJ1aWxkIG9wdGltaXplcnNcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJy4vcngnXSwgZnVuY3Rpb24gKFJ4LCBleHBvcnRzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShyb290LCBleHBvcnRzLCBSeCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyb290LCBtb2R1bGUuZXhwb3J0cywgcmVxdWlyZSgnLi9yeCcpKTtcbiAgfSBlbHNlIHtcbiAgICByb290LlJ4ID0gZmFjdG9yeShyb290LCB7fSwgcm9vdC5SeCk7XG4gIH1cbn0uY2FsbCh0aGlzLCBmdW5jdGlvbiAocm9vdCwgZXhwLCBSeCwgdW5kZWZpbmVkKSB7XG5cbiAgdmFyIE9ic2VydmFibGUgPSBSeC5PYnNlcnZhYmxlLFxuICAgIG9ic2VydmFibGVQcm90byA9IE9ic2VydmFibGUucHJvdG90eXBlLFxuICAgIEFub255bW91c09ic2VydmFibGUgPSBSeC5Bbm9ueW1vdXNPYnNlcnZhYmxlLFxuICAgIG9ic2VydmFibGVOZXZlciA9IE9ic2VydmFibGUubmV2ZXIsXG4gICAgaXNFcXVhbCA9IFJ4LmludGVybmFscy5pc0VxdWFsLFxuICAgIGRlZmF1bHRTdWJDb21wYXJlciA9IFJ4LmhlbHBlcnMuZGVmYXVsdFN1YkNvbXBhcmVyO1xuXG4gIC8qKlxuICAgKiBqb3J0U29ydCBjaGVja3MgaWYgeW91ciBpbnB1dHMgYXJlIHNvcnRlZC4gIE5vdGUgdGhhdCB0aGlzIGlzIG9ubHkgZm9yIGEgc2VxdWVuY2Ugd2l0aCBhbiBlbmQuXG4gICAqIFNlZSBodHRwOi8vam9ydC50ZWNobm9sb2d5LyBmb3IgZnVsbCBkZXRhaWxzLlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gQW4gb2JzZXJ2YWJsZSB3aGljaCBoYXMgYSBzaW5nbGUgdmFsdWUgb2YgdHJ1ZSBpZiBzb3J0ZWQsIGVsc2UgZmFsc2UuXG4gICAqL1xuICBvYnNlcnZhYmxlUHJvdG8uam9ydFNvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuam9ydFNvcnRVbnRpbChvYnNlcnZhYmxlTmV2ZXIoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGpvcnRTb3J0IGNoZWNrcyBpZiB5b3VyIGlucHV0cyBhcmUgc29ydGVkIHVudGlsIGFub3RoZXIgT2JzZXJ2YWJsZSBzZXF1ZW5jZSBmaXJlcy5cbiAgICogU2VlIGh0dHA6Ly9qb3J0LnRlY2hub2xvZ3kvIGZvciBmdWxsIGRldGFpbHMuXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlfSBBbiBvYnNlcnZhYmxlIHdoaWNoIGhhcyBhIHNpbmdsZSB2YWx1ZSBvZiB0cnVlIGlmIHNvcnRlZCwgZWxzZSBmYWxzZS5cbiAgICovXG4gIG9ic2VydmFibGVQcm90by5qb3J0U29ydFVudGlsID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgdmFyIHNvdXJjZSA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBBbm9ueW1vdXNPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgcmV0dXJuIHNvdXJjZS50YWtlVW50aWwob3RoZXIpLnN1YnNjcmliZShcbiAgICAgICAgYXJyLnB1c2guYmluZChhcnIpLFxuICAgICAgICBvYnNlcnZlci5vbkVycm9yLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHNvcnRlZCA9IGFyci5zbGljZSgwKS5zb3J0KGRlZmF1bHRTdWJDb21wYXJlcik7XG4gICAgICAgICAgb2JzZXJ2ZXIub25OZXh0KGlzRXF1YWwoYXJyLCBzb3J0ZWQpKTtcbiAgICAgICAgICBvYnNlcnZlci5vbkNvbXBsZXRlZCgpO1xuICAgICAgICB9KTtcbiAgICB9LCBzb3VyY2UpO1xuICB9O1xuXG4gIHJldHVybiBSeDtcbn0pKTtcbiJdLCJuYW1lcyI6WyJmYWN0b3J5Iiwib2JqZWN0VHlwZXMiLCJjaGVja0dsb2JhbCIsInZhbHVlIiwiT2JqZWN0IiwiZnJlZUV4cG9ydHMiLCJleHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlIiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsImZyZWVXaW5kb3ciLCJ3aW5kb3ciLCJtb2R1bGVFeHBvcnRzIiwidGhpc0dsb2JhbCIsInJvb3QiLCJGdW5jdGlvbiIsImRlZmluZSIsImFtZCIsIlJ4IiwicmVxdWlyZSIsImNhbGwiLCJleHAiLCJ1bmRlZmluZWQiLCJPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZVByb3RvIiwicHJvdG90eXBlIiwiQW5vbnltb3VzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGVOZXZlciIsIm5ldmVyIiwiaXNFcXVhbCIsImludGVybmFscyIsImRlZmF1bHRTdWJDb21wYXJlciIsImhlbHBlcnMiLCJqb3J0U29ydCIsImpvcnRTb3J0VW50aWwiLCJvdGhlciIsInNvdXJjZSIsIm9ic2VydmVyIiwiYXJyIiwidGFrZVVudGlsIiwic3Vic2NyaWJlIiwicHVzaCIsImJpbmQiLCJvbkVycm9yIiwic29ydGVkIiwic2xpY2UiLCJzb3J0Iiwib25OZXh0Iiwib25Db21wbGV0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.sorting.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.testing.js":
/*!********************************************!*\
  !*** ./node_modules/rx/dist/rx.testing.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx.virtualtime */ \"(ssr)/./node_modules/rx/dist/rx.virtualtime.js\"),\n            exports\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            root.Rx = factory(root, exports1, Rx);\n            return root.Rx;\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Defaults\n    var Observer = Rx.Observer, Observable = Rx.Observable, Notification = Rx.Notification, VirtualTimeScheduler = Rx.VirtualTimeScheduler, Disposable = Rx.Disposable, disposableEmpty = Disposable.empty, disposableCreate = Disposable.create, CompositeDisposable = Rx.CompositeDisposable, inherits = Rx.internals.inherits, defaultComparer = Rx.internals.isEqual;\n    function OnNextPredicate(predicate) {\n        this.predicate = predicate;\n    }\n    OnNextPredicate.prototype.equals = function(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        if (other.kind !== \"N\") {\n            return false;\n        }\n        return this.predicate(other.value);\n    };\n    function OnErrorPredicate(predicate) {\n        this.predicate = predicate;\n    }\n    OnErrorPredicate.prototype.equals = function(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        if (other.kind !== \"E\") {\n            return false;\n        }\n        return this.predicate(other.error);\n    };\n    var ReactiveTest = Rx.ReactiveTest = {\n        /** Default virtual time used for creation of observable sequences in unit tests. */ created: 100,\n        /** Default virtual time used to subscribe to observable sequences in unit tests. */ subscribed: 200,\n        /** Default virtual time used to dispose subscriptions in unit tests. */ disposed: 1000,\n        /**\n   * Factory method for an OnNext notification record at a given time with a given value or a predicate function.\n   *\n   * 1 - ReactiveTest.onNext(200, 42);\n   * 2 - ReactiveTest.onNext(200, function (x) { return x.length == 2; });\n   *\n   * @param ticks Recorded virtual time the OnNext notification occurs.\n   * @param value Recorded value stored in the OnNext notification or a predicate.\n   * @return Recorded OnNext notification.\n   */ onNext: function(ticks, value) {\n            return typeof value === \"function\" ? new Recorded(ticks, new OnNextPredicate(value)) : new Recorded(ticks, Notification.createOnNext(value));\n        },\n        /**\n   * Factory method for an OnError notification record at a given time with a given error.\n   *\n   * 1 - ReactiveTest.onNext(200, new Error('error'));\n   * 2 - ReactiveTest.onNext(200, function (e) { return e.message === 'error'; });\n   *\n   * @param ticks Recorded virtual time the OnError notification occurs.\n   * @param exception Recorded exception stored in the OnError notification.\n   * @return Recorded OnError notification.\n   */ onError: function(ticks, error) {\n            return typeof error === \"function\" ? new Recorded(ticks, new OnErrorPredicate(error)) : new Recorded(ticks, Notification.createOnError(error));\n        },\n        /**\n   * Factory method for an OnCompleted notification record at a given time.\n   *\n   * @param ticks Recorded virtual time the OnCompleted notification occurs.\n   * @return Recorded OnCompleted notification.\n   */ onCompleted: function(ticks) {\n            return new Recorded(ticks, Notification.createOnCompleted());\n        },\n        /**\n   * Factory method for a subscription record based on a given subscription and disposal time.\n   *\n   * @param start Virtual time indicating when the subscription was created.\n   * @param end Virtual time indicating when the subscription was disposed.\n   * @return Subscription object.\n   */ subscribe: function(start, end) {\n            return new Subscription(start, end);\n        }\n    };\n    /**\n   * Creates a new object recording the production of the specified value at the given virtual time.\n   *\n   * @constructor\n   * @param {Number} time Virtual time the value was produced on.\n   * @param {Mixed} value Value that was produced.\n   * @param {Function} comparer An optional comparer.\n   */ var Recorded = Rx.Recorded = function(time, value, comparer) {\n        this.time = time;\n        this.value = value;\n        this.comparer = comparer || defaultComparer;\n    };\n    /**\n   * Checks whether the given recorded object is equal to the current instance.\n   *\n   * @param {Recorded} other Recorded object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */ Recorded.prototype.equals = function(other) {\n        return this.time === other.time && this.comparer(this.value, other.value);\n    };\n    /**\n   * Returns a string representation of the current Recorded value.\n   *\n   * @returns {String} String representation of the current Recorded value.\n   */ Recorded.prototype.toString = function() {\n        return this.value.toString() + \"@\" + this.time;\n    };\n    /**\n   * Creates a new subscription object with the given virtual subscription and unsubscription time.\n   *\n   * @constructor\n   * @param {Number} subscribe Virtual time at which the subscription occurred.\n   * @param {Number} unsubscribe Virtual time at which the unsubscription occurred.\n   */ var Subscription = Rx.Subscription = function(start, end) {\n        this.subscribe = start;\n        this.unsubscribe = end || Number.MAX_VALUE;\n    };\n    /**\n   * Checks whether the given subscription is equal to the current instance.\n   * @param other Subscription object to check for equality.\n   * @returns {Boolean} true if both objects are equal; false otherwise.\n   */ Subscription.prototype.equals = function(other) {\n        return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;\n    };\n    /**\n   * Returns a string representation of the current Subscription value.\n   * @returns {String} String representation of the current Subscription value.\n   */ Subscription.prototype.toString = function() {\n        return \"(\" + this.subscribe + \", \" + (this.unsubscribe === Number.MAX_VALUE ? \"Infinite\" : this.unsubscribe) + \")\";\n    };\n    var MockDisposable = Rx.MockDisposable = function(scheduler) {\n        this.scheduler = scheduler;\n        this.disposes = [];\n        this.disposes.push(this.scheduler.clock);\n    };\n    MockDisposable.prototype.dispose = function() {\n        this.disposes.push(this.scheduler.clock);\n    };\n    var MockObserver = function(__super__) {\n        inherits(MockObserver, __super__);\n        function MockObserver(scheduler) {\n            __super__.call(this);\n            this.scheduler = scheduler;\n            this.messages = [];\n        }\n        var MockObserverPrototype = MockObserver.prototype;\n        MockObserverPrototype.onNext = function(value) {\n            this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));\n        };\n        MockObserverPrototype.onError = function(e) {\n            this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(e)));\n        };\n        MockObserverPrototype.onCompleted = function() {\n            this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));\n        };\n        return MockObserver;\n    }(Observer);\n    function MockPromise(scheduler, messages) {\n        var self1 = this;\n        this.scheduler = scheduler;\n        this.messages = messages;\n        this.subscriptions = [];\n        this.observers = [];\n        for(var i = 0, len = this.messages.length; i < len; i++){\n            var message = this.messages[i], notification = message.value;\n            (function(innerNotification) {\n                scheduler.scheduleAbsolute(null, message.time, function() {\n                    var obs = self1.observers.slice(0);\n                    for(var j = 0, jLen = obs.length; j < jLen; j++){\n                        innerNotification.accept(obs[j]);\n                    }\n                    return disposableEmpty;\n                });\n            })(notification);\n        }\n    }\n    MockPromise.prototype.then = function(onResolved, onRejected) {\n        var self1 = this;\n        this.subscriptions.push(new Subscription(this.scheduler.clock));\n        var index = this.subscriptions.length - 1;\n        var newPromise;\n        var observer = Rx.Observer.create(function(x) {\n            var retValue = onResolved(x);\n            if (retValue && typeof retValue.then === \"function\") {\n                newPromise = retValue;\n            } else {\n                var ticks = self1.scheduler.clock;\n                newPromise = new MockPromise(self1.scheduler, [\n                    Rx.ReactiveTest.onNext(ticks, undefined),\n                    Rx.ReactiveTest.onCompleted(ticks)\n                ]);\n            }\n            var idx = self1.observers.indexOf(observer);\n            self1.observers.splice(idx, 1);\n            self1.subscriptions[index] = new Subscription(self1.subscriptions[index].subscribe, self1.scheduler.clock);\n        }, function(err) {\n            onRejected(err);\n            var idx = self1.observers.indexOf(observer);\n            self1.observers.splice(idx, 1);\n            self1.subscriptions[index] = new Subscription(self1.subscriptions[index].subscribe, self1.scheduler.clock);\n        });\n        this.observers.push(observer);\n        return newPromise || new MockPromise(this.scheduler, this.messages);\n    };\n    var HotObservable = function(__super__) {\n        inherits(HotObservable, __super__);\n        function HotObservable(scheduler, messages) {\n            __super__.call(this);\n            var message, notification, observable = this;\n            this.scheduler = scheduler;\n            this.messages = messages;\n            this.subscriptions = [];\n            this.observers = [];\n            for(var i = 0, len = this.messages.length; i < len; i++){\n                message = this.messages[i];\n                notification = message.value;\n                (function(innerNotification) {\n                    scheduler.scheduleAbsolute(null, message.time, function() {\n                        var obs = observable.observers.slice(0);\n                        for(var j = 0, jLen = obs.length; j < jLen; j++){\n                            innerNotification.accept(obs[j]);\n                        }\n                        return disposableEmpty;\n                    });\n                })(notification);\n            }\n        }\n        HotObservable.prototype._subscribe = function(o) {\n            var observable = this;\n            this.observers.push(o);\n            this.subscriptions.push(new Subscription(this.scheduler.clock));\n            var index = this.subscriptions.length - 1;\n            return disposableCreate(function() {\n                var idx = observable.observers.indexOf(o);\n                observable.observers.splice(idx, 1);\n                observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n            });\n        };\n        return HotObservable;\n    }(Observable);\n    var ColdObservable = function(__super__) {\n        inherits(ColdObservable, __super__);\n        function ColdObservable(scheduler, messages) {\n            __super__.call(this);\n            this.scheduler = scheduler;\n            this.messages = messages;\n            this.subscriptions = [];\n        }\n        ColdObservable.prototype._subscribe = function(o) {\n            var message, notification, observable = this;\n            this.subscriptions.push(new Subscription(this.scheduler.clock));\n            var index = this.subscriptions.length - 1;\n            var d = new CompositeDisposable();\n            for(var i = 0, len = this.messages.length; i < len; i++){\n                message = this.messages[i];\n                notification = message.value;\n                (function(innerNotification) {\n                    d.add(observable.scheduler.scheduleRelative(null, message.time, function() {\n                        innerNotification.accept(o);\n                        return disposableEmpty;\n                    }));\n                })(notification);\n            }\n            return disposableCreate(function() {\n                observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);\n                d.dispose();\n            });\n        };\n        return ColdObservable;\n    }(Observable);\n    /** Virtual time scheduler used for testing applications and libraries built using Reactive Extensions. */ Rx.TestScheduler = function(__super__) {\n        inherits(TestScheduler, __super__);\n        function baseComparer(x, y) {\n            return x > y ? 1 : x < y ? -1 : 0;\n        }\n        function TestScheduler() {\n            __super__.call(this, 0, baseComparer);\n        }\n        /**\n     * Schedules an action to be executed at the specified virtual time.\n     *\n     * @param state State passed to the action to be executed.\n     * @param dueTime Absolute virtual time at which to execute the action.\n     * @param action Action to be executed.\n     * @return Disposable object used to cancel the scheduled action (best effort).\n     */ TestScheduler.prototype.scheduleAbsolute = function(state, dueTime, action) {\n            dueTime <= this.clock && (dueTime = this.clock + 1);\n            return __super__.prototype.scheduleAbsolute.call(this, state, dueTime, action);\n        };\n        /**\n     * Adds a relative virtual time to an absolute virtual time value.\n     *\n     * @param absolute Absolute virtual time value.\n     * @param relative Relative virtual time value to add.\n     * @return Resulting absolute virtual time sum value.\n     */ TestScheduler.prototype.add = function(absolute, relative) {\n            return absolute + relative;\n        };\n        /**\n     * Converts the absolute virtual time value to a DateTimeOffset value.\n     *\n     * @param absolute Absolute virtual time value to convert.\n     * @return Corresponding DateTimeOffset value.\n     */ TestScheduler.prototype.toAbsoluteTime = function(absolute) {\n            return new Date(absolute).getTime();\n        };\n        /**\n     * Converts the TimeSpan value to a relative virtual time value.\n     *\n     * @param timeSpan TimeSpan value to convert.\n     * @return Corresponding relative virtual time value.\n     */ TestScheduler.prototype.toRelativeTime = function(timeSpan) {\n            return timeSpan;\n        };\n        /**\n     * Starts the test scheduler and uses the specified virtual times to invoke the factory function, subscribe to the resulting sequence, and dispose the subscription.\n     *\n     * @param create Factory method to create an observable sequence.\n     * @param created Virtual time at which to invoke the factory to create an observable sequence.\n     * @param subscribed Virtual time at which to subscribe to the created observable sequence.\n     * @param disposed Virtual time at which to dispose the subscription.\n     * @return Observer with timestamped recordings of notification messages that were received during the virtual time window when the subscription to the source sequence was active.\n     */ TestScheduler.prototype.startScheduler = function(createFn, settings) {\n            settings || (settings = {});\n            settings.created == null && (settings.created = ReactiveTest.created);\n            settings.subscribed == null && (settings.subscribed = ReactiveTest.subscribed);\n            settings.disposed == null && (settings.disposed = ReactiveTest.disposed);\n            var observer = this.createObserver(), source, subscription;\n            this.scheduleAbsolute(null, settings.created, function() {\n                source = createFn();\n                return disposableEmpty;\n            });\n            this.scheduleAbsolute(null, settings.subscribed, function() {\n                subscription = source.subscribe(observer);\n                return disposableEmpty;\n            });\n            this.scheduleAbsolute(null, settings.disposed, function() {\n                subscription.dispose();\n                return disposableEmpty;\n            });\n            this.start();\n            return observer;\n        };\n        /**\n     * Creates a hot observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified absolute virtual times.\n     * @return Hot observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */ TestScheduler.prototype.createHotObservable = function() {\n            var len = arguments.length, args;\n            if (Array.isArray(arguments[0])) {\n                args = arguments[0];\n            } else {\n                args = new Array(len);\n                for(var i = 0; i < len; i++){\n                    args[i] = arguments[i];\n                }\n            }\n            return new HotObservable(this, args);\n        };\n        /**\n     * Creates a cold observable using the specified timestamped notification messages either as an array or arguments.\n     * @param messages Notifications to surface through the created sequence at their specified virtual time offsets from the sequence subscription time.\n     * @return Cold observable sequence that can be used to assert the timing of subscriptions and notifications.\n     */ TestScheduler.prototype.createColdObservable = function() {\n            var len = arguments.length, args;\n            if (Array.isArray(arguments[0])) {\n                args = arguments[0];\n            } else {\n                args = new Array(len);\n                for(var i = 0; i < len; i++){\n                    args[i] = arguments[i];\n                }\n            }\n            return new ColdObservable(this, args);\n        };\n        /**\n     * Creates a resolved promise with the given value and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} value The value to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which fulfills with the given value.\n     */ TestScheduler.prototype.createResolvedPromise = function(ticks, value) {\n            return new MockPromise(this, [\n                Rx.ReactiveTest.onNext(ticks, value),\n                Rx.ReactiveTest.onCompleted(ticks)\n            ]);\n        };\n        /**\n     * Creates a rejected promise with the given reason and ticks\n     * @param {Number} ticks The absolute time of the resolution.\n     * @param {Any} reason The reason for rejection to yield at the given tick.\n     * @returns {MockPromise} A mock Promise which rejects with the given reason.\n     */ TestScheduler.prototype.createRejectedPromise = function(ticks, reason) {\n            return new MockPromise(this, [\n                Rx.ReactiveTest.onError(ticks, reason)\n            ]);\n        };\n        /**\n     * Creates an observer that records received notification messages and timestamps those.\n     * @return Observer that can be used to assert the timing of received notifications.\n     */ TestScheduler.prototype.createObserver = function() {\n            return new MockObserver(this);\n        };\n        return TestScheduler;\n    }(VirtualTimeScheduler);\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.testing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.time.js":
/*!*****************************************!*\
  !*** ./node_modules/rx/dist/rx.time.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Refernces\n    var inherits = Rx.internals.inherits, AbstractObserver = Rx.internals.AbstractObserver, Observable = Rx.Observable, observableProto = Observable.prototype, AnonymousObservable = Rx.AnonymousObservable, ObservableBase = Rx.ObservableBase, observableDefer = Observable.defer, observableEmpty = Observable.empty, observableNever = Observable.never, observableThrow = Observable[\"throw\"], observableFromArray = Observable.fromArray, defaultScheduler = Rx.Scheduler[\"default\"], SingleAssignmentDisposable = Rx.SingleAssignmentDisposable, SerialDisposable = Rx.SerialDisposable, CompositeDisposable = Rx.CompositeDisposable, BinaryDisposable = Rx.BinaryDisposable, RefCountDisposable = Rx.RefCountDisposable, Subject = Rx.Subject, addRef = Rx.internals.addRef, normalizeTime = Rx.Scheduler.normalize, helpers = Rx.helpers, isPromise = helpers.isPromise, isFunction = helpers.isFunction, isScheduler = Rx.Scheduler.isScheduler, observableFromPromise = Observable.fromPromise;\n    var errorObj = {\n        e: {}\n    };\n    function tryCatcherGen(tryCatchTarget) {\n        return function tryCatcher() {\n            try {\n                return tryCatchTarget.apply(this, arguments);\n            } catch (e) {\n                errorObj.e = e;\n                return errorObj;\n            }\n        };\n    }\n    var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {\n        if (!isFunction(fn)) {\n            throw new TypeError(\"fn must be a function\");\n        }\n        return tryCatcherGen(fn);\n    };\n    function thrower(e) {\n        throw e;\n    }\n    var TimerObservable = function(__super__) {\n        inherits(TimerObservable, __super__);\n        function TimerObservable(dt, s) {\n            this._dt = dt;\n            this._s = s;\n            __super__.call(this);\n        }\n        TimerObservable.prototype.subscribeCore = function(o) {\n            return this._s.scheduleFuture(o, this._dt, scheduleMethod);\n        };\n        function scheduleMethod(s, o) {\n            o.onNext(0);\n            o.onCompleted();\n        }\n        return TimerObservable;\n    }(ObservableBase);\n    function _observableTimer(dueTime, scheduler) {\n        return new TimerObservable(dueTime, scheduler);\n    }\n    function observableTimerDateAndPeriod(dueTime, period, scheduler) {\n        return new AnonymousObservable(function(observer) {\n            var d = dueTime, p = normalizeTime(period);\n            return scheduler.scheduleRecursiveFuture(0, d, function(count, self1) {\n                if (p > 0) {\n                    var now = scheduler.now();\n                    d = new Date(d.getTime() + p);\n                    d.getTime() <= now && (d = new Date(now + p));\n                }\n                observer.onNext(count);\n                self1(count + 1, new Date(d));\n            });\n        });\n    }\n    function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {\n        return dueTime === period ? new AnonymousObservable(function(observer) {\n            return scheduler.schedulePeriodic(0, period, function(count) {\n                observer.onNext(count);\n                return count + 1;\n            });\n        }) : observableDefer(function() {\n            return observableTimerDateAndPeriod(new Date(scheduler.now() + dueTime), period, scheduler);\n        });\n    }\n    /**\n   *  Returns an observable sequence that produces a value after each period.\n   *\n   * @example\n   *  1 - res = Rx.Observable.interval(1000);\n   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);\n   *\n   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).\n   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.\n   * @returns {Observable} An observable sequence that produces a value after each period.\n   */ var observableinterval = Observable.interval = function(period, scheduler) {\n        return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : defaultScheduler);\n    };\n    /**\n   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.\n   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.\n   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.\n   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.\n   */ var observableTimer = Observable.timer = function(dueTime, periodOrScheduler, scheduler) {\n        var period;\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        if (periodOrScheduler != null && typeof periodOrScheduler === \"number\") {\n            period = periodOrScheduler;\n        } else if (isScheduler(periodOrScheduler)) {\n            scheduler = periodOrScheduler;\n        }\n        if ((dueTime instanceof Date || typeof dueTime === \"number\") && period === undefined) {\n            return _observableTimer(dueTime, scheduler);\n        }\n        if (dueTime instanceof Date && period !== undefined) {\n            return observableTimerDateAndPeriod(dueTime, periodOrScheduler, scheduler);\n        }\n        return observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);\n    };\n    function observableDelayRelative(source, dueTime, scheduler) {\n        return new AnonymousObservable(function(o) {\n            var active = false, cancelable = new SerialDisposable(), exception = null, q = [], running = false, subscription;\n            subscription = source.materialize().timestamp(scheduler).subscribe(function(notification) {\n                var d, shouldRun;\n                if (notification.value.kind === \"E\") {\n                    q = [];\n                    q.push(notification);\n                    exception = notification.value.error;\n                    shouldRun = !running;\n                } else {\n                    q.push({\n                        value: notification.value,\n                        timestamp: notification.timestamp + dueTime\n                    });\n                    shouldRun = !active;\n                    active = true;\n                }\n                if (shouldRun) {\n                    if (exception !== null) {\n                        o.onError(exception);\n                    } else {\n                        d = new SingleAssignmentDisposable();\n                        cancelable.setDisposable(d);\n                        d.setDisposable(scheduler.scheduleRecursiveFuture(null, dueTime, function(_, self1) {\n                            var e, recurseDueTime, result, shouldRecurse;\n                            if (exception !== null) {\n                                return;\n                            }\n                            running = true;\n                            do {\n                                result = null;\n                                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {\n                                    result = q.shift().value;\n                                }\n                                if (result !== null) {\n                                    result.accept(o);\n                                }\n                            }while (result !== null);\n                            shouldRecurse = false;\n                            recurseDueTime = 0;\n                            if (q.length > 0) {\n                                shouldRecurse = true;\n                                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());\n                            } else {\n                                active = false;\n                            }\n                            e = exception;\n                            running = false;\n                            if (e !== null) {\n                                o.onError(e);\n                            } else if (shouldRecurse) {\n                                self1(null, recurseDueTime);\n                            }\n                        }));\n                    }\n                }\n            });\n            return new BinaryDisposable(subscription, cancelable);\n        }, source);\n    }\n    function observableDelayAbsolute(source, dueTime, scheduler) {\n        return observableDefer(function() {\n            return observableDelayRelative(source, dueTime - scheduler.now(), scheduler);\n        });\n    }\n    function delayWithSelector(source, subscriptionDelay, delayDurationSelector) {\n        var subDelay, selector;\n        if (isFunction(subscriptionDelay)) {\n            selector = subscriptionDelay;\n        } else {\n            subDelay = subscriptionDelay;\n            selector = delayDurationSelector;\n        }\n        return new AnonymousObservable(function(o) {\n            var delays = new CompositeDisposable(), atEnd = false, subscription = new SerialDisposable();\n            function start() {\n                subscription.setDisposable(source.subscribe(function(x) {\n                    var delay = tryCatch(selector)(x);\n                    if (delay === errorObj) {\n                        return o.onError(delay.e);\n                    }\n                    var d = new SingleAssignmentDisposable();\n                    delays.add(d);\n                    d.setDisposable(delay.subscribe(function() {\n                        o.onNext(x);\n                        delays.remove(d);\n                        done();\n                    }, function(e) {\n                        o.onError(e);\n                    }, function() {\n                        o.onNext(x);\n                        delays.remove(d);\n                        done();\n                    }));\n                }, function(e) {\n                    o.onError(e);\n                }, function() {\n                    atEnd = true;\n                    subscription.dispose();\n                    done();\n                }));\n            }\n            function done() {\n                atEnd && delays.length === 0 && o.onCompleted();\n            }\n            if (!subDelay) {\n                start();\n            } else {\n                subscription.setDisposable(subDelay.subscribe(start, function(e) {\n                    o.onError(e);\n                }, start));\n            }\n            return new BinaryDisposable(subscription, delays);\n        }, source);\n    }\n    /**\n   *  Time shifts the observable sequence by dueTime.\n   *  The relative time intervals between the values are preserved.\n   *\n   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.\n   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} Time-shifted sequence.\n   */ observableProto.delay = function() {\n        var firstArg = arguments[0];\n        if (typeof firstArg === \"number\" || firstArg instanceof Date) {\n            var dueTime = firstArg, scheduler = arguments[1];\n            isScheduler(scheduler) || (scheduler = defaultScheduler);\n            return dueTime instanceof Date ? observableDelayAbsolute(this, dueTime, scheduler) : observableDelayRelative(this, dueTime, scheduler);\n        } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {\n            return delayWithSelector(this, firstArg, arguments[1]);\n        } else {\n            throw new Error(\"Invalid arguments\");\n        }\n    };\n    var DebounceObservable = function(__super__) {\n        inherits(DebounceObservable, __super__);\n        function DebounceObservable(source, dt, s) {\n            isScheduler(s) || (s = defaultScheduler);\n            this.source = source;\n            this._dt = dt;\n            this._s = s;\n            __super__.call(this);\n        }\n        DebounceObservable.prototype.subscribeCore = function(o) {\n            var cancelable = new SerialDisposable();\n            return new BinaryDisposable(this.source.subscribe(new DebounceObserver(o, this._dt, this._s, cancelable)), cancelable);\n        };\n        return DebounceObservable;\n    }(ObservableBase);\n    var DebounceObserver = function(__super__) {\n        inherits(DebounceObserver, __super__);\n        function DebounceObserver(observer, dueTime, scheduler, cancelable) {\n            this._o = observer;\n            this._d = dueTime;\n            this._scheduler = scheduler;\n            this._c = cancelable;\n            this._v = null;\n            this._hv = false;\n            this._id = 0;\n            __super__.call(this);\n        }\n        function scheduleFuture(s, state) {\n            state.self._hv && state.self._id === state.currentId && state.self._o.onNext(state.x);\n            state.self._hv = false;\n        }\n        DebounceObserver.prototype.next = function(x) {\n            this._hv = true;\n            this._v = x;\n            var currentId = ++this._id, d = new SingleAssignmentDisposable();\n            this._c.setDisposable(d);\n            d.setDisposable(this._scheduler.scheduleFuture(this, this._d, function(_, self1) {\n                self1._hv && self1._id === currentId && self1._o.onNext(x);\n                self1._hv = false;\n            }));\n        };\n        DebounceObserver.prototype.error = function(e) {\n            this._c.dispose();\n            this._o.onError(e);\n            this._hv = false;\n            this._id++;\n        };\n        DebounceObserver.prototype.completed = function() {\n            this._c.dispose();\n            this._hv && this._o.onNext(this._v);\n            this._o.onCompleted();\n            this._hv = false;\n            this._id++;\n        };\n        return DebounceObserver;\n    }(AbstractObserver);\n    function debounceWithSelector(source, durationSelector) {\n        return new AnonymousObservable(function(o) {\n            var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;\n            var subscription = source.subscribe(function(x) {\n                var throttle = tryCatch(durationSelector)(x);\n                if (throttle === errorObj) {\n                    return o.onError(throttle.e);\n                }\n                isPromise(throttle) && (throttle = observableFromPromise(throttle));\n                hasValue = true;\n                value = x;\n                id++;\n                var currentid = id, d = new SingleAssignmentDisposable();\n                cancelable.setDisposable(d);\n                d.setDisposable(throttle.subscribe(function() {\n                    hasValue && id === currentid && o.onNext(value);\n                    hasValue = false;\n                    d.dispose();\n                }, function(e) {\n                    o.onError(e);\n                }, function() {\n                    hasValue && id === currentid && o.onNext(value);\n                    hasValue = false;\n                    d.dispose();\n                }));\n            }, function(e) {\n                cancelable.dispose();\n                o.onError(e);\n                hasValue = false;\n                id++;\n            }, function() {\n                cancelable.dispose();\n                hasValue && o.onNext(value);\n                o.onCompleted();\n                hasValue = false;\n                id++;\n            });\n            return new BinaryDisposable(subscription, cancelable);\n        }, source);\n    }\n    observableProto.debounce = function() {\n        if (isFunction(arguments[0])) {\n            return debounceWithSelector(this, arguments[0]);\n        } else if (typeof arguments[0] === \"number\") {\n            return new DebounceObservable(this, arguments[0], arguments[1]);\n        } else {\n            throw new Error(\"Invalid arguments\");\n        }\n    };\n    /**\n   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.\n   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).\n   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.\n   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence of windows.\n   */ observableProto.windowWithTime = observableProto.windowTime = function(timeSpan, timeShiftOrScheduler, scheduler) {\n        var source = this, timeShift;\n        timeShiftOrScheduler == null && (timeShift = timeSpan);\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        if (typeof timeShiftOrScheduler === \"number\") {\n            timeShift = timeShiftOrScheduler;\n        } else if (isScheduler(timeShiftOrScheduler)) {\n            timeShift = timeSpan;\n            scheduler = timeShiftOrScheduler;\n        }\n        return new AnonymousObservable(function(observer) {\n            var groupDisposable, nextShift = timeShift, nextSpan = timeSpan, q = [], refCountDisposable, timerD = new SerialDisposable(), totalTime = 0;\n            groupDisposable = new CompositeDisposable(timerD), refCountDisposable = new RefCountDisposable(groupDisposable);\n            function createTimer() {\n                var m = new SingleAssignmentDisposable(), isSpan = false, isShift = false;\n                timerD.setDisposable(m);\n                if (nextSpan === nextShift) {\n                    isSpan = true;\n                    isShift = true;\n                } else if (nextSpan < nextShift) {\n                    isSpan = true;\n                } else {\n                    isShift = true;\n                }\n                var newTotalTime = isSpan ? nextSpan : nextShift, ts = newTotalTime - totalTime;\n                totalTime = newTotalTime;\n                if (isSpan) {\n                    nextSpan += timeShift;\n                }\n                if (isShift) {\n                    nextShift += timeShift;\n                }\n                m.setDisposable(scheduler.scheduleFuture(null, ts, function() {\n                    if (isShift) {\n                        var s = new Subject();\n                        q.push(s);\n                        observer.onNext(addRef(s, refCountDisposable));\n                    }\n                    isSpan && q.shift().onCompleted();\n                    createTimer();\n                }));\n            }\n            ;\n            q.push(new Subject());\n            observer.onNext(addRef(q[0], refCountDisposable));\n            createTimer();\n            groupDisposable.add(source.subscribe(function(x) {\n                for(var i = 0, len = q.length; i < len; i++){\n                    q[i].onNext(x);\n                }\n            }, function(e) {\n                for(var i = 0, len = q.length; i < len; i++){\n                    q[i].onError(e);\n                }\n                observer.onError(e);\n            }, function() {\n                for(var i = 0, len = q.length; i < len; i++){\n                    q[i].onCompleted();\n                }\n                observer.onCompleted();\n            }));\n            return refCountDisposable;\n        }, source);\n    };\n    /**\n   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.\n   * @param {Number} timeSpan Maximum time length of a window.\n   * @param {Number} count Maximum element count of a window.\n   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence of windows.\n   */ observableProto.windowWithTimeOrCount = observableProto.windowTimeOrCount = function(timeSpan, count, scheduler) {\n        var source = this;\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new AnonymousObservable(function(observer) {\n            var timerD = new SerialDisposable(), groupDisposable = new CompositeDisposable(timerD), refCountDisposable = new RefCountDisposable(groupDisposable), n = 0, windowId = 0, s = new Subject();\n            function createTimer(id) {\n                var m = new SingleAssignmentDisposable();\n                timerD.setDisposable(m);\n                m.setDisposable(scheduler.scheduleFuture(null, timeSpan, function() {\n                    if (id !== windowId) {\n                        return;\n                    }\n                    n = 0;\n                    var newId = ++windowId;\n                    s.onCompleted();\n                    s = new Subject();\n                    observer.onNext(addRef(s, refCountDisposable));\n                    createTimer(newId);\n                }));\n            }\n            observer.onNext(addRef(s, refCountDisposable));\n            createTimer(0);\n            groupDisposable.add(source.subscribe(function(x) {\n                var newId = 0, newWindow = false;\n                s.onNext(x);\n                if (++n === count) {\n                    newWindow = true;\n                    n = 0;\n                    newId = ++windowId;\n                    s.onCompleted();\n                    s = new Subject();\n                    observer.onNext(addRef(s, refCountDisposable));\n                }\n                newWindow && createTimer(newId);\n            }, function(e) {\n                s.onError(e);\n                observer.onError(e);\n            }, function() {\n                s.onCompleted();\n                observer.onCompleted();\n            }));\n            return refCountDisposable;\n        }, source);\n    };\n    function toArray(x) {\n        return x.toArray();\n    }\n    /**\n   *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.\n   * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).\n   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.\n   * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence of buffers.\n   */ observableProto.bufferWithTime = observableProto.bufferTime = function(timeSpan, timeShiftOrScheduler, scheduler) {\n        return this.windowWithTime(timeSpan, timeShiftOrScheduler, scheduler).flatMap(toArray);\n    };\n    function toArray(x) {\n        return x.toArray();\n    }\n    /**\n   *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.\n   * @param {Number} timeSpan Maximum time length of a buffer.\n   * @param {Number} count Maximum element count of a buffer.\n   * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence of buffers.\n   */ observableProto.bufferWithTimeOrCount = observableProto.bufferTimeOrCount = function(timeSpan, count, scheduler) {\n        return this.windowWithTimeOrCount(timeSpan, count, scheduler).flatMap(toArray);\n    };\n    var TimeIntervalObservable = function(__super__) {\n        inherits(TimeIntervalObservable, __super__);\n        function TimeIntervalObservable(source, s) {\n            this.source = source;\n            this._s = s;\n            __super__.call(this);\n        }\n        TimeIntervalObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new TimeIntervalObserver(o, this._s));\n        };\n        return TimeIntervalObservable;\n    }(ObservableBase);\n    var TimeIntervalObserver = function(__super__) {\n        inherits(TimeIntervalObserver, __super__);\n        function TimeIntervalObserver(o, s) {\n            this._o = o;\n            this._s = s;\n            this._l = s.now();\n            __super__.call(this);\n        }\n        TimeIntervalObserver.prototype.next = function(x) {\n            var now = this._s.now(), span = now - this._l;\n            this._l = now;\n            this._o.onNext({\n                value: x,\n                interval: span\n            });\n        };\n        TimeIntervalObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TimeIntervalObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return TimeIntervalObserver;\n    }(AbstractObserver);\n    /**\n   *  Records the time interval between consecutive values in an observable sequence.\n   *\n   * @example\n   *  1 - res = source.timeInterval();\n   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);\n   *\n   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.\n   * @returns {Observable} An observable sequence with time interval information on values.\n   */ observableProto.timeInterval = function(scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new TimeIntervalObservable(this, scheduler);\n    };\n    var TimestampObservable = function(__super__) {\n        inherits(TimestampObservable, __super__);\n        function TimestampObservable(source, s) {\n            this.source = source;\n            this._s = s;\n            __super__.call(this);\n        }\n        TimestampObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new TimestampObserver(o, this._s));\n        };\n        return TimestampObservable;\n    }(ObservableBase);\n    var TimestampObserver = function(__super__) {\n        inherits(TimestampObserver, __super__);\n        function TimestampObserver(o, s) {\n            this._o = o;\n            this._s = s;\n            __super__.call(this);\n        }\n        TimestampObserver.prototype.next = function(x) {\n            this._o.onNext({\n                value: x,\n                timestamp: this._s.now()\n            });\n        };\n        TimestampObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TimestampObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return TimestampObserver;\n    }(AbstractObserver);\n    /**\n   *  Records the timestamp for each value in an observable sequence.\n   *\n   * @example\n   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }\n   *  2 - res = source.timestamp(Rx.Scheduler.default);\n   *\n   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.\n   * @returns {Observable} An observable sequence with timestamp information on values.\n   */ observableProto.timestamp = function(scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new TimestampObservable(this, scheduler);\n    };\n    var SampleObservable = function(__super__) {\n        inherits(SampleObservable, __super__);\n        function SampleObservable(source, sampler) {\n            this.source = source;\n            this._sampler = sampler;\n            __super__.call(this);\n        }\n        SampleObservable.prototype.subscribeCore = function(o) {\n            var state = {\n                o: o,\n                atEnd: false,\n                value: null,\n                hasValue: false,\n                sourceSubscription: new SingleAssignmentDisposable()\n            };\n            state.sourceSubscription.setDisposable(this.source.subscribe(new SampleSourceObserver(state)));\n            return new BinaryDisposable(state.sourceSubscription, this._sampler.subscribe(new SamplerObserver(state)));\n        };\n        return SampleObservable;\n    }(ObservableBase);\n    var SamplerObserver = function(__super__) {\n        inherits(SamplerObserver, __super__);\n        function SamplerObserver(s) {\n            this._s = s;\n            __super__.call(this);\n        }\n        SamplerObserver.prototype._handleMessage = function() {\n            if (this._s.hasValue) {\n                this._s.hasValue = false;\n                this._s.o.onNext(this._s.value);\n            }\n            this._s.atEnd && this._s.o.onCompleted();\n        };\n        SamplerObserver.prototype.next = function() {\n            this._handleMessage();\n        };\n        SamplerObserver.prototype.error = function(e) {\n            this._s.onError(e);\n        };\n        SamplerObserver.prototype.completed = function() {\n            this._handleMessage();\n        };\n        return SamplerObserver;\n    }(AbstractObserver);\n    var SampleSourceObserver = function(__super__) {\n        inherits(SampleSourceObserver, __super__);\n        function SampleSourceObserver(s) {\n            this._s = s;\n            __super__.call(this);\n        }\n        SampleSourceObserver.prototype.next = function(x) {\n            this._s.hasValue = true;\n            this._s.value = x;\n        };\n        SampleSourceObserver.prototype.error = function(e) {\n            this._s.o.onError(e);\n        };\n        SampleSourceObserver.prototype.completed = function() {\n            this._s.atEnd = true;\n            this._s.sourceSubscription.dispose();\n        };\n        return SampleSourceObserver;\n    }(AbstractObserver);\n    /**\n   *  Samples the observable sequence at each interval.\n   *\n   * @example\n   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence\n   *  2 - res = source.sample(5000); // 5 seconds\n   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds\n   *\n   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.\n   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} Sampled observable sequence.\n   */ observableProto.sample = function(intervalOrSampler, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return typeof intervalOrSampler === \"number\" ? new SampleObservable(this, observableinterval(intervalOrSampler, scheduler)) : new SampleObservable(this, intervalOrSampler);\n    };\n    var TimeoutError = Rx.TimeoutError = function(message) {\n        this.message = message || \"Timeout has occurred\";\n        this.name = \"TimeoutError\";\n        Error.call(this);\n    };\n    TimeoutError.prototype = Object.create(Error.prototype);\n    function timeoutWithSelector(source, firstTimeout, timeoutDurationSelector, other) {\n        if (isFunction(firstTimeout)) {\n            other = timeoutDurationSelector;\n            timeoutDurationSelector = firstTimeout;\n            firstTimeout = observableNever();\n        }\n        Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));\n        return new AnonymousObservable(function(o) {\n            var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();\n            subscription.setDisposable(original);\n            var id = 0, switched = false;\n            function setTimer(timeout) {\n                var myId = id, d = new SingleAssignmentDisposable();\n                function timerWins() {\n                    switched = myId === id;\n                    return switched;\n                }\n                timer.setDisposable(d);\n                d.setDisposable(timeout.subscribe(function() {\n                    timerWins() && subscription.setDisposable(other.subscribe(o));\n                    d.dispose();\n                }, function(e) {\n                    timerWins() && o.onError(e);\n                }, function() {\n                    timerWins() && subscription.setDisposable(other.subscribe(o));\n                }));\n            }\n            ;\n            setTimer(firstTimeout);\n            function oWins() {\n                var res = !switched;\n                if (res) {\n                    id++;\n                }\n                return res;\n            }\n            original.setDisposable(source.subscribe(function(x) {\n                if (oWins()) {\n                    o.onNext(x);\n                    var timeout = tryCatch(timeoutDurationSelector)(x);\n                    if (timeout === errorObj) {\n                        return o.onError(timeout.e);\n                    }\n                    setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);\n                }\n            }, function(e) {\n                oWins() && o.onError(e);\n            }, function() {\n                oWins() && o.onCompleted();\n            }));\n            return new BinaryDisposable(subscription, timer);\n        }, source);\n    }\n    function timeout(source, dueTime, other, scheduler) {\n        if (isScheduler(other)) {\n            scheduler = other;\n            other = observableThrow(new TimeoutError());\n        }\n        if (other instanceof Error) {\n            other = observableThrow(other);\n        }\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));\n        return new AnonymousObservable(function(o) {\n            var id = 0, original = new SingleAssignmentDisposable(), subscription = new SerialDisposable(), switched = false, timer = new SerialDisposable();\n            subscription.setDisposable(original);\n            function createTimer() {\n                var myId = id;\n                timer.setDisposable(scheduler.scheduleFuture(null, dueTime, function() {\n                    switched = id === myId;\n                    if (switched) {\n                        isPromise(other) && (other = observableFromPromise(other));\n                        subscription.setDisposable(other.subscribe(o));\n                    }\n                }));\n            }\n            createTimer();\n            original.setDisposable(source.subscribe(function(x) {\n                if (!switched) {\n                    id++;\n                    o.onNext(x);\n                    createTimer();\n                }\n            }, function(e) {\n                if (!switched) {\n                    id++;\n                    o.onError(e);\n                }\n            }, function() {\n                if (!switched) {\n                    id++;\n                    o.onCompleted();\n                }\n            }));\n            return new BinaryDisposable(subscription, timer);\n        }, source);\n    }\n    observableProto.timeout = function() {\n        var firstArg = arguments[0];\n        if (firstArg instanceof Date || typeof firstArg === \"number\") {\n            return timeout(this, firstArg, arguments[1], arguments[2]);\n        } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {\n            return timeoutWithSelector(this, firstArg, arguments[1], arguments[2]);\n        } else {\n            throw new Error(\"Invalid arguments\");\n        }\n    };\n    var GenerateAbsoluteObservable = function(__super__) {\n        inherits(GenerateAbsoluteObservable, __super__);\n        function GenerateAbsoluteObservable(state, cndFn, itrFn, resFn, timeFn, s) {\n            this._state = state;\n            this._cndFn = cndFn;\n            this._itrFn = itrFn;\n            this._resFn = resFn;\n            this._timeFn = timeFn;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleRecursive(state, recurse) {\n            state.hasResult && state.o.onNext(state.result);\n            if (state.first) {\n                state.first = false;\n            } else {\n                state.newState = tryCatch(state.self._itrFn)(state.newState);\n                if (state.newState === errorObj) {\n                    return state.o.onError(state.newState.e);\n                }\n            }\n            state.hasResult = tryCatch(state.self._cndFn)(state.newState);\n            if (state.hasResult === errorObj) {\n                return state.o.onError(state.hasResult.e);\n            }\n            if (state.hasResult) {\n                state.result = tryCatch(state.self._resFn)(state.newState);\n                if (state.result === errorObj) {\n                    return state.o.onError(state.result.e);\n                }\n                var time = tryCatch(state.self._timeFn)(state.newState);\n                if (time === errorObj) {\n                    return state.o.onError(time.e);\n                }\n                recurse(state, time);\n            } else {\n                state.o.onCompleted();\n            }\n        }\n        GenerateAbsoluteObservable.prototype.subscribeCore = function(o) {\n            var state = {\n                o: o,\n                self: this,\n                newState: this._state,\n                first: true,\n                hasResult: false\n            };\n            return this._s.scheduleRecursiveFuture(state, new Date(this._s.now()), scheduleRecursive);\n        };\n        return GenerateAbsoluteObservable;\n    }(ObservableBase);\n    /**\n   *  GenerateAbsolutes an observable sequence by iterating a state from an initial state until the condition fails.\n   *\n   * @example\n   *  res = source.generateWithAbsoluteTime(0,\n   *      function (x) { return return true; },\n   *      function (x) { return x + 1; },\n   *      function (x) { return x; },\n   *      function (x) { return new Date(); }\n   *  });\n   *\n   * @param {Mixed} initialState Initial state.\n   * @param {Function} condition Condition to terminate generation (upon returning false).\n   * @param {Function} iterate Iteration step function.\n   * @param {Function} resultSelector Selector function for results produced in the sequence.\n   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.\n   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.\n   * @returns {Observable} The generated sequence.\n   */ Observable.generateWithAbsoluteTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new GenerateAbsoluteObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);\n    };\n    var GenerateRelativeObservable = function(__super__) {\n        inherits(GenerateRelativeObservable, __super__);\n        function GenerateRelativeObservable(state, cndFn, itrFn, resFn, timeFn, s) {\n            this._state = state;\n            this._cndFn = cndFn;\n            this._itrFn = itrFn;\n            this._resFn = resFn;\n            this._timeFn = timeFn;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleRecursive(state, recurse) {\n            state.hasResult && state.o.onNext(state.result);\n            if (state.first) {\n                state.first = false;\n            } else {\n                state.newState = tryCatch(state.self._itrFn)(state.newState);\n                if (state.newState === errorObj) {\n                    return state.o.onError(state.newState.e);\n                }\n            }\n            state.hasResult = tryCatch(state.self._cndFn)(state.newState);\n            if (state.hasResult === errorObj) {\n                return state.o.onError(state.hasResult.e);\n            }\n            if (state.hasResult) {\n                state.result = tryCatch(state.self._resFn)(state.newState);\n                if (state.result === errorObj) {\n                    return state.o.onError(state.result.e);\n                }\n                var time = tryCatch(state.self._timeFn)(state.newState);\n                if (time === errorObj) {\n                    return state.o.onError(time.e);\n                }\n                recurse(state, time);\n            } else {\n                state.o.onCompleted();\n            }\n        }\n        GenerateRelativeObservable.prototype.subscribeCore = function(o) {\n            var state = {\n                o: o,\n                self: this,\n                newState: this._state,\n                first: true,\n                hasResult: false\n            };\n            return this._s.scheduleRecursiveFuture(state, 0, scheduleRecursive);\n        };\n        return GenerateRelativeObservable;\n    }(ObservableBase);\n    /**\n   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.\n   *\n   * @example\n   *  res = source.generateWithRelativeTime(0,\n   *      function (x) { return return true; },\n   *      function (x) { return x + 1; },\n   *      function (x) { return x; },\n   *      function (x) { return 500; }\n   *  );\n   *\n   * @param {Mixed} initialState Initial state.\n   * @param {Function} condition Condition to terminate generation (upon returning false).\n   * @param {Function} iterate Iteration step function.\n   * @param {Function} resultSelector Selector function for results produced in the sequence.\n   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.\n   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.\n   * @returns {Observable} The generated sequence.\n   */ Observable.generateWithRelativeTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new GenerateRelativeObservable(initialState, condition, iterate, resultSelector, timeSelector, scheduler);\n    };\n    var DelaySubscription = function(__super__) {\n        inherits(DelaySubscription, __super__);\n        function DelaySubscription(source, dt, s) {\n            this.source = source;\n            this._dt = dt;\n            this._s = s;\n            __super__.call(this);\n        }\n        DelaySubscription.prototype.subscribeCore = function(o) {\n            var d = new SerialDisposable();\n            d.setDisposable(this._s.scheduleFuture([\n                this.source,\n                o,\n                d\n            ], this._dt, scheduleMethod));\n            return d;\n        };\n        function scheduleMethod(s, state) {\n            var source = state[0], o = state[1], d = state[2];\n            d.setDisposable(source.subscribe(o));\n        }\n        return DelaySubscription;\n    }(ObservableBase);\n    /**\n   *  Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.\n   *\n   * @example\n   *  1 - res = source.delaySubscription(5000); // 5s\n   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.default); // 5 seconds\n   *\n   * @param {Number} dueTime Relative or absolute time shift of the subscription.\n   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.\n   * @returns {Observable} Time-shifted sequence.\n   */ observableProto.delaySubscription = function(dueTime, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new DelaySubscription(this, dueTime, scheduler);\n    };\n    var SkipLastWithTimeObservable = function(__super__) {\n        inherits(SkipLastWithTimeObservable, __super__);\n        function SkipLastWithTimeObservable(source, d, s) {\n            this.source = source;\n            this._d = d;\n            this._s = s;\n            __super__.call(this);\n        }\n        SkipLastWithTimeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new SkipLastWithTimeObserver(o, this));\n        };\n        return SkipLastWithTimeObservable;\n    }(ObservableBase);\n    var SkipLastWithTimeObserver = function(__super__) {\n        inherits(SkipLastWithTimeObserver, __super__);\n        function SkipLastWithTimeObserver(o, p) {\n            this._o = o;\n            this._s = p._s;\n            this._d = p._d;\n            this._q = [];\n            __super__.call(this);\n        }\n        SkipLastWithTimeObserver.prototype.next = function(x) {\n            var now = this._s.now();\n            this._q.push({\n                interval: now,\n                value: x\n            });\n            while(this._q.length > 0 && now - this._q[0].interval >= this._d){\n                this._o.onNext(this._q.shift().value);\n            }\n        };\n        SkipLastWithTimeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipLastWithTimeObserver.prototype.completed = function() {\n            var now = this._s.now();\n            while(this._q.length > 0 && now - this._q[0].interval >= this._d){\n                this._o.onNext(this._q.shift().value);\n            }\n            this._o.onCompleted();\n        };\n        return SkipLastWithTimeObserver;\n    }(AbstractObserver);\n    /**\n   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.\n   * @description\n   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.\n   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the\n   *  result sequence. This causes elements to be delayed with duration.\n   * @param {Number} duration Duration for skipping elements from the end of the sequence.\n   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout\n   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.\n   */ observableProto.skipLastWithTime = function(duration, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new SkipLastWithTimeObservable(this, duration, scheduler);\n    };\n    var TakeLastWithTimeObservable = function(__super__) {\n        inherits(TakeLastWithTimeObservable, __super__);\n        function TakeLastWithTimeObservable(source, d, s) {\n            this.source = source;\n            this._d = d;\n            this._s = s;\n            __super__.call(this);\n        }\n        TakeLastWithTimeObservable.prototype.subscribeCore = function(o) {\n            return this.source.subscribe(new TakeLastWithTimeObserver(o, this._d, this._s));\n        };\n        return TakeLastWithTimeObservable;\n    }(ObservableBase);\n    var TakeLastWithTimeObserver = function(__super__) {\n        inherits(TakeLastWithTimeObserver, __super__);\n        function TakeLastWithTimeObserver(o, d, s) {\n            this._o = o;\n            this._d = d;\n            this._s = s;\n            this._q = [];\n            __super__.call(this);\n        }\n        TakeLastWithTimeObserver.prototype.next = function(x) {\n            var now = this._s.now();\n            this._q.push({\n                interval: now,\n                value: x\n            });\n            while(this._q.length > 0 && now - this._q[0].interval >= this._d){\n                this._q.shift();\n            }\n        };\n        TakeLastWithTimeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        TakeLastWithTimeObserver.prototype.completed = function() {\n            var now = this._s.now();\n            while(this._q.length > 0){\n                var next = this._q.shift();\n                if (now - next.interval <= this._d) {\n                    this._o.onNext(next.value);\n                }\n            }\n            this._o.onCompleted();\n        };\n        return TakeLastWithTimeObserver;\n    }(AbstractObserver);\n    /**\n   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.\n   * @description\n   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.\n   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the\n   *  result sequence. This causes elements to be delayed with duration.\n   * @param {Number} duration Duration for taking elements from the end of the sequence.\n   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.\n   */ observableProto.takeLastWithTime = function(duration, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new TakeLastWithTimeObservable(this, duration, scheduler);\n    };\n    /**\n   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.\n   * @description\n   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.\n   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the\n   *  result sequence. This causes elements to be delayed with duration.\n   * @param {Number} duration Duration for taking elements from the end of the sequence.\n   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.\n   */ observableProto.takeLastBufferWithTime = function(duration, scheduler) {\n        var source = this;\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new AnonymousObservable(function(o) {\n            var q = [];\n            return source.subscribe(function(x) {\n                var now = scheduler.now();\n                q.push({\n                    interval: now,\n                    value: x\n                });\n                while(q.length > 0 && now - q[0].interval >= duration){\n                    q.shift();\n                }\n            }, function(e) {\n                o.onError(e);\n            }, function() {\n                var now = scheduler.now(), res = [];\n                while(q.length > 0){\n                    var next = q.shift();\n                    now - next.interval <= duration && res.push(next.value);\n                }\n                o.onNext(res);\n                o.onCompleted();\n            });\n        }, source);\n    };\n    var TakeWithTimeObservable = function(__super__) {\n        inherits(TakeWithTimeObservable, __super__);\n        function TakeWithTimeObservable(source, d, s) {\n            this.source = source;\n            this._d = d;\n            this._s = s;\n            __super__.call(this);\n        }\n        function scheduleMethod(s, o) {\n            o.onCompleted();\n        }\n        TakeWithTimeObservable.prototype.subscribeCore = function(o) {\n            return new BinaryDisposable(this._s.scheduleFuture(o, this._d, scheduleMethod), this.source.subscribe(o));\n        };\n        return TakeWithTimeObservable;\n    }(ObservableBase);\n    /**\n   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.\n   *\n   * @example\n   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);\n   * @description\n   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.\n   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the\n   *  result sequence. This causes elements to be delayed with duration.\n   * @param {Number} duration Duration for taking elements from the start of the sequence.\n   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.\n   */ observableProto.takeWithTime = function(duration, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new TakeWithTimeObservable(this, duration, scheduler);\n    };\n    var SkipWithTimeObservable = function(__super__) {\n        inherits(SkipWithTimeObservable, __super__);\n        function SkipWithTimeObservable(source, d, s) {\n            this.source = source;\n            this._d = d;\n            this._s = s;\n            this._open = false;\n            __super__.call(this);\n        }\n        function scheduleMethod(s, self1) {\n            self1._open = true;\n        }\n        SkipWithTimeObservable.prototype.subscribeCore = function(o) {\n            return new BinaryDisposable(this._s.scheduleFuture(this, this._d, scheduleMethod), this.source.subscribe(new SkipWithTimeObserver(o, this)));\n        };\n        return SkipWithTimeObservable;\n    }(ObservableBase);\n    var SkipWithTimeObserver = function(__super__) {\n        inherits(SkipWithTimeObserver, __super__);\n        function SkipWithTimeObserver(o, p) {\n            this._o = o;\n            this._p = p;\n            __super__.call(this);\n        }\n        SkipWithTimeObserver.prototype.next = function(x) {\n            this._p._open && this._o.onNext(x);\n        };\n        SkipWithTimeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipWithTimeObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SkipWithTimeObserver;\n    }(AbstractObserver);\n    /**\n   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.\n   * @description\n   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.\n   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded\n   *  may not execute immediately, despite the zero due time.\n   *\n   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.\n   * @param {Number} duration Duration for skipping elements from the start of the sequence.\n   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.\n   */ observableProto.skipWithTime = function(duration, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new SkipWithTimeObservable(this, duration, scheduler);\n    };\n    var SkipUntilWithTimeObservable = function(__super__) {\n        inherits(SkipUntilWithTimeObservable, __super__);\n        function SkipUntilWithTimeObservable(source, startTime, scheduler) {\n            this.source = source;\n            this._st = startTime;\n            this._s = scheduler;\n            __super__.call(this);\n        }\n        function scheduleMethod(s, state) {\n            state._open = true;\n        }\n        SkipUntilWithTimeObservable.prototype.subscribeCore = function(o) {\n            this._open = false;\n            return new BinaryDisposable(this._s.scheduleFuture(this, this._st, scheduleMethod), this.source.subscribe(new SkipUntilWithTimeObserver(o, this)));\n        };\n        return SkipUntilWithTimeObservable;\n    }(ObservableBase);\n    var SkipUntilWithTimeObserver = function(__super__) {\n        inherits(SkipUntilWithTimeObserver, __super__);\n        function SkipUntilWithTimeObserver(o, p) {\n            this._o = o;\n            this._p = p;\n            __super__.call(this);\n        }\n        SkipUntilWithTimeObserver.prototype.next = function(x) {\n            this._p._open && this._o.onNext(x);\n        };\n        SkipUntilWithTimeObserver.prototype.error = function(e) {\n            this._o.onError(e);\n        };\n        SkipUntilWithTimeObserver.prototype.completed = function() {\n            this._o.onCompleted();\n        };\n        return SkipUntilWithTimeObserver;\n    }(AbstractObserver);\n    /**\n   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.\n   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.\n   *\n   * @examples\n   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);\n   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);\n   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.\n   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.\n   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.\n   */ observableProto.skipUntilWithTime = function(startTime, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        return new SkipUntilWithTimeObservable(this, startTime, scheduler);\n    };\n    /**\n   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.\n   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.\n   * @param {Scheduler} [scheduler] Scheduler to run the timer on.\n   * @returns {Observable} An observable sequence with the elements taken until the specified end time.\n   */ observableProto.takeUntilWithTime = function(endTime, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            return new BinaryDisposable(scheduler.scheduleFuture(o, endTime, function(_, o) {\n                o.onCompleted();\n            }), source.subscribe(o));\n        }, source);\n    };\n    /**\n   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.\n   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item\n   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.\n   * @returns {Observable} An Observable that performs the throttle operation.\n   */ observableProto.throttle = function(windowDuration, scheduler) {\n        isScheduler(scheduler) || (scheduler = defaultScheduler);\n        var duration = +windowDuration || 0;\n        if (duration <= 0) {\n            throw new RangeError(\"windowDuration cannot be less or equal zero.\");\n        }\n        var source = this;\n        return new AnonymousObservable(function(o) {\n            var lastOnNext = 0;\n            return source.subscribe(function(x) {\n                var now = scheduler.now();\n                if (lastOnNext === 0 || now - lastOnNext >= duration) {\n                    lastOnNext = now;\n                    o.onNext(x);\n                }\n            }, function(e) {\n                o.onError(e);\n            }, function() {\n                o.onCompleted();\n            });\n        }, source);\n    };\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/dist/rx.virtualtime.js":
/*!************************************************!*\
  !*** ./node_modules/rx/dist/rx.virtualtime.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.\n\n(function(factory) {\n    var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    function checkGlobal(value) {\n        return value && value.Object === Object ? value : null;\n    }\n    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : null;\n    var freeModule = objectTypes[\"object\"] && module && !module.nodeType ? module : null;\n    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === \"object\" && global);\n    var freeSelf = checkGlobal(objectTypes[typeof self] && self);\n    var freeWindow = checkGlobal(objectTypes[\"undefined\"] && window);\n    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;\n    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function(\"return this\")();\n    // Because of build optimizers\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! ./rx */ \"(ssr)/./node_modules/rx/dist/rx.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Rx, exports1) {\n            return factory(root, exports1, Rx);\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(void 0, function(root, exp, Rx, undefined) {\n    // Aliases\n    var Scheduler = Rx.Scheduler, ScheduledItem = Rx.internals.ScheduledItem, SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive, PriorityQueue = Rx.internals.PriorityQueue, inherits = Rx.internals.inherits, defaultSubComparer = Rx.helpers.defaultSubComparer, notImplemented = Rx.helpers.notImplemented;\n    /** Provides a set of extension methods for virtual time scheduling. */ var VirtualTimeScheduler = Rx.VirtualTimeScheduler = function(__super__) {\n        inherits(VirtualTimeScheduler, __super__);\n        /**\n     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.\n     *\n     * @constructor\n     * @param {Number} initialClock Initial value for the clock.\n     * @param {Function} comparer Comparer to determine causality of events based on absolute time.\n     */ function VirtualTimeScheduler(initialClock, comparer) {\n            this.clock = initialClock;\n            this.comparer = comparer;\n            this.isEnabled = false;\n            this.queue = new PriorityQueue(1024);\n            __super__.call(this);\n        }\n        var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;\n        VirtualTimeSchedulerPrototype.now = function() {\n            return this.toAbsoluteTime(this.clock);\n        };\n        VirtualTimeSchedulerPrototype.schedule = function(state, action) {\n            return this.scheduleAbsolute(state, this.clock, action);\n        };\n        VirtualTimeSchedulerPrototype.scheduleFuture = function(state, dueTime, action) {\n            var dt = dueTime instanceof Date ? this.toRelativeTime(dueTime - this.now()) : this.toRelativeTime(dueTime);\n            return this.scheduleRelative(state, dt, action);\n        };\n        /**\n     * Adds a relative time value to an absolute time value.\n     * @param {Number} absolute Absolute virtual time value.\n     * @param {Number} relative Relative virtual time value to add.\n     * @return {Number} Resulting absolute virtual time sum value.\n     */ VirtualTimeSchedulerPrototype.add = notImplemented;\n        /**\n     * Converts an absolute time to a number\n     * @param {Any} The absolute time.\n     * @returns {Number} The absolute time in ms\n     */ VirtualTimeSchedulerPrototype.toAbsoluteTime = notImplemented;\n        /**\n     * Converts the TimeSpan value to a relative virtual time value.\n     * @param {Number} timeSpan TimeSpan value to convert.\n     * @return {Number} Corresponding relative virtual time value.\n     */ VirtualTimeSchedulerPrototype.toRelativeTime = notImplemented;\n        /**\n     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.\n     * @param {Mixed} state Initial state passed to the action upon the first iteration.\n     * @param {Number} period Period for running the work periodically.\n     * @param {Function} action Action to be executed, potentially updating the state.\n     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).\n     */ VirtualTimeSchedulerPrototype.schedulePeriodic = function(state, period, action) {\n            var s = new SchedulePeriodicRecursive(this, state, period, action);\n            return s.start();\n        };\n        /**\n     * Schedules an action to be executed after dueTime.\n     * @param {Mixed} state State passed to the action to be executed.\n     * @param {Number} dueTime Relative time after which to execute the action.\n     * @param {Function} action Action to be executed.\n     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n     */ VirtualTimeSchedulerPrototype.scheduleRelative = function(state, dueTime, action) {\n            var runAt = this.add(this.clock, dueTime);\n            return this.scheduleAbsolute(state, runAt, action);\n        };\n        /**\n     * Starts the virtual time scheduler.\n     */ VirtualTimeSchedulerPrototype.start = function() {\n            if (!this.isEnabled) {\n                this.isEnabled = true;\n                do {\n                    var next = this.getNext();\n                    if (next !== null) {\n                        this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);\n                        next.invoke();\n                    } else {\n                        this.isEnabled = false;\n                    }\n                }while (this.isEnabled);\n            }\n        };\n        /**\n     * Stops the virtual time scheduler.\n     */ VirtualTimeSchedulerPrototype.stop = function() {\n            this.isEnabled = false;\n        };\n        /**\n     * Advances the scheduler's clock to the specified time, running all work till that point.\n     * @param {Number} time Absolute time to advance the scheduler's clock to.\n     */ VirtualTimeSchedulerPrototype.advanceTo = function(time) {\n            var dueToClock = this.comparer(this.clock, time);\n            if (this.comparer(this.clock, time) > 0) {\n                throw new ArgumentOutOfRangeError();\n            }\n            if (dueToClock === 0) {\n                return;\n            }\n            if (!this.isEnabled) {\n                this.isEnabled = true;\n                do {\n                    var next = this.getNext();\n                    if (next !== null && this.comparer(next.dueTime, time) <= 0) {\n                        this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);\n                        next.invoke();\n                    } else {\n                        this.isEnabled = false;\n                    }\n                }while (this.isEnabled);\n                this.clock = time;\n            }\n        };\n        /**\n     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.\n     * @param {Number} time Relative time to advance the scheduler's clock by.\n     */ VirtualTimeSchedulerPrototype.advanceBy = function(time) {\n            var dt = this.add(this.clock, time), dueToClock = this.comparer(this.clock, dt);\n            if (dueToClock > 0) {\n                throw new ArgumentOutOfRangeError();\n            }\n            if (dueToClock === 0) {\n                return;\n            }\n            this.advanceTo(dt);\n        };\n        /**\n     * Advances the scheduler's clock by the specified relative time.\n     * @param {Number} time Relative time to advance the scheduler's clock by.\n     */ VirtualTimeSchedulerPrototype.sleep = function(time) {\n            var dt = this.add(this.clock, time);\n            if (this.comparer(this.clock, dt) >= 0) {\n                throw new ArgumentOutOfRangeError();\n            }\n            this.clock = dt;\n        };\n        /**\n     * Gets the next scheduled item to be executed.\n     * @returns {ScheduledItem} The next scheduled item.\n     */ VirtualTimeSchedulerPrototype.getNext = function() {\n            while(this.queue.length > 0){\n                var next = this.queue.peek();\n                if (next.isCancelled()) {\n                    this.queue.dequeue();\n                } else {\n                    return next;\n                }\n            }\n            return null;\n        };\n        /**\n     * Schedules an action to be executed at dueTime.\n     * @param {Mixed} state State passed to the action to be executed.\n     * @param {Number} dueTime Absolute time at which to execute the action.\n     * @param {Function} action Action to be executed.\n     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).\n     */ VirtualTimeSchedulerPrototype.scheduleAbsolute = function(state, dueTime, action) {\n            var self1 = this;\n            function run(scheduler, state1) {\n                self1.queue.remove(si);\n                return action(scheduler, state1);\n            }\n            var si = new ScheduledItem(this, state, run, dueTime, this.comparer);\n            this.queue.enqueue(si);\n            return si.disposable;\n        };\n        return VirtualTimeScheduler;\n    }(Scheduler);\n    /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */ Rx.HistoricalScheduler = function(__super__) {\n        inherits(HistoricalScheduler, __super__);\n        /**\n     * Creates a new historical scheduler with the specified initial clock value.\n     * @constructor\n     * @param {Number} initialClock Initial value for the clock.\n     * @param {Function} comparer Comparer to determine causality of events based on absolute time.\n     */ function HistoricalScheduler(initialClock, comparer) {\n            var clock = initialClock == null ? 0 : initialClock;\n            var cmp = comparer || defaultSubComparer;\n            __super__.call(this, clock, cmp);\n        }\n        var HistoricalSchedulerProto = HistoricalScheduler.prototype;\n        /**\n     * Adds a relative time value to an absolute time value.\n     * @param {Number} absolute Absolute virtual time value.\n     * @param {Number} relative Relative virtual time value to add.\n     * @return {Number} Resulting absolute virtual time sum value.\n     */ HistoricalSchedulerProto.add = function(absolute, relative) {\n            return absolute + relative;\n        };\n        HistoricalSchedulerProto.toAbsoluteTime = function(absolute) {\n            return new Date(absolute).getTime();\n        };\n        /**\n     * Converts the TimeSpan value to a relative virtual time value.\n     * @memberOf HistoricalScheduler\n     * @param {Number} timeSpan TimeSpan value to convert.\n     * @return {Number} Corresponding relative virtual time value.\n     */ HistoricalSchedulerProto.toRelativeTime = function(timeSpan) {\n            return timeSpan;\n        };\n        return HistoricalScheduler;\n    }(Rx.VirtualTimeScheduler);\n    return Rx;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/dist/rx.virtualtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/rx/index.js":
/*!**********************************!*\
  !*** ./node_modules/rx/index.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Rx = __webpack_require__(/*! ./dist/rx */ \"(ssr)/./node_modules/rx/dist/rx.js\");\n__webpack_require__(/*! ./dist/rx.aggregates */ \"(ssr)/./node_modules/rx/dist/rx.aggregates.js\");\n__webpack_require__(/*! ./dist/rx.async */ \"(ssr)/./node_modules/rx/dist/rx.async.js\");\n__webpack_require__(/*! ./dist/rx.backpressure */ \"(ssr)/./node_modules/rx/dist/rx.backpressure.js\");\n__webpack_require__(/*! ./dist/rx.binding */ \"(ssr)/./node_modules/rx/dist/rx.binding.js\");\n__webpack_require__(/*! ./dist/rx.coincidence */ \"(ssr)/./node_modules/rx/dist/rx.coincidence.js\");\n__webpack_require__(/*! ./dist/rx.experimental */ \"(ssr)/./node_modules/rx/dist/rx.experimental.js\");\n__webpack_require__(/*! ./dist/rx.joinpatterns */ \"(ssr)/./node_modules/rx/dist/rx.joinpatterns.js\");\n__webpack_require__(/*! ./dist/rx.sorting */ \"(ssr)/./node_modules/rx/dist/rx.sorting.js\");\n__webpack_require__(/*! ./dist/rx.virtualtime */ \"(ssr)/./node_modules/rx/dist/rx.virtualtime.js\");\n__webpack_require__(/*! ./dist/rx.testing */ \"(ssr)/./node_modules/rx/dist/rx.testing.js\");\n__webpack_require__(/*! ./dist/rx.time */ \"(ssr)/./node_modules/rx/dist/rx.time.js\");\nmodule.exports = Rx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcngvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLEtBQUtDLG1CQUFPQSxDQUFDO0FBQ2pCQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUNSQSxtQkFBT0EsQ0FBQztBQUVSQyxPQUFPQyxPQUFPLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2VydmVyLWFjdGlvbi8uL25vZGVfbW9kdWxlcy9yeC9pbmRleC5qcz83MWI5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBSeCA9IHJlcXVpcmUoJy4vZGlzdC9yeCcpO1xucmVxdWlyZSgnLi9kaXN0L3J4LmFnZ3JlZ2F0ZXMnKTtcbnJlcXVpcmUoJy4vZGlzdC9yeC5hc3luYycpO1xucmVxdWlyZSgnLi9kaXN0L3J4LmJhY2twcmVzc3VyZScpO1xucmVxdWlyZSgnLi9kaXN0L3J4LmJpbmRpbmcnKTtcbnJlcXVpcmUoJy4vZGlzdC9yeC5jb2luY2lkZW5jZScpO1xucmVxdWlyZSgnLi9kaXN0L3J4LmV4cGVyaW1lbnRhbCcpO1xucmVxdWlyZSgnLi9kaXN0L3J4LmpvaW5wYXR0ZXJucycpO1xucmVxdWlyZSgnLi9kaXN0L3J4LnNvcnRpbmcnKTtcbnJlcXVpcmUoJy4vZGlzdC9yeC52aXJ0dWFsdGltZScpO1xucmVxdWlyZSgnLi9kaXN0L3J4LnRlc3RpbmcnKTtcbnJlcXVpcmUoJy4vZGlzdC9yeC50aW1lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUng7XG4iXSwibmFtZXMiOlsiUngiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rx/index.js\n");

/***/ })

};
;